// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: electron_sdk.proto

#include "electron_sdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace electron {
namespace sdk {
namespace proto {
class InitSDKParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitSDKParams> _instance;
} _InitSDKParams_default_instance_;
class AuthParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthParams> _instance;
} _AuthParams_default_instance_;
class AuthWithJwtTokenParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthWithJwtTokenParams> _instance;
} _AuthWithJwtTokenParams_default_instance_;
class LoginParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginParams> _instance;
} _LoginParams_default_instance_;
class LoginWithSSOTokenParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginWithSSOTokenParams> _instance;
} _LoginWithSSOTokenParams_default_instance_;
class StartMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartMeetingParams> _instance;
} _StartMeetingParams_default_instance_;
class StartWithoutLoginParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartWithoutLoginParams> _instance;
} _StartWithoutLoginParams_default_instance_;
class JoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinMeetingParams> _instance;
} _JoinMeetingParams_default_instance_;
class JoinWithoutLoginParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinWithoutLoginParams> _instance;
} _JoinWithoutLoginParams_default_instance_;
class LeaveMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveMeetingParams> _instance;
} _LeaveMeetingParams_default_instance_;
class HandleZoomWebUriProtocolActionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandleZoomWebUriProtocolActionParams> _instance;
} _HandleZoomWebUriProtocolActionParams_default_instance_;
class ShowChatDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowChatDlgParams> _instance;
} _ShowChatDlgParams_default_instance_;
class EnterFullScreenParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterFullScreenParams> _instance;
} _EnterFullScreenParams_default_instance_;
class ExitFullScreenParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitFullScreenParams> _instance;
} _ExitFullScreenParams_default_instance_;
class MoveFloatVideoWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFloatVideoWndParams> _instance;
} _MoveFloatVideoWndParams_default_instance_;
class ShowSharingToolbarParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSharingToolbarParams> _instance;
} _ShowSharingToolbarParams_default_instance_;
class ChangeFloatoActiveSpkVideoSizeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeFloatoActiveSpkVideoSizeParams> _instance;
} _ChangeFloatoActiveSpkVideoSizeParams_default_instance_;
class ShowParticipantsListWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowParticipantsListWndParams> _instance;
} _ShowParticipantsListWndParams_default_instance_;
class ShowBottomFloatToolbarWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowBottomFloatToolbarWndParams> _instance;
} _ShowBottomFloatToolbarWndParams_default_instance_;
class ShowPreOrNextPageVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowPreOrNextPageVideoParams> _instance;
} _ShowPreOrNextPageVideoParams_default_instance_;
class ShowSharingFrameWindowsParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSharingFrameWindowsParams> _instance;
} _ShowSharingFrameWindowsParams_default_instance_;
class SwitchSplitScreenModeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchSplitScreenModeParams> _instance;
} _SwitchSplitScreenModeParams_default_instance_;
class SwitchMinimizeUIMode4FirstScreenMeetingUIWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams> _instance;
} _SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_default_instance_;
class SwapToShowShareViewOrVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapToShowShareViewOrVideoParams> _instance;
} _SwapToShowShareViewOrVideoParams_default_instance_;
class ShowSettingDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSettingDlgParams> _instance;
} _ShowSettingDlgParams_default_instance_;
class ScheduleMeetingWithWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScheduleMeetingWithWndParams> _instance;
} _ScheduleMeetingWithWndParams_default_instance_;
class EditMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditMeetingParams> _instance;
} _EditMeetingParams_default_instance_;
class EditMeetingWithWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditMeetingWithWndParams> _instance;
} _EditMeetingWithWndParams_default_instance_;
class DeleteMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMeetingParams> _instance;
} _DeleteMeetingParams_default_instance_;
class AddCustomizedPictureResourceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCustomizedPictureResourceParams> _instance;
} _AddCustomizedPictureResourceParams_default_instance_;
class AddCustomizedStringResourceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCustomizedStringResourceParams> _instance;
} _AddCustomizedStringResourceParams_default_instance_;
class AddCustomizedURLResourceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCustomizedURLResourceParams> _instance;
} _AddCustomizedURLResourceParams_default_instance_;
class TryWithMeetingNumberParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryWithMeetingNumberParams> _instance;
} _TryWithMeetingNumberParams_default_instance_;
class TryWithPairingCodeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryWithPairingCodeParams> _instance;
} _TryWithPairingCodeParams_default_instance_;
class StartAnnotationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartAnnotationParams> _instance;
} _StartAnnotationParams_default_instance_;
class StopAnnotationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopAnnotationParams> _instance;
} _StopAnnotationParams_default_instance_;
class SetToolParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetToolParams> _instance;
} _SetToolParams_default_instance_;
class ClearAnnotationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearAnnotationParams> _instance;
} _ClearAnnotationParams_default_instance_;
class SetColorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetColorParams> _instance;
} _SetColorParams_default_instance_;
class SetLineWidthParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLineWidthParams> _instance;
} _SetLineWidthParams_default_instance_;
class UndoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndoParams> _instance;
} _UndoParams_default_instance_;
class RedoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedoParams> _instance;
} _RedoParams_default_instance_;
class MuteAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteAudioParams> _instance;
} _MuteAudioParams_default_instance_;
class UnmuteAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnmuteAudioParams> _instance;
} _UnmuteAudioParams_default_instance_;
class EnablePlayChimeWhenEnterOrExitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnablePlayChimeWhenEnterOrExitParams> _instance;
} _EnablePlayChimeWhenEnterOrExitParams_default_instance_;
class EnableInviteButtonOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableInviteButtonOnMeetingUIParams> _instance;
} _EnableInviteButtonOnMeetingUIParams_default_instance_;
class SetFloatVideoPosParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetFloatVideoPosParams> _instance;
} _SetFloatVideoPosParams_default_instance_;
class SetBottomFloatToolBarWndVisibilityParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetBottomFloatToolBarWndVisibilityParams> _instance;
} _SetBottomFloatToolBarWndVisibilityParams_default_instance_;
class SetSharingToolBarVisibilityParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSharingToolBarVisibilityParams> _instance;
} _SetSharingToolBarVisibilityParams_default_instance_;
class SetDirectShareMonitorIDParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDirectShareMonitorIDParams> _instance;
} _SetDirectShareMonitorIDParams_default_instance_;
class SetMeetingUIPosParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMeetingUIPosParams> _instance;
} _SetMeetingUIPosParams_default_instance_;
class DisableWaitingForHostDialogParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableWaitingForHostDialogParams> _instance;
} _DisableWaitingForHostDialogParams_default_instance_;
class DisablePopupMeetingWrongPSWDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisablePopupMeetingWrongPSWDlgParams> _instance;
} _DisablePopupMeetingWrongPSWDlgParams_default_instance_;
class EnableAutoEndOtherMeetingWhenStartMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoEndOtherMeetingWhenStartMeetingParams> _instance;
} _EnableAutoEndOtherMeetingWhenStartMeetingParams_default_instance_;
class EnableLButtonDBClick4SwitchFullScreenModeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableLButtonDBClick4SwitchFullScreenModeParams> _instance;
} _EnableLButtonDBClick4SwitchFullScreenModeParams_default_instance_;
class SetFloatVideoWndVisibilityParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetFloatVideoWndVisibilityParams> _instance;
} _SetFloatVideoWndVisibilityParams_default_instance_;
class PrePopulateWebinarRegistrationInfoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrePopulateWebinarRegistrationInfoParams> _instance;
} _PrePopulateWebinarRegistrationInfoParams_default_instance_;
class EnableAutoAdjustSpeakerVolumeWhenJoinAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams> _instance;
} _EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_default_instance_;
class EnableAutoAdjustMicVolumeWhenJoinAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoAdjustMicVolumeWhenJoinAudioParams> _instance;
} _EnableAutoAdjustMicVolumeWhenJoinAudioParams_default_instance_;
class ConfigDSCPParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigDSCPParams> _instance;
} _ConfigDSCPParams_default_instance_;
class EnableHIdeFullPhoneNumber4PureCallinUserParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableHIdeFullPhoneNumber4PureCallinUserParams> _instance;
} _EnableHIdeFullPhoneNumber4PureCallinUserParams_default_instance_;
class EnableShareIOSDeviceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableShareIOSDeviceParams> _instance;
} _EnableShareIOSDeviceParams_default_instance_;
class EnableShareWhiteBoardParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableShareWhiteBoardParams> _instance;
} _EnableShareWhiteBoardParams_default_instance_;
class EnableLengthLimitationOfMeetingNumberParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableLengthLimitationOfMeetingNumberParams> _instance;
} _EnableLengthLimitationOfMeetingNumberParams_default_instance_;
class ForceDisableMultiShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForceDisableMultiShareParams> _instance;
} _ForceDisableMultiShareParams_default_instance_;
class EnableLocalRecordingConverProgressBarDialogParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableLocalRecordingConverProgressBarDialogParams> _instance;
} _EnableLocalRecordingConverProgressBarDialogParams_default_instance_;
class SetMaxDurationForOnlyHostInMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMaxDurationForOnlyHostInMeetingParams> _instance;
} _SetMaxDurationForOnlyHostInMeetingParams_default_instance_;
class EnableApproveRemoteControlDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableApproveRemoteControlDlgParams> _instance;
} _EnableApproveRemoteControlDlgParams_default_instance_;
class EnableDeclineRemoteControlResponseDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableDeclineRemoteControlResponseDlgParams> _instance;
} _EnableDeclineRemoteControlResponseDlgParams_default_instance_;
class EnableLeaveMeetingOptionForHostParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableLeaveMeetingOptionForHostParams> _instance;
} _EnableLeaveMeetingOptionForHostParams_default_instance_;
class EnableVideoButtonOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableVideoButtonOnMeetingUIParams> _instance;
} _EnableVideoButtonOnMeetingUIParams_default_instance_;
class EnableAudioButtonOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAudioButtonOnMeetingUIParams> _instance;
} _EnableAudioButtonOnMeetingUIParams_default_instance_;
class EnableEnterAndExitFullScreenButtonOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableEnterAndExitFullScreenButtonOnMeetingUIParams> _instance;
} _EnableEnterAndExitFullScreenButtonOnMeetingUIParams_default_instance_;
class RedirectClickShareBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickShareBTNEventParams> _instance;
} _RedirectClickShareBTNEventParams_default_instance_;
class RedirectClickEndMeetingBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickEndMeetingBTNEventParams> _instance;
} _RedirectClickEndMeetingBTNEventParams_default_instance_;
class RedirectFreeMeetingEndingReminderDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectFreeMeetingEndingReminderDlgParams> _instance;
} _RedirectFreeMeetingEndingReminderDlgParams_default_instance_;
class RedirectClickCustomLiveStreamMenuEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickCustomLiveStreamMenuEventParams> _instance;
} _RedirectClickCustomLiveStreamMenuEventParams_default_instance_;
class RedirectClickParticipantListBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickParticipantListBTNEventParams> _instance;
} _RedirectClickParticipantListBTNEventParams_default_instance_;
class RedirectClickCCBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickCCBTNEventParams> _instance;
} _RedirectClickCCBTNEventParams_default_instance_;
class RedirectClickAudioBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickAudioBTNEventParams> _instance;
} _RedirectClickAudioBTNEventParams_default_instance_;
class RedirectClickAudioMenuBTNEventParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectClickAudioMenuBTNEventParams> _instance;
} _RedirectClickAudioMenuBTNEventParams_default_instance_;
class RedirectMeetingWarningMsgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectMeetingWarningMsgParams> _instance;
} _RedirectMeetingWarningMsgParams_default_instance_;
class EnableToolTipsShowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableToolTipsShowParams> _instance;
} _EnableToolTipsShowParams_default_instance_;
class EnableAirplayInstructionWindowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAirplayInstructionWindowParams> _instance;
} _EnableAirplayInstructionWindowParams_default_instance_;
class EnableClaimHostFeatureParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableClaimHostFeatureParams> _instance;
} _EnableClaimHostFeatureParams_default_instance_;
class EnableAutoHideJoinAudioDialogParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoHideJoinAudioDialogParams> _instance;
} _EnableAutoHideJoinAudioDialogParams_default_instance_;
class AlwaysShowIconOnTaskBarParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlwaysShowIconOnTaskBarParams> _instance;
} _AlwaysShowIconOnTaskBarParams_default_instance_;
class DisableSplitScreenModeUIElementsParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableSplitScreenModeUIElementsParams> _instance;
} _DisableSplitScreenModeUIElementsParams_default_instance_;
class SetShowAudioUseComputerSoundChkboxParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowAudioUseComputerSoundChkboxParams> _instance;
} _SetShowAudioUseComputerSoundChkboxParams_default_instance_;
class SetShowCallInTabParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowCallInTabParams> _instance;
} _SetShowCallInTabParams_default_instance_;
class SetShowCallMeTabParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowCallMeTabParams> _instance;
} _SetShowCallMeTabParams_default_instance_;
class DisableTopMostAttr4SettingDialogParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableTopMostAttr4SettingDialogParams> _instance;
} _DisableTopMostAttr4SettingDialogParams_default_instance_;
class EnableGrabShareWithoutReminderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableGrabShareWithoutReminderParams> _instance;
} _EnableGrabShareWithoutReminderParams_default_instance_;
class EnableShowShareSwitchMultiToSingleConfirmDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableShowShareSwitchMultiToSingleConfirmDlgParams> _instance;
} _EnableShowShareSwitchMultiToSingleConfirmDlgParams_default_instance_;
class DisableFreeMeetingRemainTimeNotifyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableFreeMeetingRemainTimeNotifyParams> _instance;
} _DisableFreeMeetingRemainTimeNotifyParams_default_instance_;
class HideChatItemOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideChatItemOnMeetingUIParams> _instance;
} _HideChatItemOnMeetingUIParams_default_instance_;
class HideRecordItemOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideRecordItemOnMeetingUIParams> _instance;
} _HideRecordItemOnMeetingUIParams_default_instance_;
class HideUpgradeFreeMeetingButtonParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideUpgradeFreeMeetingButtonParams> _instance;
} _HideUpgradeFreeMeetingButtonParams_default_instance_;
class SetShowInviteDlgTabPageParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowInviteDlgTabPageParams> _instance;
} _SetShowInviteDlgTabPageParams_default_instance_;
class SetShowH323SubTabPageParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowH323SubTabPageParams> _instance;
} _SetShowH323SubTabPageParams_default_instance_;
class HideSwitchCameraButtonParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideSwitchCameraButtonParams> _instance;
} _HideSwitchCameraButtonParams_default_instance_;
class HideCopyUrlOnInviteWindowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideCopyUrlOnInviteWindowParams> _instance;
} _HideCopyUrlOnInviteWindowParams_default_instance_;
class HideCopyInvitationOnInviteWindowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideCopyInvitationOnInviteWindowParams> _instance;
} _HideCopyInvitationOnInviteWindowParams_default_instance_;
class HideKeypadButtonOnMeetingWindowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideKeypadButtonOnMeetingWindowParams> _instance;
} _HideKeypadButtonOnMeetingWindowParams_default_instance_;
class HideRemoteControlOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideRemoteControlOnMeetingUIParams> _instance;
} _HideRemoteControlOnMeetingUIParams_default_instance_;
class HideQAOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideQAOnMeetingUIParams> _instance;
} _HideQAOnMeetingUIParams_default_instance_;
class HidePollOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HidePollOnMeetingUIParams> _instance;
} _HidePollOnMeetingUIParams_default_instance_;
class EnableInputMeetingPasswordDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableInputMeetingPasswordDlgParams> _instance;
} _EnableInputMeetingPasswordDlgParams_default_instance_;
class EnableInputMeetingScreenNameDlgParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableInputMeetingScreenNameDlgParams> _instance;
} _EnableInputMeetingScreenNameDlgParams_default_instance_;
class RedirectWebinarNeedRegisterParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectWebinarNeedRegisterParams> _instance;
} _RedirectWebinarNeedRegisterParams_default_instance_;
class RedirectEndOtherMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectEndOtherMeetingParams> _instance;
} _RedirectEndOtherMeetingParams_default_instance_;
class EnableForceAutoStartMyVideoWhenJoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableForceAutoStartMyVideoWhenJoinMeetingParams> _instance;
} _EnableForceAutoStartMyVideoWhenJoinMeetingParams_default_instance_;
class EnableForceAutoStopMyVideoWhenJoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableForceAutoStopMyVideoWhenJoinMeetingParams> _instance;
} _EnableForceAutoStopMyVideoWhenJoinMeetingParams_default_instance_;
class DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams> _instance;
} _DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_default_instance_;
class DisableShowJoinMeetingWndParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableShowJoinMeetingWndParams> _instance;
} _DisableShowJoinMeetingWndParams_default_instance_;
class DisableConfidentialWatermarkParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableConfidentialWatermarkParams> _instance;
} _DisableConfidentialWatermarkParams_default_instance_;
class DisableToolbarInviteButtonClickOriginActionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableToolbarInviteButtonClickOriginActionParams> _instance;
} _DisableToolbarInviteButtonClickOriginActionParams_default_instance_;
class SetShowVideoOptimizeChkboxParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShowVideoOptimizeChkboxParams> _instance;
} _SetShowVideoOptimizeChkboxParams_default_instance_;
class InputMeetingPasswordAndScreenNameParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputMeetingPasswordAndScreenNameParams> _instance;
} _InputMeetingPasswordAndScreenNameParams_default_instance_;
class InputMeetingIDAndScreenNameParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputMeetingIDAndScreenNameParams> _instance;
} _InputMeetingIDAndScreenNameParams_default_instance_;
class InputMeetingScreenNameParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputMeetingScreenNameParams> _instance;
} _InputMeetingScreenNameParams_default_instance_;
class InputWebinarRegisterEmailAndScreenNameParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputWebinarRegisterEmailAndScreenNameParams> _instance;
} _InputWebinarRegisterEmailAndScreenNameParams_default_instance_;
class CallOutH323ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallOutH323Params> _instance;
} _CallOutH323Params_default_instance_;
class GetUserInfoByUserIDParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserInfoByUserIDParams> _instance;
} _GetUserInfoByUserIDParams_default_instance_;
class CanStartRecordingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanStartRecordingParams> _instance;
} _CanStartRecordingParams_default_instance_;
class IsSupportLocalRecordingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsSupportLocalRecordingParams> _instance;
} _IsSupportLocalRecordingParams_default_instance_;
class AllowLocalRecordingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowLocalRecordingParams> _instance;
} _AllowLocalRecordingParams_default_instance_;
class DisAllowLocalRecordingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisAllowLocalRecordingParams> _instance;
} _DisAllowLocalRecordingParams_default_instance_;
class StartAppShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartAppShareParams> _instance;
} _StartAppShareParams_default_instance_;
class StartMonitorShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartMonitorShareParams> _instance;
} _StartMonitorShareParams_default_instance_;
class MuteVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteVideoParams> _instance;
} _MuteVideoParams_default_instance_;
class UnMuteVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnMuteVideoParams> _instance;
} _UnMuteVideoParams_default_instance_;
class PinVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinVideoParams> _instance;
} _PinVideoParams_default_instance_;
class SpotlightVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotlightVideoParams> _instance;
} _SpotlightVideoParams_default_instance_;
class HideOrShowNoVideoUserOnVideoWallParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideOrShowNoVideoUserOnVideoWallParams> _instance;
} _HideOrShowNoVideoUserOnVideoWallParams_default_instance_;
class CreateRendererParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRendererParams> _instance;
} _CreateRendererParams_default_instance_;
class DestroyRendererParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyRendererParams> _instance;
} _DestroyRendererParams_default_instance_;
class SubscribeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeParams> _instance;
} _SubscribeParams_default_instance_;
class UnSubscribeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnSubscribeParams> _instance;
} _UnSubscribeParams_default_instance_;
class SetRawDataResolutionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRawDataResolutionParams> _instance;
} _SetRawDataResolutionParams_default_instance_;
class GetResolutionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResolutionParams> _instance;
} _GetResolutionParams_default_instance_;
class GetRawDataTypeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawDataTypeParams> _instance;
} _GetRawDataTypeParams_default_instance_;
class GetUserIdParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserIdParams> _instance;
} _GetUserIdParams_default_instance_;
class EnableZoomAuthRealNameMeetingUIShownParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableZoomAuthRealNameMeetingUIShownParams> _instance;
} _EnableZoomAuthRealNameMeetingUIShownParams_default_instance_;
class RetrieveParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveParams> _instance;
} _RetrieveParams_default_instance_;
class VerifyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyParams> _instance;
} _VerifyParams_default_instance_;
class SetDefaultCellPhoneInfoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDefaultCellPhoneInfoParams> _instance;
} _SetDefaultCellPhoneInfoParams_default_instance_;
class EnableAlwaysShowMeetingControlsParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAlwaysShowMeetingControlsParams> _instance;
} _EnableAlwaysShowMeetingControlsParams_default_instance_;
class SelectMicParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectMicParams> _instance;
} _SelectMicParams_default_instance_;
class SelectSpeakerParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectSpeakerParams> _instance;
} _SelectSpeakerParams_default_instance_;
class EnableAutoJoinAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoJoinAudioParams> _instance;
} _EnableAutoJoinAudioParams_default_instance_;
class EnableAutoAdjustMicParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoAdjustMicParams> _instance;
} _EnableAutoAdjustMicParams_default_instance_;
class EnableStereoAudioParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableStereoAudioParams> _instance;
} _EnableStereoAudioParams_default_instance_;
class EnableMicOriginalInputParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableMicOriginalInputParams> _instance;
} _EnableMicOriginalInputParams_default_instance_;
class EnableHoldSpaceKeyToSpeakParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableHoldSpaceKeyToSpeakParams> _instance;
} _EnableHoldSpaceKeyToSpeakParams_default_instance_;
class EnableAlwaysMuteMicWhenJoinVoipParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAlwaysMuteMicWhenJoinVoipParams> _instance;
} _EnableAlwaysMuteMicWhenJoinVoipParams_default_instance_;
class EnableSuppressAudioNotifyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableSuppressAudioNotifyParams> _instance;
} _EnableSuppressAudioNotifyParams_default_instance_;
class SetEchoCancellationLevelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEchoCancellationLevelParams> _instance;
} _SetEchoCancellationLevelParams_default_instance_;
class SetMicVolParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMicVolParams> _instance;
} _SetMicVolParams_default_instance_;
class SetSpeakerVolParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSpeakerVolParams> _instance;
} _SetSpeakerVolParams_default_instance_;
class EnableDualScreenModeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableDualScreenModeParams> _instance;
} _EnableDualScreenModeParams_default_instance_;
class TurnOffAeroModeInSharingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TurnOffAeroModeInSharingParams> _instance;
} _TurnOffAeroModeInSharingParams_default_instance_;
class EnableAutoFitToWindowWhenViewSharingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoFitToWindowWhenViewSharingParams> _instance;
} _EnableAutoFitToWindowWhenViewSharingParams_default_instance_;
class EnableAutoFullScreenVideoWhenJoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoFullScreenVideoWhenJoinMeetingParams> _instance;
} _EnableAutoFullScreenVideoWhenJoinMeetingParams_default_instance_;
class EnableSplitScreenModeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableSplitScreenModeParams> _instance;
} _EnableSplitScreenModeParams_default_instance_;
class EnableAutoFullScreenVideoWhenViewShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoFullScreenVideoWhenViewShareParams> _instance;
} _EnableAutoFullScreenVideoWhenViewShareParams_default_instance_;
class EnableDisplayReminderWindowWhenExitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableDisplayReminderWindowWhenExitParams> _instance;
} _EnableDisplayReminderWindowWhenExitParams_default_instance_;
class EnableShowMyMeetingElapseTimeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableShowMyMeetingElapseTimeParams> _instance;
} _EnableShowMyMeetingElapseTimeParams_default_instance_;
class EnableAccelerateGPUWhenShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAccelerateGPUWhenShareParams> _instance;
} _EnableAccelerateGPUWhenShareParams_default_instance_;
class EnableRemoteControlAllApplicationsParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableRemoteControlAllApplicationsParams> _instance;
} _EnableRemoteControlAllApplicationsParams_default_instance_;
class SetRecordingPathParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRecordingPathParams> _instance;
} _SetRecordingPathParams_default_instance_;
class EnableSelectRecordFileLocationAfterMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableSelectRecordFileLocationAfterMeetingParams> _instance;
} _EnableSelectRecordFileLocationAfterMeetingParams_default_instance_;
class EnableMultiAudioStreamRecordParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableMultiAudioStreamRecordParams> _instance;
} _EnableMultiAudioStreamRecordParams_default_instance_;
class EnableAddTimestampWatermarkParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAddTimestampWatermarkParams> _instance;
} _EnableAddTimestampWatermarkParams_default_instance_;
class EnableOptimizeFor3rdPartyVideoEditorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableOptimizeFor3rdPartyVideoEditorParams> _instance;
} _EnableOptimizeFor3rdPartyVideoEditorParams_default_instance_;
class EnableShowVideoThumbnailWhenShareParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableShowVideoThumbnailWhenShareParams> _instance;
} _EnableShowVideoThumbnailWhenShareParams_default_instance_;
class EnablePlaceVideoNextToShareInRecordParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnablePlaceVideoNextToShareInRecordParams> _instance;
} _EnablePlaceVideoNextToShareInRecordParams_default_instance_;
class DisableAdvancedFeatures4GeneralSettingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableAdvancedFeatures4GeneralSettingParams> _instance;
} _DisableAdvancedFeatures4GeneralSettingParams_default_instance_;
class DisableAccountSettingTabPageParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableAccountSettingTabPageParams> _instance;
} _DisableAccountSettingTabPageParams_default_instance_;
class HideAutoCopyInviteLinkCheckBoxParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HideAutoCopyInviteLinkCheckBoxParams> _instance;
} _HideAutoCopyInviteLinkCheckBoxParams_default_instance_;
class ConfigToShowUrlLinksInSettingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigToShowUrlLinksInSettingParams> _instance;
} _ConfigToShowUrlLinksInSettingParams_default_instance_;
class ConfSettingDialogShownTabPageParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfSettingDialogShownTabPageParams> _instance;
} _ConfSettingDialogShownTabPageParams_default_instance_;
class SelectVideoCameraParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectVideoCameraParams> _instance;
} _SelectVideoCameraParams_default_instance_;
class EnableVideoMirrorEffectParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableVideoMirrorEffectParams> _instance;
} _EnableVideoMirrorEffectParams_default_instance_;
class EnableFaceBeautyEffectParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableFaceBeautyEffectParams> _instance;
} _EnableFaceBeautyEffectParams_default_instance_;
class EnableHDVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableHDVideoParams> _instance;
} _EnableHDVideoParams_default_instance_;
class EnableAlwaysShowNameOnVideoParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAlwaysShowNameOnVideoParams> _instance;
} _EnableAlwaysShowNameOnVideoParams_default_instance_;
class EnableVideoPreviewDialogParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableVideoPreviewDialogParams> _instance;
} _EnableVideoPreviewDialogParams_default_instance_;
class EnableAutoTurnOffVideoWhenJoinMeetingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAutoTurnOffVideoWhenJoinMeetingParams> _instance;
} _EnableAutoTurnOffVideoWhenJoinMeetingParams_default_instance_;
class EnableAlwaysUse16v9ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableAlwaysUse16v9Params> _instance;
} _EnableAlwaysUse16v9Params_default_instance_;
class EnableSpotlightSelfParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableSpotlightSelfParams> _instance;
} _EnableSpotlightSelfParams_default_instance_;
class EnableHardwareEncodeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableHardwareEncodeParams> _instance;
} _EnableHardwareEncodeParams_default_instance_;
class IsHardwareEncodeEnabledParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsHardwareEncodeEnabledParams> _instance;
} _IsHardwareEncodeEnabledParams_default_instance_;
class Enable49VideoesInGallaryViewParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Enable49VideoesInGallaryViewParams> _instance;
} _Enable49VideoesInGallaryViewParams_default_instance_;
class EnableHideNoVideoUsersOnWallViewParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableHideNoVideoUsersOnWallViewParams> _instance;
} _EnableHideNoVideoUsersOnWallViewParams_default_instance_;
class GenerateSSOLoginWebURLParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateSSOLoginWebURLParams> _instance;
} _GenerateSSOLoginWebURLParams_default_instance_;
class SSOLoginWithWebUriProtocolParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSOLoginWithWebUriProtocolParams> _instance;
} _SSOLoginWithWebUriProtocolParams_default_instance_;
class ShowAANPanelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowAANPanelParams> _instance;
} _ShowAANPanelParams_default_instance_;
class EnableInviteLinkOnMeetingUIParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableInviteLinkOnMeetingUIParams> _instance;
} _EnableInviteLinkOnMeetingUIParams_default_instance_;
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com
static void InitDefaultsscc_info_AddCustomizedPictureResourceParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AddCustomizedPictureResourceParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AddCustomizedPictureResourceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AddCustomizedPictureResourceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddCustomizedPictureResourceParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddCustomizedPictureResourceParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AddCustomizedStringResourceParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AddCustomizedStringResourceParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AddCustomizedStringResourceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AddCustomizedStringResourceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddCustomizedStringResourceParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddCustomizedStringResourceParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AddCustomizedURLResourceParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AddCustomizedURLResourceParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AddCustomizedURLResourceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AddCustomizedURLResourceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddCustomizedURLResourceParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddCustomizedURLResourceParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AllowLocalRecordingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AllowLocalRecordingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AllowLocalRecordingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AllowLocalRecordingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowLocalRecordingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllowLocalRecordingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AlwaysShowIconOnTaskBarParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AlwaysShowIconOnTaskBarParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlwaysShowIconOnTaskBarParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlwaysShowIconOnTaskBarParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AuthParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AuthParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AuthParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AuthParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_AuthWithJwtTokenParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_AuthWithJwtTokenParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::AuthWithJwtTokenParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::AuthWithJwtTokenParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthWithJwtTokenParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthWithJwtTokenParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_CallOutH323Params_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_CallOutH323Params_default_instance_;
    new (ptr) ::com::electron::sdk::proto::CallOutH323Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::CallOutH323Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallOutH323Params_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CallOutH323Params_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_CanStartRecordingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_CanStartRecordingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::CanStartRecordingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::CanStartRecordingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanStartRecordingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CanStartRecordingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ChangeFloatoActiveSpkVideoSizeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ChangeFloatoActiveSpkVideoSizeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeFloatoActiveSpkVideoSizeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeFloatoActiveSpkVideoSizeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ClearAnnotationParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ClearAnnotationParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ClearAnnotationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ClearAnnotationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearAnnotationParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearAnnotationParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ConfSettingDialogShownTabPageParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ConfSettingDialogShownTabPageParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfSettingDialogShownTabPageParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfSettingDialogShownTabPageParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ConfigDSCPParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ConfigDSCPParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ConfigDSCPParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ConfigDSCPParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigDSCPParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigDSCPParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ConfigToShowUrlLinksInSettingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ConfigToShowUrlLinksInSettingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigToShowUrlLinksInSettingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigToShowUrlLinksInSettingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_CreateRendererParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_CreateRendererParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::CreateRendererParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::CreateRendererParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRendererParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRendererParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DeleteMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DeleteMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DeleteMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DestroyRendererParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DestroyRendererParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DestroyRendererParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DestroyRendererParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestroyRendererParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestroyRendererParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisAllowLocalRecordingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisAllowLocalRecordingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisAllowLocalRecordingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisAllowLocalRecordingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisAllowLocalRecordingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisAllowLocalRecordingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableAccountSettingTabPageParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableAccountSettingTabPageParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableAccountSettingTabPageParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableAccountSettingTabPageParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableAccountSettingTabPageParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableAccountSettingTabPageParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableAdvancedFeatures4GeneralSettingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableAdvancedFeatures4GeneralSettingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableAdvancedFeatures4GeneralSettingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableAdvancedFeatures4GeneralSettingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableConfidentialWatermarkParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableConfidentialWatermarkParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableConfidentialWatermarkParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableConfidentialWatermarkParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableConfidentialWatermarkParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableConfidentialWatermarkParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableFreeMeetingRemainTimeNotifyParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableFreeMeetingRemainTimeNotifyParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableFreeMeetingRemainTimeNotifyParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableFreeMeetingRemainTimeNotifyParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisablePopupMeetingWrongPSWDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisablePopupMeetingWrongPSWDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisablePopupMeetingWrongPSWDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisablePopupMeetingWrongPSWDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableShowJoinMeetingWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableShowJoinMeetingWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableShowJoinMeetingWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableShowJoinMeetingWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableSplitScreenModeUIElementsParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableSplitScreenModeUIElementsParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableSplitScreenModeUIElementsParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableSplitScreenModeUIElementsParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableToolbarInviteButtonClickOriginActionParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableToolbarInviteButtonClickOriginActionParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableToolbarInviteButtonClickOriginActionParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableToolbarInviteButtonClickOriginActionParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableTopMostAttr4SettingDialogParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableTopMostAttr4SettingDialogParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableTopMostAttr4SettingDialogParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableTopMostAttr4SettingDialogParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_DisableWaitingForHostDialogParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_DisableWaitingForHostDialogParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::DisableWaitingForHostDialogParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::DisableWaitingForHostDialogParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableWaitingForHostDialogParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableWaitingForHostDialogParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EditMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EditMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EditMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EditMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EditMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EditMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EditMeetingWithWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EditMeetingWithWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EditMeetingWithWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EditMeetingWithWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EditMeetingWithWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EditMeetingWithWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_Enable49VideoesInGallaryViewParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_Enable49VideoesInGallaryViewParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Enable49VideoesInGallaryViewParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Enable49VideoesInGallaryViewParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAccelerateGPUWhenShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAccelerateGPUWhenShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAccelerateGPUWhenShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAccelerateGPUWhenShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAddTimestampWatermarkParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAddTimestampWatermarkParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAddTimestampWatermarkParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAddTimestampWatermarkParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAirplayInstructionWindowParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAirplayInstructionWindowParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAirplayInstructionWindowParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAirplayInstructionWindowParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAlwaysMuteMicWhenJoinVoipParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAlwaysMuteMicWhenJoinVoipParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAlwaysMuteMicWhenJoinVoipParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAlwaysMuteMicWhenJoinVoipParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAlwaysShowMeetingControlsParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAlwaysShowMeetingControlsParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAlwaysShowMeetingControlsParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAlwaysShowMeetingControlsParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAlwaysShowNameOnVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAlwaysShowNameOnVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAlwaysShowNameOnVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAlwaysShowNameOnVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAlwaysUse16v9Params_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAlwaysUse16v9Params_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAlwaysUse16v9Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAlwaysUse16v9Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAlwaysUse16v9Params_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAlwaysUse16v9Params_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableApproveRemoteControlDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableApproveRemoteControlDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableApproveRemoteControlDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableApproveRemoteControlDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAudioButtonOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAudioButtonOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAudioButtonOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAudioButtonOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoAdjustMicParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoAdjustMicParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoAdjustMicParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoAdjustMicParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoAdjustMicParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoAdjustMicParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoAdjustMicVolumeWhenJoinAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoAdjustMicVolumeWhenJoinAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoAdjustMicVolumeWhenJoinAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoAdjustMicVolumeWhenJoinAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoEndOtherMeetingWhenStartMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoEndOtherMeetingWhenStartMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoEndOtherMeetingWhenStartMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoEndOtherMeetingWhenStartMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoFitToWindowWhenViewSharingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoFitToWindowWhenViewSharingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoFitToWindowWhenViewSharingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoFitToWindowWhenViewSharingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoFullScreenVideoWhenJoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoFullScreenVideoWhenJoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoFullScreenVideoWhenJoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoFullScreenVideoWhenJoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoFullScreenVideoWhenViewShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoFullScreenVideoWhenViewShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoFullScreenVideoWhenViewShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoFullScreenVideoWhenViewShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoHideJoinAudioDialogParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoHideJoinAudioDialogParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoHideJoinAudioDialogParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoHideJoinAudioDialogParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoJoinAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoJoinAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoJoinAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoJoinAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoJoinAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoJoinAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableAutoTurnOffVideoWhenJoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableAutoTurnOffVideoWhenJoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableAutoTurnOffVideoWhenJoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableAutoTurnOffVideoWhenJoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableClaimHostFeatureParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableClaimHostFeatureParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableClaimHostFeatureParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableClaimHostFeatureParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableClaimHostFeatureParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableClaimHostFeatureParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableDeclineRemoteControlResponseDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableDeclineRemoteControlResponseDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableDeclineRemoteControlResponseDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableDeclineRemoteControlResponseDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableDisplayReminderWindowWhenExitParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableDisplayReminderWindowWhenExitParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableDisplayReminderWindowWhenExitParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableDisplayReminderWindowWhenExitParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableDualScreenModeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableDualScreenModeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableDualScreenModeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableDualScreenModeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableDualScreenModeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableDualScreenModeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableFaceBeautyEffectParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableFaceBeautyEffectParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableFaceBeautyEffectParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableFaceBeautyEffectParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableFaceBeautyEffectParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableFaceBeautyEffectParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableForceAutoStartMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableForceAutoStartMyVideoWhenJoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableForceAutoStartMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableForceAutoStartMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableForceAutoStopMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableForceAutoStopMyVideoWhenJoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableForceAutoStopMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableForceAutoStopMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableGrabShareWithoutReminderParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableGrabShareWithoutReminderParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableGrabShareWithoutReminderParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableGrabShareWithoutReminderParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableHDVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableHDVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableHDVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableHDVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableHDVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableHDVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableHIdeFullPhoneNumber4PureCallinUserParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableHIdeFullPhoneNumber4PureCallinUserParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableHIdeFullPhoneNumber4PureCallinUserParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableHIdeFullPhoneNumber4PureCallinUserParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableHardwareEncodeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableHardwareEncodeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableHardwareEncodeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableHardwareEncodeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableHardwareEncodeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableHardwareEncodeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableHideNoVideoUsersOnWallViewParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableHideNoVideoUsersOnWallViewParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableHideNoVideoUsersOnWallViewParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableHideNoVideoUsersOnWallViewParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableHoldSpaceKeyToSpeakParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableHoldSpaceKeyToSpeakParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableHoldSpaceKeyToSpeakParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableHoldSpaceKeyToSpeakParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableInputMeetingPasswordDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableInputMeetingPasswordDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableInputMeetingPasswordDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableInputMeetingPasswordDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableInputMeetingScreenNameDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableInputMeetingScreenNameDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableInputMeetingScreenNameDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableInputMeetingScreenNameDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableInviteButtonOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableInviteButtonOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableInviteButtonOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableInviteButtonOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableInviteLinkOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableInviteLinkOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableInviteLinkOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableInviteLinkOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableLButtonDBClick4SwitchFullScreenModeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableLButtonDBClick4SwitchFullScreenModeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableLButtonDBClick4SwitchFullScreenModeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableLButtonDBClick4SwitchFullScreenModeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableLeaveMeetingOptionForHostParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableLeaveMeetingOptionForHostParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableLeaveMeetingOptionForHostParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableLeaveMeetingOptionForHostParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableLengthLimitationOfMeetingNumberParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableLengthLimitationOfMeetingNumberParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableLengthLimitationOfMeetingNumberParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableLengthLimitationOfMeetingNumberParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableLocalRecordingConverProgressBarDialogParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableLocalRecordingConverProgressBarDialogParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableLocalRecordingConverProgressBarDialogParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableLocalRecordingConverProgressBarDialogParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableMicOriginalInputParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableMicOriginalInputParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableMicOriginalInputParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableMicOriginalInputParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableMicOriginalInputParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableMicOriginalInputParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableMultiAudioStreamRecordParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableMultiAudioStreamRecordParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableMultiAudioStreamRecordParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableMultiAudioStreamRecordParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableOptimizeFor3rdPartyVideoEditorParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableOptimizeFor3rdPartyVideoEditorParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableOptimizeFor3rdPartyVideoEditorParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableOptimizeFor3rdPartyVideoEditorParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnablePlaceVideoNextToShareInRecordParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnablePlaceVideoNextToShareInRecordParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnablePlaceVideoNextToShareInRecordParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnablePlaceVideoNextToShareInRecordParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnablePlayChimeWhenEnterOrExitParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnablePlayChimeWhenEnterOrExitParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnablePlayChimeWhenEnterOrExitParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnablePlayChimeWhenEnterOrExitParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableRemoteControlAllApplicationsParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableRemoteControlAllApplicationsParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableRemoteControlAllApplicationsParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableRemoteControlAllApplicationsParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableSelectRecordFileLocationAfterMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableSelectRecordFileLocationAfterMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableSelectRecordFileLocationAfterMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableSelectRecordFileLocationAfterMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableShareIOSDeviceParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableShareIOSDeviceParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableShareIOSDeviceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableShareIOSDeviceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableShareIOSDeviceParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableShareIOSDeviceParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableShareWhiteBoardParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableShareWhiteBoardParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableShareWhiteBoardParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableShareWhiteBoardParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableShareWhiteBoardParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableShareWhiteBoardParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableShowMyMeetingElapseTimeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableShowMyMeetingElapseTimeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableShowMyMeetingElapseTimeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableShowMyMeetingElapseTimeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableShowShareSwitchMultiToSingleConfirmDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableShowShareSwitchMultiToSingleConfirmDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableShowShareSwitchMultiToSingleConfirmDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableShowShareSwitchMultiToSingleConfirmDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableShowVideoThumbnailWhenShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableShowVideoThumbnailWhenShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableShowVideoThumbnailWhenShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableShowVideoThumbnailWhenShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableSplitScreenModeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableSplitScreenModeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableSplitScreenModeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableSplitScreenModeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableSplitScreenModeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableSplitScreenModeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableSpotlightSelfParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableSpotlightSelfParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableSpotlightSelfParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableSpotlightSelfParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableSpotlightSelfParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableSpotlightSelfParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableStereoAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableStereoAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableStereoAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableStereoAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableStereoAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableStereoAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableSuppressAudioNotifyParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableSuppressAudioNotifyParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableSuppressAudioNotifyParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableSuppressAudioNotifyParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableToolTipsShowParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableToolTipsShowParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableToolTipsShowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableToolTipsShowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableToolTipsShowParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableToolTipsShowParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableVideoButtonOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableVideoButtonOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableVideoButtonOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableVideoButtonOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableVideoMirrorEffectParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableVideoMirrorEffectParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableVideoMirrorEffectParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableVideoMirrorEffectParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableVideoMirrorEffectParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableVideoMirrorEffectParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableVideoPreviewDialogParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableVideoPreviewDialogParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableVideoPreviewDialogParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableVideoPreviewDialogParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableVideoPreviewDialogParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableVideoPreviewDialogParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnableZoomAuthRealNameMeetingUIShownParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnableZoomAuthRealNameMeetingUIShownParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableZoomAuthRealNameMeetingUIShownParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableZoomAuthRealNameMeetingUIShownParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_EnterFullScreenParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_EnterFullScreenParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::EnterFullScreenParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::EnterFullScreenParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterFullScreenParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterFullScreenParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ExitFullScreenParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ExitFullScreenParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ExitFullScreenParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ExitFullScreenParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitFullScreenParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitFullScreenParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ForceDisableMultiShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ForceDisableMultiShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ForceDisableMultiShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ForceDisableMultiShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForceDisableMultiShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForceDisableMultiShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_GenerateSSOLoginWebURLParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_GenerateSSOLoginWebURLParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateSSOLoginWebURLParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateSSOLoginWebURLParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_GetRawDataTypeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_GetRawDataTypeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::GetRawDataTypeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::GetRawDataTypeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawDataTypeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawDataTypeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_GetResolutionParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_GetResolutionParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::GetResolutionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::GetResolutionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResolutionParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResolutionParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_GetUserIdParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_GetUserIdParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::GetUserIdParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::GetUserIdParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserIdParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserIdParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_GetUserInfoByUserIDParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_GetUserInfoByUserIDParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::GetUserInfoByUserIDParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::GetUserInfoByUserIDParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserInfoByUserIDParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserInfoByUserIDParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HandleZoomWebUriProtocolActionParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HandleZoomWebUriProtocolActionParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandleZoomWebUriProtocolActionParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandleZoomWebUriProtocolActionParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideAutoCopyInviteLinkCheckBoxParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideAutoCopyInviteLinkCheckBoxParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideAutoCopyInviteLinkCheckBoxParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideAutoCopyInviteLinkCheckBoxParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideChatItemOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideChatItemOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideChatItemOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideChatItemOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideCopyInvitationOnInviteWindowParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideCopyInvitationOnInviteWindowParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideCopyInvitationOnInviteWindowParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideCopyInvitationOnInviteWindowParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideCopyUrlOnInviteWindowParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideCopyUrlOnInviteWindowParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideCopyUrlOnInviteWindowParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideCopyUrlOnInviteWindowParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideKeypadButtonOnMeetingWindowParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideKeypadButtonOnMeetingWindowParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideKeypadButtonOnMeetingWindowParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideKeypadButtonOnMeetingWindowParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideOrShowNoVideoUserOnVideoWallParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideOrShowNoVideoUserOnVideoWallParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideOrShowNoVideoUserOnVideoWallParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideOrShowNoVideoUserOnVideoWallParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HidePollOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HidePollOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HidePollOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HidePollOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HidePollOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HidePollOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideQAOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideQAOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideQAOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideQAOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideQAOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideQAOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideRecordItemOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideRecordItemOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideRecordItemOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideRecordItemOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideRemoteControlOnMeetingUIParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideRemoteControlOnMeetingUIParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideRemoteControlOnMeetingUIParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideRemoteControlOnMeetingUIParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideSwitchCameraButtonParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideSwitchCameraButtonParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideSwitchCameraButtonParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideSwitchCameraButtonParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideSwitchCameraButtonParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideSwitchCameraButtonParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_HideUpgradeFreeMeetingButtonParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_HideUpgradeFreeMeetingButtonParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HideUpgradeFreeMeetingButtonParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HideUpgradeFreeMeetingButtonParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_InitSDKParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_InitSDKParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::InitSDKParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::InitSDKParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitSDKParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitSDKParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_InputMeetingIDAndScreenNameParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_InputMeetingIDAndScreenNameParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputMeetingIDAndScreenNameParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputMeetingIDAndScreenNameParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_InputMeetingPasswordAndScreenNameParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_InputMeetingPasswordAndScreenNameParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputMeetingPasswordAndScreenNameParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputMeetingPasswordAndScreenNameParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_InputMeetingScreenNameParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_InputMeetingScreenNameParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::InputMeetingScreenNameParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::InputMeetingScreenNameParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputMeetingScreenNameParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputMeetingScreenNameParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_InputWebinarRegisterEmailAndScreenNameParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_InputWebinarRegisterEmailAndScreenNameParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputWebinarRegisterEmailAndScreenNameParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputWebinarRegisterEmailAndScreenNameParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_IsHardwareEncodeEnabledParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_IsHardwareEncodeEnabledParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsHardwareEncodeEnabledParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsHardwareEncodeEnabledParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_IsSupportLocalRecordingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_IsSupportLocalRecordingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::IsSupportLocalRecordingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::IsSupportLocalRecordingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsSupportLocalRecordingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsSupportLocalRecordingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_JoinMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_JoinMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::JoinMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::JoinMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_JoinWithoutLoginParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_JoinWithoutLoginParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::JoinWithoutLoginParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::JoinWithoutLoginParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinWithoutLoginParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinWithoutLoginParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_LeaveMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_LeaveMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::LeaveMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::LeaveMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_LoginParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_LoginParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::LoginParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::LoginParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_LoginWithSSOTokenParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_LoginWithSSOTokenParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::LoginWithSSOTokenParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::LoginWithSSOTokenParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginWithSSOTokenParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginWithSSOTokenParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_MoveFloatVideoWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_MoveFloatVideoWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::MoveFloatVideoWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::MoveFloatVideoWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveFloatVideoWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveFloatVideoWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_MuteAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_MuteAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::MuteAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::MuteAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_MuteVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_MuteVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::MuteVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::MuteVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MuteVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_PinVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_PinVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::PinVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::PinVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PinVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_PrePopulateWebinarRegistrationInfoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_PrePopulateWebinarRegistrationInfoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrePopulateWebinarRegistrationInfoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrePopulateWebinarRegistrationInfoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickAudioBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickAudioBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickAudioBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickAudioBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickAudioMenuBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickAudioMenuBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickAudioMenuBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickAudioMenuBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickCCBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickCCBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickCCBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickCCBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickCCBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickCCBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickCustomLiveStreamMenuEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickCustomLiveStreamMenuEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickCustomLiveStreamMenuEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickCustomLiveStreamMenuEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickEndMeetingBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickEndMeetingBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickEndMeetingBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickEndMeetingBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickParticipantListBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickParticipantListBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickParticipantListBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickParticipantListBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectClickShareBTNEventParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectClickShareBTNEventParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectClickShareBTNEventParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectClickShareBTNEventParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectClickShareBTNEventParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectClickShareBTNEventParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectEndOtherMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectEndOtherMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectEndOtherMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectEndOtherMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectEndOtherMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectEndOtherMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectFreeMeetingEndingReminderDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectFreeMeetingEndingReminderDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectFreeMeetingEndingReminderDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectFreeMeetingEndingReminderDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectMeetingWarningMsgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectMeetingWarningMsgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectMeetingWarningMsgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectMeetingWarningMsgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedirectWebinarNeedRegisterParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedirectWebinarNeedRegisterParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectWebinarNeedRegisterParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectWebinarNeedRegisterParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RedoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RedoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RedoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RedoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_RetrieveParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_RetrieveParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::RetrieveParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::RetrieveParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetrieveParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RetrieveParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SSOLoginWithWebUriProtocolParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SSOLoginWithWebUriProtocolParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSOLoginWithWebUriProtocolParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSOLoginWithWebUriProtocolParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ScheduleMeetingWithWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ScheduleMeetingWithWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ScheduleMeetingWithWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ScheduleMeetingWithWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScheduleMeetingWithWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScheduleMeetingWithWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SelectMicParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SelectMicParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SelectMicParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SelectMicParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectMicParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectMicParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SelectSpeakerParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SelectSpeakerParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SelectSpeakerParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SelectSpeakerParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectSpeakerParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectSpeakerParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SelectVideoCameraParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SelectVideoCameraParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SelectVideoCameraParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SelectVideoCameraParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectVideoCameraParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectVideoCameraParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetBottomFloatToolBarWndVisibilityParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetBottomFloatToolBarWndVisibilityParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetBottomFloatToolBarWndVisibilityParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetBottomFloatToolBarWndVisibilityParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetColorParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetColorParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetColorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetColorParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetColorParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetColorParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetDefaultCellPhoneInfoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetDefaultCellPhoneInfoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDefaultCellPhoneInfoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetDefaultCellPhoneInfoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetDirectShareMonitorIDParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetDirectShareMonitorIDParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetDirectShareMonitorIDParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetDirectShareMonitorIDParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDirectShareMonitorIDParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetDirectShareMonitorIDParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetEchoCancellationLevelParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetEchoCancellationLevelParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetEchoCancellationLevelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetEchoCancellationLevelParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEchoCancellationLevelParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetEchoCancellationLevelParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetFloatVideoPosParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetFloatVideoPosParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetFloatVideoPosParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetFloatVideoPosParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetFloatVideoPosParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetFloatVideoPosParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetFloatVideoWndVisibilityParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetFloatVideoWndVisibilityParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetFloatVideoWndVisibilityParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetFloatVideoWndVisibilityParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetLineWidthParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetLineWidthParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetLineWidthParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetLineWidthParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLineWidthParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetLineWidthParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetMaxDurationForOnlyHostInMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetMaxDurationForOnlyHostInMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMaxDurationForOnlyHostInMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMaxDurationForOnlyHostInMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetMeetingUIPosParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetMeetingUIPosParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetMeetingUIPosParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetMeetingUIPosParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMeetingUIPosParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMeetingUIPosParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetMicVolParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetMicVolParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetMicVolParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetMicVolParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMicVolParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMicVolParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetRawDataResolutionParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetRawDataResolutionParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetRawDataResolutionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetRawDataResolutionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRawDataResolutionParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRawDataResolutionParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetRecordingPathParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetRecordingPathParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetRecordingPathParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetRecordingPathParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRecordingPathParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRecordingPathParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetSharingToolBarVisibilityParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetSharingToolBarVisibilityParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSharingToolBarVisibilityParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetSharingToolBarVisibilityParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowAudioUseComputerSoundChkboxParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowAudioUseComputerSoundChkboxParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowAudioUseComputerSoundChkboxParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowAudioUseComputerSoundChkboxParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowCallInTabParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowCallInTabParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowCallInTabParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowCallInTabParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowCallInTabParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowCallInTabParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowCallMeTabParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowCallMeTabParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowCallMeTabParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowCallMeTabParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowCallMeTabParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowCallMeTabParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowH323SubTabPageParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowH323SubTabPageParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowH323SubTabPageParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowH323SubTabPageParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowH323SubTabPageParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowH323SubTabPageParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowInviteDlgTabPageParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowInviteDlgTabPageParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowInviteDlgTabPageParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowInviteDlgTabPageParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetShowVideoOptimizeChkboxParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetShowVideoOptimizeChkboxParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetShowVideoOptimizeChkboxParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetShowVideoOptimizeChkboxParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetSpeakerVolParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetSpeakerVolParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetSpeakerVolParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetSpeakerVolParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSpeakerVolParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetSpeakerVolParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SetToolParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SetToolParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SetToolParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SetToolParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetToolParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetToolParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowAANPanelParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowAANPanelParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowAANPanelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowAANPanelParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowAANPanelParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowAANPanelParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowBottomFloatToolbarWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowBottomFloatToolbarWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowBottomFloatToolbarWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowBottomFloatToolbarWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowChatDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowChatDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowChatDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowChatDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowChatDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowChatDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowParticipantsListWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowParticipantsListWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowParticipantsListWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowParticipantsListWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowParticipantsListWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowParticipantsListWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowPreOrNextPageVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowPreOrNextPageVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowPreOrNextPageVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowPreOrNextPageVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowSettingDlgParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowSettingDlgParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowSettingDlgParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowSettingDlgParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowSettingDlgParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowSettingDlgParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowSharingFrameWindowsParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowSharingFrameWindowsParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowSharingFrameWindowsParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowSharingFrameWindowsParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowSharingFrameWindowsParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowSharingFrameWindowsParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_ShowSharingToolbarParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_ShowSharingToolbarParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::ShowSharingToolbarParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::ShowSharingToolbarParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowSharingToolbarParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowSharingToolbarParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SpotlightVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SpotlightVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SpotlightVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SpotlightVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpotlightVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpotlightVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StartAnnotationParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StartAnnotationParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StartAnnotationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StartAnnotationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartAnnotationParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartAnnotationParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StartAppShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StartAppShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StartAppShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StartAppShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartAppShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartAppShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StartMeetingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StartMeetingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StartMeetingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StartMeetingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartMeetingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartMeetingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StartMonitorShareParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StartMonitorShareParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StartMonitorShareParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StartMonitorShareParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartMonitorShareParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartMonitorShareParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StartWithoutLoginParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StartWithoutLoginParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StartWithoutLoginParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StartWithoutLoginParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartWithoutLoginParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartWithoutLoginParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_StopAnnotationParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_StopAnnotationParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::StopAnnotationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::StopAnnotationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopAnnotationParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopAnnotationParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SubscribeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SubscribeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SubscribeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SwapToShowShareViewOrVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SwapToShowShareViewOrVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapToShowShareViewOrVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapToShowShareViewOrVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_SwitchSplitScreenModeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_SwitchSplitScreenModeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::SwitchSplitScreenModeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::SwitchSplitScreenModeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchSplitScreenModeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwitchSplitScreenModeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_TryWithMeetingNumberParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_TryWithMeetingNumberParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::TryWithMeetingNumberParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::TryWithMeetingNumberParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryWithMeetingNumberParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryWithMeetingNumberParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_TryWithPairingCodeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_TryWithPairingCodeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::TryWithPairingCodeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::TryWithPairingCodeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryWithPairingCodeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TryWithPairingCodeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_TurnOffAeroModeInSharingParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_TurnOffAeroModeInSharingParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TurnOffAeroModeInSharingParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TurnOffAeroModeInSharingParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_UnMuteVideoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_UnMuteVideoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::UnMuteVideoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::UnMuteVideoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnMuteVideoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnMuteVideoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_UnSubscribeParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_UnSubscribeParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::UnSubscribeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::UnSubscribeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnSubscribeParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnSubscribeParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_UndoParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_UndoParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::UndoParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::UndoParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndoParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndoParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_UnmuteAudioParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_UnmuteAudioParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::UnmuteAudioParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::UnmuteAudioParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnmuteAudioParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnmuteAudioParams_electron_5fsdk_2eproto}, {}};

static void InitDefaultsscc_info_VerifyParams_electron_5fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::electron::sdk::proto::_VerifyParams_default_instance_;
    new (ptr) ::com::electron::sdk::proto::VerifyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::electron::sdk::proto::VerifyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyParams_electron_5fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyParams_electron_5fsdk_2eproto}, {}};

namespace com {
namespace electron {
namespace sdk {
namespace proto {

// ===================================================================

void InitSDKParams::InitAsDefaultInstance() {
}
class InitSDKParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InitSDKParams>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_customizedlanguagename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_customizedlanguageinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customizedlanguagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strsupporturl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_langid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enablelog(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_applocale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_logfilesize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enablegeneraldump(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_permonitorawarenessmode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_videorendermode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_videorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sharerawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_audiorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enablerawdataintermediatemode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_renderpostprocessing(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_videocapturemethod(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_teamidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_customlocalizationfilepath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usecustomui(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

InitSDKParams::InitSDKParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InitSDKParams)
}
InitSDKParams::InitSDKParams(const InitSDKParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_domain()) {
    domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domain(),
      GetArena());
  }
  customizedlanguagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customizedlanguagename()) {
    customizedlanguagename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customizedlanguagename(),
      GetArena());
  }
  customizedlanguageinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customizedlanguageinfo()) {
    customizedlanguageinfo_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customizedlanguageinfo(),
      GetArena());
  }
  strsupporturl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strsupporturl()) {
    strsupporturl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strsupporturl(),
      GetArena());
  }
  teamidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamidentifier()) {
    teamidentifier_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_teamidentifier(),
      GetArena());
  }
  customlocalizationfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customlocalizationfilepath()) {
    customlocalizationfilepath_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customlocalizationfilepath(),
      GetArena());
  }
  ::memcpy(&customizedlanguagetype_, &from.customizedlanguagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecustomui_) -
    reinterpret_cast<char*>(&customizedlanguagetype_)) + sizeof(usecustomui_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InitSDKParams)
}

void InitSDKParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitSDKParams_electron_5fsdk_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedlanguagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedlanguageinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strsupporturl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customlocalizationfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&customizedlanguagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecustomui_) -
      reinterpret_cast<char*>(&customizedlanguagetype_)) + sizeof(usecustomui_));
}

InitSDKParams::~InitSDKParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InitSDKParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InitSDKParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedlanguagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedlanguageinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strsupporturl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customlocalizationfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitSDKParams::ArenaDtor(void* object) {
  InitSDKParams* _this = reinterpret_cast< InitSDKParams* >(object);
  (void)_this;
}
void InitSDKParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSDKParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitSDKParams& InitSDKParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitSDKParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void InitSDKParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InitSDKParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      customizedlanguagename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      customizedlanguageinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      strsupporturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      teamidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      customlocalizationfilepath_.ClearNonDefaultToEmpty();
    }
  }
  customizedlanguagetype_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&langid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&videorendermode_) -
        reinterpret_cast<char*>(&langid_)) + sizeof(videorendermode_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&videorawdatamemorymode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usecustomui_) -
        reinterpret_cast<char*>(&videorawdatamemorymode_)) + sizeof(usecustomui_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InitSDKParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customizedLanguageName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_customizedlanguagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customizedLanguageInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_customizedlanguageinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 customizedLanguageType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_customizedlanguagetype(&has_bits);
          customizedlanguagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strSupportUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strsupporturl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 langID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_langid(&has_bits);
          langid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableLog = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enablelog(&has_bits);
          enablelog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 appLocale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_applocale(&has_bits);
          applocale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 logFileSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_logfilesize(&has_bits);
          logfilesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableGeneralDump = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_enablegeneraldump(&has_bits);
          enablegeneraldump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool permonitorAwarenessMode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_permonitorawarenessmode(&has_bits);
          permonitorawarenessmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 videoRenderMode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_videorendermode(&has_bits);
          videorendermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 videoRawdataMemoryMode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_videorawdatamemorymode(&has_bits);
          videorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shareRawdataMemoryMode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_sharerawdatamemorymode(&has_bits);
          sharerawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audioRawdataMemoryMode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_audiorawdatamemorymode(&has_bits);
          audiorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableRawdataIntermediateMode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_enablerawdataintermediatemode(&has_bits);
          enablerawdataintermediatemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 renderPostProcessing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_renderpostprocessing(&has_bits);
          renderpostprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 videoCaptureMethod = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_videocapturemethod(&has_bits);
          videocapturemethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamIdentifier = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_teamidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customLocalizationFilePath = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_customlocalizationfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool useCustomUI = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_usecustomui(&has_bits);
          usecustomui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitSDKParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InitSDKParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain(), target);
  }

  // optional string customizedLanguageName = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_customizedlanguagename(), target);
  }

  // optional string customizedLanguageInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_customizedlanguageinfo(), target);
  }

  // optional int32 customizedLanguageType = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_customizedlanguagetype(), target);
  }

  // optional string strSupportUrl = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_strsupporturl(), target);
  }

  // optional int32 langID = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_langid(), target);
  }

  // optional bool enableLog = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enablelog(), target);
  }

  // optional int32 appLocale = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_applocale(), target);
  }

  // optional int32 logFileSize = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_logfilesize(), target);
  }

  // optional bool enableGeneralDump = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enablegeneraldump(), target);
  }

  // optional bool permonitorAwarenessMode = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_permonitorawarenessmode(), target);
  }

  // optional int32 videoRenderMode = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_videorendermode(), target);
  }

  // optional int32 videoRawdataMemoryMode = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_videorawdatamemorymode(), target);
  }

  // optional int32 shareRawdataMemoryMode = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_sharerawdatamemorymode(), target);
  }

  // optional int32 audioRawdataMemoryMode = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_audiorawdatamemorymode(), target);
  }

  // optional bool enableRawdataIntermediateMode = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_enablerawdataintermediatemode(), target);
  }

  // optional int32 renderPostProcessing = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_renderpostprocessing(), target);
  }

  // optional int32 videoCaptureMethod = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_videocapturemethod(), target);
  }

  // optional string teamIdentifier = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_teamidentifier(), target);
  }

  // optional string customLocalizationFilePath = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_customlocalizationfilepath(), target);
  }

  // optional bool useCustomUI = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_usecustomui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InitSDKParams)
  return target;
}

size_t InitSDKParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InitSDKParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string domain = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string customizedLanguageName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customizedlanguagename());
    }

    // optional string customizedLanguageInfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customizedlanguageinfo());
    }

    // optional string strSupportUrl = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strsupporturl());
    }

    // optional string teamIdentifier = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamidentifier());
    }

    // optional string customLocalizationFilePath = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customlocalizationfilepath());
    }

    // optional int32 customizedLanguageType = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_customizedlanguagetype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 langID = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_langid());
    }

    // optional int32 appLocale = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_applocale());
    }

    // optional int32 logFileSize = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_logfilesize());
    }

    // optional bool enableLog = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool enableGeneralDump = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool permonitorAwarenessMode = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool enableRawdataIntermediateMode = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 videoRenderMode = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_videorendermode());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int32 videoRawdataMemoryMode = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_videorawdatamemorymode());
    }

    // optional int32 shareRawdataMemoryMode = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sharerawdatamemorymode());
    }

    // optional int32 audioRawdataMemoryMode = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audiorawdatamemorymode());
    }

    // optional int32 renderPostProcessing = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_renderpostprocessing());
    }

    // optional int32 videoCaptureMethod = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_videocapturemethod());
    }

    // optional bool useCustomUI = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitSDKParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InitSDKParams*>(
      &from));
}

void InitSDKParams::MergeFrom(const InitSDKParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InitSDKParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_customizedlanguagename(from._internal_customizedlanguagename());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_customizedlanguageinfo(from._internal_customizedlanguageinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_strsupporturl(from._internal_strsupporturl());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_teamidentifier(from._internal_teamidentifier());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_customlocalizationfilepath(from._internal_customlocalizationfilepath());
    }
    if (cached_has_bits & 0x00000080u) {
      customizedlanguagetype_ = from.customizedlanguagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      langid_ = from.langid_;
    }
    if (cached_has_bits & 0x00000200u) {
      applocale_ = from.applocale_;
    }
    if (cached_has_bits & 0x00000400u) {
      logfilesize_ = from.logfilesize_;
    }
    if (cached_has_bits & 0x00000800u) {
      enablelog_ = from.enablelog_;
    }
    if (cached_has_bits & 0x00001000u) {
      enablegeneraldump_ = from.enablegeneraldump_;
    }
    if (cached_has_bits & 0x00002000u) {
      permonitorawarenessmode_ = from.permonitorawarenessmode_;
    }
    if (cached_has_bits & 0x00004000u) {
      enablerawdataintermediatemode_ = from.enablerawdataintermediatemode_;
    }
    if (cached_has_bits & 0x00008000u) {
      videorendermode_ = from.videorendermode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      videorawdatamemorymode_ = from.videorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00020000u) {
      sharerawdatamemorymode_ = from.sharerawdatamemorymode_;
    }
    if (cached_has_bits & 0x00040000u) {
      audiorawdatamemorymode_ = from.audiorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00080000u) {
      renderpostprocessing_ = from.renderpostprocessing_;
    }
    if (cached_has_bits & 0x00100000u) {
      videocapturemethod_ = from.videocapturemethod_;
    }
    if (cached_has_bits & 0x00200000u) {
      usecustomui_ = from.usecustomui_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitSDKParams::CopyFrom(const InitSDKParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InitSDKParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSDKParams::IsInitialized() const {
  return true;
}

void InitSDKParams::InternalSwap(InitSDKParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customizedlanguagename_.Swap(&other->customizedlanguagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customizedlanguageinfo_.Swap(&other->customizedlanguageinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strsupporturl_.Swap(&other->strsupporturl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teamidentifier_.Swap(&other->teamidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customlocalizationfilepath_.Swap(&other->customlocalizationfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSDKParams, usecustomui_)
      + sizeof(InitSDKParams::usecustomui_)
      - PROTOBUF_FIELD_OFFSET(InitSDKParams, customizedlanguagetype_)>(
          reinterpret_cast<char*>(&customizedlanguagetype_),
          reinterpret_cast<char*>(&other->customizedlanguagetype_));
}

std::string InitSDKParams::GetTypeName() const {
  return "com.electron.sdk.proto.InitSDKParams";
}


// ===================================================================

void AuthParams::InitAsDefaultInstance() {
}
class AuthParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthParams>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AuthParams::AuthParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AuthParams)
}
AuthParams::AuthParams(const AuthParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret()) {
    secret_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AuthParams)
}

void AuthParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthParams_electron_5fsdk_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthParams::~AuthParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AuthParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthParams::ArenaDtor(void* object) {
  AuthParams* _this = reinterpret_cast< AuthParams* >(object);
  (void)_this;
}
void AuthParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthParams& AuthParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AuthParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AuthParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      secret_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AuthParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string secret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AuthParams)
  return target;
}

size_t AuthParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AuthParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string secret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthParams*>(
      &from));
}

void AuthParams::MergeFrom(const AuthParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AuthParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_secret(from._internal_secret());
    }
  }
}

void AuthParams::CopyFrom(const AuthParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AuthParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthParams::IsInitialized() const {
  return true;
}

void AuthParams::InternalSwap(AuthParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AuthParams::GetTypeName() const {
  return "com.electron.sdk.proto.AuthParams";
}


// ===================================================================

void AuthWithJwtTokenParams::InitAsDefaultInstance() {
}
class AuthWithJwtTokenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthWithJwtTokenParams>()._has_bits_);
  static void set_has_sdkjwttoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthWithJwtTokenParams::AuthWithJwtTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
}
AuthWithJwtTokenParams::AuthWithJwtTokenParams(const AuthWithJwtTokenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sdkjwttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdkjwttoken()) {
    sdkjwttoken_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdkjwttoken(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
}

void AuthWithJwtTokenParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthWithJwtTokenParams_electron_5fsdk_2eproto.base);
  sdkjwttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthWithJwtTokenParams::~AuthWithJwtTokenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AuthWithJwtTokenParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AuthWithJwtTokenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sdkjwttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthWithJwtTokenParams::ArenaDtor(void* object) {
  AuthWithJwtTokenParams* _this = reinterpret_cast< AuthWithJwtTokenParams* >(object);
  (void)_this;
}
void AuthWithJwtTokenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthWithJwtTokenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthWithJwtTokenParams& AuthWithJwtTokenParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthWithJwtTokenParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AuthWithJwtTokenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sdkjwttoken_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AuthWithJwtTokenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sdkJwtToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sdkjwttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthWithJwtTokenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sdkJwtToken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdkjwttoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AuthWithJwtTokenParams)
  return target;
}

size_t AuthWithJwtTokenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sdkJwtToken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkjwttoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthWithJwtTokenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AuthWithJwtTokenParams*>(
      &from));
}

void AuthWithJwtTokenParams::MergeFrom(const AuthWithJwtTokenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sdkjwttoken()) {
    _internal_set_sdkjwttoken(from._internal_sdkjwttoken());
  }
}

void AuthWithJwtTokenParams::CopyFrom(const AuthWithJwtTokenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AuthWithJwtTokenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthWithJwtTokenParams::IsInitialized() const {
  return true;
}

void AuthWithJwtTokenParams::InternalSwap(AuthWithJwtTokenParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sdkjwttoken_.Swap(&other->sdkjwttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AuthWithJwtTokenParams::GetTypeName() const {
  return "com.electron.sdk.proto.AuthWithJwtTokenParams";
}


// ===================================================================

void LoginParams::InitAsDefaultInstance() {
}
class LoginParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginParams>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rememberme(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LoginParams::LoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.LoginParams)
}
LoginParams::LoginParams(const LoginParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_psw()) {
    psw_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_psw(),
      GetArena());
  }
  rememberme_ = from.rememberme_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.LoginParams)
}

void LoginParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginParams_electron_5fsdk_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rememberme_ = false;
}

LoginParams::~LoginParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.LoginParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginParams::ArenaDtor(void* object) {
  LoginParams* _this = reinterpret_cast< LoginParams* >(object);
  (void)_this;
}
void LoginParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginParams& LoginParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void LoginParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.LoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      psw_.ClearNonDefaultToEmpty();
    }
  }
  rememberme_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string psw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rememberMe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rememberme(&has_bits);
          rememberme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.LoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string psw = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_psw(), target);
  }

  // optional bool rememberMe = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_rememberme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.LoginParams)
  return target;
}

size_t LoginParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.LoginParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string userName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string psw = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_psw());
    }

    // optional bool rememberMe = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginParams*>(
      &from));
}

void LoginParams::MergeFrom(const LoginParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.LoginParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000004u) {
      rememberme_ = from.rememberme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginParams::CopyFrom(const LoginParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.LoginParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginParams::IsInitialized() const {
  return true;
}

void LoginParams::InternalSwap(LoginParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rememberme_, other->rememberme_);
}

std::string LoginParams::GetTypeName() const {
  return "com.electron.sdk.proto.LoginParams";
}


// ===================================================================

void LoginWithSSOTokenParams::InitAsDefaultInstance() {
}
class LoginWithSSOTokenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginWithSSOTokenParams>()._has_bits_);
  static void set_has_ssotoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rememberme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginWithSSOTokenParams::LoginWithSSOTokenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
}
LoginWithSSOTokenParams::LoginWithSSOTokenParams(const LoginWithSSOTokenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ssotoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ssotoken()) {
    ssotoken_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssotoken(),
      GetArena());
  }
  rememberme_ = from.rememberme_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
}

void LoginWithSSOTokenParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginWithSSOTokenParams_electron_5fsdk_2eproto.base);
  ssotoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rememberme_ = false;
}

LoginWithSSOTokenParams::~LoginWithSSOTokenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.LoginWithSSOTokenParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginWithSSOTokenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssotoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginWithSSOTokenParams::ArenaDtor(void* object) {
  LoginWithSSOTokenParams* _this = reinterpret_cast< LoginWithSSOTokenParams* >(object);
  (void)_this;
}
void LoginWithSSOTokenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginWithSSOTokenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginWithSSOTokenParams& LoginWithSSOTokenParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginWithSSOTokenParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void LoginWithSSOTokenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ssotoken_.ClearNonDefaultToEmpty();
  }
  rememberme_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginWithSSOTokenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ssoToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssotoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rememberMe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rememberme(&has_bits);
          rememberme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginWithSSOTokenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ssoToken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssotoken(), target);
  }

  // optional bool rememberMe = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_rememberme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.LoginWithSSOTokenParams)
  return target;
}

size_t LoginWithSSOTokenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ssoToken = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ssotoken());
    }

    // optional bool rememberMe = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginWithSSOTokenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginWithSSOTokenParams*>(
      &from));
}

void LoginWithSSOTokenParams::MergeFrom(const LoginWithSSOTokenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ssotoken(from._internal_ssotoken());
    }
    if (cached_has_bits & 0x00000002u) {
      rememberme_ = from.rememberme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginWithSSOTokenParams::CopyFrom(const LoginWithSSOTokenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.LoginWithSSOTokenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginWithSSOTokenParams::IsInitialized() const {
  return true;
}

void LoginWithSSOTokenParams::InternalSwap(LoginWithSSOTokenParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ssotoken_.Swap(&other->ssotoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rememberme_, other->rememberme_);
}

std::string LoginWithSSOTokenParams::GetTypeName() const {
  return "com.electron.sdk.proto.LoginWithSSOTokenParams";
}


// ===================================================================

void StartMeetingParams::InitAsDefaultInstance() {
}
class StartMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartMeetingParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

StartMeetingParams::StartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartMeetingParams)
}
StartMeetingParams::StartMeetingParams(const StartMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hdirectshareappwnd()) {
    hdirectshareappwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hdirectshareappwnd(),
      GetArena());
  }
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customerkey()) {
    customerkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customerkey(),
      GetArena());
  }
  ::memcpy(&meetingnumber_, &from.meetingnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdirectsharedesktop_) -
    reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isdirectsharedesktop_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartMeetingParams)
}

void StartMeetingParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartMeetingParams_electron_5fsdk_2eproto.base);
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meetingnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdirectsharedesktop_) -
      reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isdirectsharedesktop_));
}

StartMeetingParams::~StartMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hdirectshareappwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartMeetingParams::ArenaDtor(void* object) {
  StartMeetingParams* _this = reinterpret_cast< StartMeetingParams* >(object);
  (void)_this;
}
void StartMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartMeetingParams& StartMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StartMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      customerkey_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&meetingnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isdirectsharedesktop_) -
        reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isdirectsharedesktop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hDirectShareAppWnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customerKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isVideoOff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isvideooff(&has_bits);
          isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAudioOff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isaudiooff(&has_bits);
          isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDirectShareDesktop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  // optional string hDirectShareAppWnd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hdirectshareappwnd(), target);
  }

  // optional string customerKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_customerkey(), target);
  }

  // optional bool isVideoOff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isaudiooff(), target);
  }

  // optional bool isDirectShareDesktop = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isdirectsharedesktop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartMeetingParams)
  return target;
}

size_t StartMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hDirectShareAppWnd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customerkey());
    }

    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_meetingnumber());
    }

    // optional bool isVideoOff = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool isAudioOff = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool isDirectShareDesktop = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartMeetingParams*>(
      &from));
}

void StartMeetingParams::MergeFrom(const StartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000004u) {
      meetingnumber_ = from.meetingnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      isvideooff_ = from.isvideooff_;
    }
    if (cached_has_bits & 0x00000010u) {
      isaudiooff_ = from.isaudiooff_;
    }
    if (cached_has_bits & 0x00000020u) {
      isdirectsharedesktop_ = from.isdirectsharedesktop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartMeetingParams::CopyFrom(const StartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMeetingParams::IsInitialized() const {
  return true;
}

void StartMeetingParams::InternalSwap(StartMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hdirectshareappwnd_.Swap(&other->hdirectshareappwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customerkey_.Swap(&other->customerkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartMeetingParams, isdirectsharedesktop_)
      + sizeof(StartMeetingParams::isdirectsharedesktop_)
      - PROTOBUF_FIELD_OFFSET(StartMeetingParams, meetingnumber_)>(
          reinterpret_cast<char*>(&meetingnumber_),
          reinterpret_cast<char*>(&other->meetingnumber_));
}

std::string StartMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartMeetingParams";
}


// ===================================================================

void StartWithoutLoginParams::InitAsDefaultInstance() {
}
class StartWithoutLoginParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartWithoutLoginParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userzak(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nodeusertype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sdkvanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

StartWithoutLoginParams::StartWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartWithoutLoginParams)
}
StartWithoutLoginParams::StartWithoutLoginParams(const StartWithoutLoginParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userid()) {
    userid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  userzak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userzak()) {
    userzak_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userzak(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  sdkvanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdkvanityid()) {
    sdkvanityid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdkvanityid(),
      GetArena());
  }
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hdirectshareappwnd()) {
    hdirectshareappwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hdirectshareappwnd(),
      GetArena());
  }
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customerkey()) {
    customerkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customerkey(),
      GetArena());
  }
  ::memcpy(&meetingnumber_, &from.meetingnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&isaudiooff_) -
    reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isaudiooff_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartWithoutLoginParams)
}

void StartWithoutLoginParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartWithoutLoginParams_electron_5fsdk_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userzak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdkvanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meetingnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isaudiooff_) -
      reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isaudiooff_));
}

StartWithoutLoginParams::~StartWithoutLoginParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartWithoutLoginParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartWithoutLoginParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userzak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdkvanityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartWithoutLoginParams::ArenaDtor(void* object) {
  StartWithoutLoginParams* _this = reinterpret_cast< StartWithoutLoginParams* >(object);
  (void)_this;
}
void StartWithoutLoginParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartWithoutLoginParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartWithoutLoginParams& StartWithoutLoginParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartWithoutLoginParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StartWithoutLoginParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      userzak_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sdkvanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      customerkey_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&meetingnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nodeusertype_) -
        reinterpret_cast<char*>(&meetingnumber_)) + sizeof(nodeusertype_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&isdirectsharedesktop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isaudiooff_) -
        reinterpret_cast<char*>(&isdirectsharedesktop_)) + sizeof(isaudiooff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartWithoutLoginParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userZAK = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userzak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nodeUserType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nodeusertype(&has_bits);
          nodeusertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 meetingNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdkVanityID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sdkvanityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hDirectShareAppWnd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customerKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDirectShareDesktop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isVideoOff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isvideooff(&has_bits);
          isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAudioOff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_isaudiooff(&has_bits);
          isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartWithoutLoginParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartWithoutLoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // optional string userZAK = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userzak(), target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // optional int32 nodeUserType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nodeusertype(), target);
  }

  // optional uint64 meetingNumber = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_meetingnumber(), target);
  }

  // optional string sdkVanityID = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sdkvanityid(), target);
  }

  // optional string hDirectShareAppWnd = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hdirectshareappwnd(), target);
  }

  // optional string customerKey = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_customerkey(), target);
  }

  // optional bool isDirectShareDesktop = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isdirectsharedesktop(), target);
  }

  // optional bool isVideoOff = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_isaudiooff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartWithoutLoginParams)
  return target;
}

size_t StartWithoutLoginParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartWithoutLoginParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
    }

    // optional string userZAK = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userzak());
    }

    // optional string userName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string sdkVanityID = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdkvanityid());
    }

    // optional string hDirectShareAppWnd = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customerkey());
    }

    // optional uint64 meetingNumber = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_meetingnumber());
    }

    // optional int32 nodeUserType = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nodeusertype());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool isDirectShareDesktop = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool isVideoOff = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool isAudioOff = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartWithoutLoginParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartWithoutLoginParams*>(
      &from));
}

void StartWithoutLoginParams::MergeFrom(const StartWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartWithoutLoginParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_userid(from._internal_userid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_userzak(from._internal_userzak());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sdkvanityid(from._internal_sdkvanityid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000040u) {
      meetingnumber_ = from.meetingnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      nodeusertype_ = from.nodeusertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      isdirectsharedesktop_ = from.isdirectsharedesktop_;
    }
    if (cached_has_bits & 0x00000200u) {
      isvideooff_ = from.isvideooff_;
    }
    if (cached_has_bits & 0x00000400u) {
      isaudiooff_ = from.isaudiooff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartWithoutLoginParams::CopyFrom(const StartWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartWithoutLoginParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartWithoutLoginParams::IsInitialized() const {
  return true;
}

void StartWithoutLoginParams::InternalSwap(StartWithoutLoginParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userzak_.Swap(&other->userzak_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdkvanityid_.Swap(&other->sdkvanityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hdirectshareappwnd_.Swap(&other->hdirectshareappwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customerkey_.Swap(&other->customerkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartWithoutLoginParams, isaudiooff_)
      + sizeof(StartWithoutLoginParams::isaudiooff_)
      - PROTOBUF_FIELD_OFFSET(StartWithoutLoginParams, meetingnumber_)>(
          reinterpret_cast<char*>(&meetingnumber_),
          reinterpret_cast<char*>(&other->meetingnumber_));
}

std::string StartWithoutLoginParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartWithoutLoginParams";
}


// ===================================================================

void JoinMeetingParams::InitAsDefaultInstance() {
}
class JoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinMeetingParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_webinartoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

JoinMeetingParams::JoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.JoinMeetingParams)
}
JoinMeetingParams::JoinMeetingParams(const JoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vanityid()) {
    vanityid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vanityid(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_psw()) {
    psw_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_psw(),
      GetArena());
  }
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hdirectshareappwnd()) {
    hdirectshareappwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hdirectshareappwnd(),
      GetArena());
  }
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customerkey()) {
    customerkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customerkey(),
      GetArena());
  }
  webinartoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_webinartoken()) {
    webinartoken_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_webinartoken(),
      GetArena());
  }
  ::memcpy(&meetingnumber_, &from.meetingnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdirectsharedesktop_) -
    reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isdirectsharedesktop_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.JoinMeetingParams)
}

void JoinMeetingParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinMeetingParams_electron_5fsdk_2eproto.base);
  vanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webinartoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meetingnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdirectsharedesktop_) -
      reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isdirectsharedesktop_));
}

JoinMeetingParams::~JoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.JoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void JoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vanityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webinartoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinMeetingParams::ArenaDtor(void* object) {
  JoinMeetingParams* _this = reinterpret_cast< JoinMeetingParams* >(object);
  (void)_this;
}
void JoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinMeetingParams& JoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void JoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.JoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      vanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      customerkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      webinartoken_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&meetingnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isvideooff_) -
        reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isvideooff_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&isaudiooff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isdirectsharedesktop_) -
        reinterpret_cast<char*>(&isaudiooff_)) + sizeof(isdirectsharedesktop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vanityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vanityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string psw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hDirectShareAppWnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customerKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string webinarToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_webinartoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isVideoOff = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_isvideooff(&has_bits);
          isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAudioOff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_isaudiooff(&has_bits);
          isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDirectShareDesktop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.JoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  // optional string vanityID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vanityid(), target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // optional string psw = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_psw(), target);
  }

  // optional string hDirectShareAppWnd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hdirectshareappwnd(), target);
  }

  // optional string customerKey = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_customerkey(), target);
  }

  // optional string webinarToken = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_webinartoken(), target);
  }

  // optional bool isVideoOff = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isaudiooff(), target);
  }

  // optional bool isDirectShareDesktop = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isdirectsharedesktop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.JoinMeetingParams)
  return target;
}

size_t JoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.JoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vanityID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vanityid());
    }

    // optional string userName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string psw = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_psw());
    }

    // optional string hDirectShareAppWnd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdirectshareappwnd());
    }

    // optional string customerKey = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customerkey());
    }

    // optional string webinarToken = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webinartoken());
    }

    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_meetingnumber());
    }

    // optional bool isVideoOff = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool isAudioOff = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool isDirectShareDesktop = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinMeetingParams*>(
      &from));
}

void JoinMeetingParams::MergeFrom(const JoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.JoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vanityid(from._internal_vanityid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_webinartoken(from._internal_webinartoken());
    }
    if (cached_has_bits & 0x00000040u) {
      meetingnumber_ = from.meetingnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      isvideooff_ = from.isvideooff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      isaudiooff_ = from.isaudiooff_;
    }
    if (cached_has_bits & 0x00000200u) {
      isdirectsharedesktop_ = from.isdirectsharedesktop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinMeetingParams::CopyFrom(const JoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.JoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMeetingParams::IsInitialized() const {
  return true;
}

void JoinMeetingParams::InternalSwap(JoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vanityid_.Swap(&other->vanityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hdirectshareappwnd_.Swap(&other->hdirectshareappwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customerkey_.Swap(&other->customerkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webinartoken_.Swap(&other->webinartoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinMeetingParams, isdirectsharedesktop_)
      + sizeof(JoinMeetingParams::isdirectsharedesktop_)
      - PROTOBUF_FIELD_OFFSET(JoinMeetingParams, meetingnumber_)>(
          reinterpret_cast<char*>(&meetingnumber_),
          reinterpret_cast<char*>(&other->meetingnumber_));
}

std::string JoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.JoinMeetingParams";
}


// ===================================================================

void JoinWithoutLoginParams::InitAsDefaultInstance() {
}
class JoinWithoutLoginParams::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinWithoutLoginParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vanityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdirectshareappwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_userzak(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_customerkey(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_webinartoken(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isdirectsharedesktop(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_isvideooff(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_isaudiooff(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

JoinWithoutLoginParams::JoinWithoutLoginParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.JoinWithoutLoginParams)
}
JoinWithoutLoginParams::JoinWithoutLoginParams(const JoinWithoutLoginParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vanityid()) {
    vanityid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vanityid(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_psw()) {
    psw_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_psw(),
      GetArena());
  }
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hdirectshareappwnd()) {
    hdirectshareappwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hdirectshareappwnd(),
      GetArena());
  }
  userzak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userzak()) {
    userzak_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userzak(),
      GetArena());
  }
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_customerkey()) {
    customerkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customerkey(),
      GetArena());
  }
  webinartoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_webinartoken()) {
    webinartoken_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_webinartoken(),
      GetArena());
  }
  ::memcpy(&meetingnumber_, &from.meetingnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&isaudiooff_) -
    reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isaudiooff_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.JoinWithoutLoginParams)
}

void JoinWithoutLoginParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinWithoutLoginParams_electron_5fsdk_2eproto.base);
  vanityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userzak_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webinartoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meetingnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isaudiooff_) -
      reinterpret_cast<char*>(&meetingnumber_)) + sizeof(isaudiooff_));
}

JoinWithoutLoginParams::~JoinWithoutLoginParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.JoinWithoutLoginParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void JoinWithoutLoginParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vanityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdirectshareappwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userzak_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customerkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webinartoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinWithoutLoginParams::ArenaDtor(void* object) {
  JoinWithoutLoginParams* _this = reinterpret_cast< JoinWithoutLoginParams* >(object);
  (void)_this;
}
void JoinWithoutLoginParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinWithoutLoginParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinWithoutLoginParams& JoinWithoutLoginParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinWithoutLoginParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void JoinWithoutLoginParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      vanityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hdirectshareappwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      userzak_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      customerkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      webinartoken_.ClearNonDefaultToEmpty();
    }
  }
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00000700u) {
    ::memset(&isdirectsharedesktop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isaudiooff_) -
        reinterpret_cast<char*>(&isdirectsharedesktop_)) + sizeof(isaudiooff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JoinWithoutLoginParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vanityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vanityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string psw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hDirectShareAppWnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hdirectshareappwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userZAK = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_userzak();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string customerKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_customerkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string webinarToken = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_webinartoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDirectShareDesktop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_isdirectsharedesktop(&has_bits);
          isdirectsharedesktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isVideoOff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isvideooff(&has_bits);
          isvideooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAudioOff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_isaudiooff(&has_bits);
          isaudiooff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinWithoutLoginParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  // optional string vanityID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vanityid(), target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // optional string psw = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_psw(), target);
  }

  // optional string hDirectShareAppWnd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hdirectshareappwnd(), target);
  }

  // optional string userZAK = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_userzak(), target);
  }

  // optional string customerKey = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_customerkey(), target);
  }

  // optional string webinarToken = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_webinartoken(), target);
  }

  // optional bool isDirectShareDesktop = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isdirectsharedesktop(), target);
  }

  // optional bool isVideoOff = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isvideooff(), target);
  }

  // optional bool isAudioOff = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_isaudiooff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.JoinWithoutLoginParams)
  return target;
}

size_t JoinWithoutLoginParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vanityID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vanityid());
    }

    // optional string userName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string psw = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_psw());
    }

    // optional string hDirectShareAppWnd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdirectshareappwnd());
    }

    // optional string userZAK = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userzak());
    }

    // optional string customerKey = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customerkey());
    }

    // optional string webinarToken = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webinartoken());
    }

    // optional uint64 meetingNumber = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_meetingnumber());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool isDirectShareDesktop = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool isVideoOff = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool isAudioOff = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinWithoutLoginParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinWithoutLoginParams*>(
      &from));
}

void JoinWithoutLoginParams::MergeFrom(const JoinWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vanityid(from._internal_vanityid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hdirectshareappwnd(from._internal_hdirectshareappwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_userzak(from._internal_userzak());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_customerkey(from._internal_customerkey());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_webinartoken(from._internal_webinartoken());
    }
    if (cached_has_bits & 0x00000080u) {
      meetingnumber_ = from.meetingnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      isdirectsharedesktop_ = from.isdirectsharedesktop_;
    }
    if (cached_has_bits & 0x00000200u) {
      isvideooff_ = from.isvideooff_;
    }
    if (cached_has_bits & 0x00000400u) {
      isaudiooff_ = from.isaudiooff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinWithoutLoginParams::CopyFrom(const JoinWithoutLoginParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.JoinWithoutLoginParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinWithoutLoginParams::IsInitialized() const {
  return true;
}

void JoinWithoutLoginParams::InternalSwap(JoinWithoutLoginParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vanityid_.Swap(&other->vanityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hdirectshareappwnd_.Swap(&other->hdirectshareappwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userzak_.Swap(&other->userzak_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customerkey_.Swap(&other->customerkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webinartoken_.Swap(&other->webinartoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinWithoutLoginParams, isaudiooff_)
      + sizeof(JoinWithoutLoginParams::isaudiooff_)
      - PROTOBUF_FIELD_OFFSET(JoinWithoutLoginParams, meetingnumber_)>(
          reinterpret_cast<char*>(&meetingnumber_),
          reinterpret_cast<char*>(&other->meetingnumber_));
}

std::string JoinWithoutLoginParams::GetTypeName() const {
  return "com.electron.sdk.proto.JoinWithoutLoginParams";
}


// ===================================================================

void LeaveMeetingParams::InitAsDefaultInstance() {
}
class LeaveMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveMeetingParams>()._has_bits_);
  static void set_has_bend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaveMeetingParams::LeaveMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.LeaveMeetingParams)
}
LeaveMeetingParams::LeaveMeetingParams(const LeaveMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bend_ = from.bend_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.LeaveMeetingParams)
}

void LeaveMeetingParams::SharedCtor() {
  bend_ = false;
}

LeaveMeetingParams::~LeaveMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.LeaveMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LeaveMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveMeetingParams::ArenaDtor(void* object) {
  LeaveMeetingParams* _this = reinterpret_cast< LeaveMeetingParams* >(object);
  (void)_this;
}
void LeaveMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveMeetingParams& LeaveMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void LeaveMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.LeaveMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LeaveMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bend(&has_bits);
          bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.LeaveMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.LeaveMeetingParams)
  return target;
}

size_t LeaveMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.LeaveMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LeaveMeetingParams*>(
      &from));
}

void LeaveMeetingParams::MergeFrom(const LeaveMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.LeaveMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bend()) {
    _internal_set_bend(from._internal_bend());
  }
}

void LeaveMeetingParams::CopyFrom(const LeaveMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.LeaveMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveMeetingParams::IsInitialized() const {
  return true;
}

void LeaveMeetingParams::InternalSwap(LeaveMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bend_, other->bend_);
}

std::string LeaveMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.LeaveMeetingParams";
}


// ===================================================================

void HandleZoomWebUriProtocolActionParams::InitAsDefaultInstance() {
}
class HandleZoomWebUriProtocolActionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HandleZoomWebUriProtocolActionParams>()._has_bits_);
  static void set_has_protocolaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HandleZoomWebUriProtocolActionParams::HandleZoomWebUriProtocolActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
}
HandleZoomWebUriProtocolActionParams::HandleZoomWebUriProtocolActionParams(const HandleZoomWebUriProtocolActionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  protocolaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocolaction()) {
    protocolaction_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocolaction(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
}

void HandleZoomWebUriProtocolActionParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HandleZoomWebUriProtocolActionParams_electron_5fsdk_2eproto.base);
  protocolaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HandleZoomWebUriProtocolActionParams::~HandleZoomWebUriProtocolActionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HandleZoomWebUriProtocolActionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocolaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HandleZoomWebUriProtocolActionParams::ArenaDtor(void* object) {
  HandleZoomWebUriProtocolActionParams* _this = reinterpret_cast< HandleZoomWebUriProtocolActionParams* >(object);
  (void)_this;
}
void HandleZoomWebUriProtocolActionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandleZoomWebUriProtocolActionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandleZoomWebUriProtocolActionParams& HandleZoomWebUriProtocolActionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandleZoomWebUriProtocolActionParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HandleZoomWebUriProtocolActionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    protocolaction_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HandleZoomWebUriProtocolActionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string protocolAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocolaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandleZoomWebUriProtocolActionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocolAction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocolaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  return target;
}

size_t HandleZoomWebUriProtocolActionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string protocolAction = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocolaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandleZoomWebUriProtocolActionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HandleZoomWebUriProtocolActionParams*>(
      &from));
}

void HandleZoomWebUriProtocolActionParams::MergeFrom(const HandleZoomWebUriProtocolActionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_protocolaction()) {
    _internal_set_protocolaction(from._internal_protocolaction());
  }
}

void HandleZoomWebUriProtocolActionParams::CopyFrom(const HandleZoomWebUriProtocolActionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandleZoomWebUriProtocolActionParams::IsInitialized() const {
  return true;
}

void HandleZoomWebUriProtocolActionParams::InternalSwap(HandleZoomWebUriProtocolActionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  protocolaction_.Swap(&other->protocolaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string HandleZoomWebUriProtocolActionParams::GetTypeName() const {
  return "com.electron.sdk.proto.HandleZoomWebUriProtocolActionParams";
}


// ===================================================================

void ShowChatDlgParams::InitAsDefaultInstance() {
}
class ShowChatDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowChatDlgParams>()._has_bits_);
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rectleft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recttop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rectright(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rectbottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShowChatDlgParams::ShowChatDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowChatDlgParams)
}
ShowChatDlgParams::ShowChatDlgParams(const ShowChatDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  rectleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rectleft()) {
    rectleft_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rectleft(),
      GetArena());
  }
  recttop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recttop()) {
    recttop_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recttop(),
      GetArena());
  }
  rectright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rectright()) {
    rectright_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rectright(),
      GetArena());
  }
  rectbottom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rectbottom()) {
    rectbottom_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rectbottom(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowChatDlgParams)
}

void ShowChatDlgParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowChatDlgParams_electron_5fsdk_2eproto.base);
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recttop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectbottom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShowChatDlgParams::~ShowChatDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowChatDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowChatDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectleft_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recttop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectright_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rectbottom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShowChatDlgParams::ArenaDtor(void* object) {
  ShowChatDlgParams* _this = reinterpret_cast< ShowChatDlgParams* >(object);
  (void)_this;
}
void ShowChatDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowChatDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowChatDlgParams& ShowChatDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowChatDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowChatDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowChatDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rectleft_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      recttop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      rectright_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      rectbottom_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowChatDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hParent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rectLeft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rectleft();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rectTop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recttop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rectRight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rectright();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rectBottom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rectbottom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowChatDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowChatDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hParent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hparent(), target);
  }

  // optional string rectLeft = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rectleft(), target);
  }

  // optional string rectTop = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recttop(), target);
  }

  // optional string rectRight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rectright(), target);
  }

  // optional string rectBottom = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rectbottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowChatDlgParams)
  return target;
}

size_t ShowChatDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowChatDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hParent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

    // optional string rectLeft = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rectleft());
    }

    // optional string rectTop = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recttop());
    }

    // optional string rectRight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rectright());
    }

    // optional string rectBottom = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rectbottom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowChatDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowChatDlgParams*>(
      &from));
}

void ShowChatDlgParams::MergeFrom(const ShowChatDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowChatDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rectleft(from._internal_rectleft());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_recttop(from._internal_recttop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_rectright(from._internal_rectright());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_rectbottom(from._internal_rectbottom());
    }
  }
}

void ShowChatDlgParams::CopyFrom(const ShowChatDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowChatDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowChatDlgParams::IsInitialized() const {
  return true;
}

void ShowChatDlgParams::InternalSwap(ShowChatDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rectleft_.Swap(&other->rectleft_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recttop_.Swap(&other->recttop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rectright_.Swap(&other->rectright_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rectbottom_.Swap(&other->rectbottom_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string ShowChatDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowChatDlgParams";
}


// ===================================================================

void EnterFullScreenParams::InitAsDefaultInstance() {
}
class EnterFullScreenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterFullScreenParams>()._has_bits_);
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bsecview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnterFullScreenParams::EnterFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnterFullScreenParams)
}
EnterFullScreenParams::EnterFullScreenParams(const EnterFullScreenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bfirstview_, &from.bfirstview_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsecview_) -
    reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnterFullScreenParams)
}

void EnterFullScreenParams::SharedCtor() {
  ::memset(&bfirstview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsecview_) -
      reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
}

EnterFullScreenParams::~EnterFullScreenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnterFullScreenParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnterFullScreenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterFullScreenParams::ArenaDtor(void* object) {
  EnterFullScreenParams* _this = reinterpret_cast< EnterFullScreenParams* >(object);
  (void)_this;
}
void EnterFullScreenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterFullScreenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterFullScreenParams& EnterFullScreenParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterFullScreenParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnterFullScreenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnterFullScreenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bfirstview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsecview_) -
      reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnterFullScreenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bFirstView = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bfirstview(&has_bits);
          bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bSecView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bsecview(&has_bits);
          bsecview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterFullScreenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnterFullScreenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bFirstView = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bfirstview(), target);
  }

  // optional bool bSecView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bsecview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnterFullScreenParams)
  return target;
}

size_t EnterFullScreenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnterFullScreenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bFirstView = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bSecView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterFullScreenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnterFullScreenParams*>(
      &from));
}

void EnterFullScreenParams::MergeFrom(const EnterFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnterFullScreenParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bfirstview_ = from.bfirstview_;
    }
    if (cached_has_bits & 0x00000002u) {
      bsecview_ = from.bsecview_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterFullScreenParams::CopyFrom(const EnterFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnterFullScreenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterFullScreenParams::IsInitialized() const {
  return true;
}

void EnterFullScreenParams::InternalSwap(EnterFullScreenParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterFullScreenParams, bsecview_)
      + sizeof(EnterFullScreenParams::bsecview_)
      - PROTOBUF_FIELD_OFFSET(EnterFullScreenParams, bfirstview_)>(
          reinterpret_cast<char*>(&bfirstview_),
          reinterpret_cast<char*>(&other->bfirstview_));
}

std::string EnterFullScreenParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnterFullScreenParams";
}


// ===================================================================

void ExitFullScreenParams::InitAsDefaultInstance() {
}
class ExitFullScreenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExitFullScreenParams>()._has_bits_);
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bsecview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExitFullScreenParams::ExitFullScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ExitFullScreenParams)
}
ExitFullScreenParams::ExitFullScreenParams(const ExitFullScreenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bfirstview_, &from.bfirstview_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsecview_) -
    reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ExitFullScreenParams)
}

void ExitFullScreenParams::SharedCtor() {
  ::memset(&bfirstview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsecview_) -
      reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
}

ExitFullScreenParams::~ExitFullScreenParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ExitFullScreenParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ExitFullScreenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExitFullScreenParams::ArenaDtor(void* object) {
  ExitFullScreenParams* _this = reinterpret_cast< ExitFullScreenParams* >(object);
  (void)_this;
}
void ExitFullScreenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExitFullScreenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitFullScreenParams& ExitFullScreenParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitFullScreenParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ExitFullScreenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ExitFullScreenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bfirstview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsecview_) -
      reinterpret_cast<char*>(&bfirstview_)) + sizeof(bsecview_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExitFullScreenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bFirstView = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bfirstview(&has_bits);
          bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bSecView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bsecview(&has_bits);
          bsecview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitFullScreenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ExitFullScreenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bFirstView = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bfirstview(), target);
  }

  // optional bool bSecView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bsecview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ExitFullScreenParams)
  return target;
}

size_t ExitFullScreenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ExitFullScreenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bFirstView = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bSecView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitFullScreenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExitFullScreenParams*>(
      &from));
}

void ExitFullScreenParams::MergeFrom(const ExitFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ExitFullScreenParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bfirstview_ = from.bfirstview_;
    }
    if (cached_has_bits & 0x00000002u) {
      bsecview_ = from.bsecview_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExitFullScreenParams::CopyFrom(const ExitFullScreenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ExitFullScreenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitFullScreenParams::IsInitialized() const {
  return true;
}

void ExitFullScreenParams::InternalSwap(ExitFullScreenParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExitFullScreenParams, bsecview_)
      + sizeof(ExitFullScreenParams::bsecview_)
      - PROTOBUF_FIELD_OFFSET(ExitFullScreenParams, bfirstview_)>(
          reinterpret_cast<char*>(&bfirstview_),
          reinterpret_cast<char*>(&other->bfirstview_));
}

std::string ExitFullScreenParams::GetTypeName() const {
  return "com.electron.sdk.proto.ExitFullScreenParams";
}


// ===================================================================

void MoveFloatVideoWndParams::InitAsDefaultInstance() {
}
class MoveFloatVideoWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveFloatVideoWndParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MoveFloatVideoWndParams::MoveFloatVideoWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
}
MoveFloatVideoWndParams::MoveFloatVideoWndParams(const MoveFloatVideoWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
}

void MoveFloatVideoWndParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFloatVideoWndParams_electron_5fsdk_2eproto.base);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveFloatVideoWndParams::~MoveFloatVideoWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MoveFloatVideoWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MoveFloatVideoWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveFloatVideoWndParams::ArenaDtor(void* object) {
  MoveFloatVideoWndParams* _this = reinterpret_cast< MoveFloatVideoWndParams* >(object);
  (void)_this;
}
void MoveFloatVideoWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFloatVideoWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFloatVideoWndParams& MoveFloatVideoWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFloatVideoWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void MoveFloatVideoWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MoveFloatVideoWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFloatVideoWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_left(), target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MoveFloatVideoWndParams)
  return target;
}

size_t MoveFloatVideoWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFloatVideoWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MoveFloatVideoWndParams*>(
      &from));
}

void MoveFloatVideoWndParams::MergeFrom(const MoveFloatVideoWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top(from._internal_top());
    }
  }
}

void MoveFloatVideoWndParams::CopyFrom(const MoveFloatVideoWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MoveFloatVideoWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFloatVideoWndParams::IsInitialized() const {
  return true;
}

void MoveFloatVideoWndParams::InternalSwap(MoveFloatVideoWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string MoveFloatVideoWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.MoveFloatVideoWndParams";
}


// ===================================================================

void ShowSharingToolbarParams::InitAsDefaultInstance() {
}
class ShowSharingToolbarParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSharingToolbarParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowSharingToolbarParams::ShowSharingToolbarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSharingToolbarParams)
}
ShowSharingToolbarParams::ShowSharingToolbarParams(const ShowSharingToolbarParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSharingToolbarParams)
}

void ShowSharingToolbarParams::SharedCtor() {
  bshow_ = false;
}

ShowSharingToolbarParams::~ShowSharingToolbarParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSharingToolbarParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowSharingToolbarParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowSharingToolbarParams::ArenaDtor(void* object) {
  ShowSharingToolbarParams* _this = reinterpret_cast< ShowSharingToolbarParams* >(object);
  (void)_this;
}
void ShowSharingToolbarParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowSharingToolbarParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSharingToolbarParams& ShowSharingToolbarParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSharingToolbarParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowSharingToolbarParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSharingToolbarParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSharingToolbarParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSharingToolbarParams)
  return target;
}

size_t ShowSharingToolbarParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSharingToolbarParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowSharingToolbarParams*>(
      &from));
}

void ShowSharingToolbarParams::MergeFrom(const ShowSharingToolbarParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void ShowSharingToolbarParams::CopyFrom(const ShowSharingToolbarParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSharingToolbarParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSharingToolbarParams::IsInitialized() const {
  return true;
}

void ShowSharingToolbarParams::InternalSwap(ShowSharingToolbarParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string ShowSharingToolbarParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSharingToolbarParams";
}


// ===================================================================

void ChangeFloatoActiveSpkVideoSizeParams::InitAsDefaultInstance() {
}
class ChangeFloatoActiveSpkVideoSizeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFloatoActiveSpkVideoSizeParams>()._has_bits_);
  static void set_has_floatvideotype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeFloatoActiveSpkVideoSizeParams::ChangeFloatoActiveSpkVideoSizeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
}
ChangeFloatoActiveSpkVideoSizeParams::ChangeFloatoActiveSpkVideoSizeParams(const ChangeFloatoActiveSpkVideoSizeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  floatvideotype_ = from.floatvideotype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
}

void ChangeFloatoActiveSpkVideoSizeParams::SharedCtor() {
  floatvideotype_ = 0;
}

ChangeFloatoActiveSpkVideoSizeParams::~ChangeFloatoActiveSpkVideoSizeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChangeFloatoActiveSpkVideoSizeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChangeFloatoActiveSpkVideoSizeParams::ArenaDtor(void* object) {
  ChangeFloatoActiveSpkVideoSizeParams* _this = reinterpret_cast< ChangeFloatoActiveSpkVideoSizeParams* >(object);
  (void)_this;
}
void ChangeFloatoActiveSpkVideoSizeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFloatoActiveSpkVideoSizeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeFloatoActiveSpkVideoSizeParams& ChangeFloatoActiveSpkVideoSizeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeFloatoActiveSpkVideoSizeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ChangeFloatoActiveSpkVideoSizeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floatvideotype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChangeFloatoActiveSpkVideoSizeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 floatVideoType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_floatvideotype(&has_bits);
          floatvideotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFloatoActiveSpkVideoSizeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 floatVideoType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_floatvideotype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  return target;
}

size_t ChangeFloatoActiveSpkVideoSizeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 floatVideoType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_floatvideotype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFloatoActiveSpkVideoSizeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChangeFloatoActiveSpkVideoSizeParams*>(
      &from));
}

void ChangeFloatoActiveSpkVideoSizeParams::MergeFrom(const ChangeFloatoActiveSpkVideoSizeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_floatvideotype()) {
    _internal_set_floatvideotype(from._internal_floatvideotype());
  }
}

void ChangeFloatoActiveSpkVideoSizeParams::CopyFrom(const ChangeFloatoActiveSpkVideoSizeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFloatoActiveSpkVideoSizeParams::IsInitialized() const {
  return true;
}

void ChangeFloatoActiveSpkVideoSizeParams::InternalSwap(ChangeFloatoActiveSpkVideoSizeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(floatvideotype_, other->floatvideotype_);
}

std::string ChangeFloatoActiveSpkVideoSizeParams::GetTypeName() const {
  return "com.electron.sdk.proto.ChangeFloatoActiveSpkVideoSizeParams";
}


// ===================================================================

void ShowParticipantsListWndParams::InitAsDefaultInstance() {
}
class ShowParticipantsListWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowParticipantsListWndParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowParticipantsListWndParams::ShowParticipantsListWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
}
ShowParticipantsListWndParams::ShowParticipantsListWndParams(const ShowParticipantsListWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
}

void ShowParticipantsListWndParams::SharedCtor() {
  bshow_ = false;
}

ShowParticipantsListWndParams::~ShowParticipantsListWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowParticipantsListWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowParticipantsListWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowParticipantsListWndParams::ArenaDtor(void* object) {
  ShowParticipantsListWndParams* _this = reinterpret_cast< ShowParticipantsListWndParams* >(object);
  (void)_this;
}
void ShowParticipantsListWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowParticipantsListWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowParticipantsListWndParams& ShowParticipantsListWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowParticipantsListWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowParticipantsListWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowParticipantsListWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowParticipantsListWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowParticipantsListWndParams)
  return target;
}

size_t ShowParticipantsListWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowParticipantsListWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowParticipantsListWndParams*>(
      &from));
}

void ShowParticipantsListWndParams::MergeFrom(const ShowParticipantsListWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void ShowParticipantsListWndParams::CopyFrom(const ShowParticipantsListWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowParticipantsListWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowParticipantsListWndParams::IsInitialized() const {
  return true;
}

void ShowParticipantsListWndParams::InternalSwap(ShowParticipantsListWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string ShowParticipantsListWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowParticipantsListWndParams";
}


// ===================================================================

void ShowBottomFloatToolbarWndParams::InitAsDefaultInstance() {
}
class ShowBottomFloatToolbarWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowBottomFloatToolbarWndParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowBottomFloatToolbarWndParams::ShowBottomFloatToolbarWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
}
ShowBottomFloatToolbarWndParams::ShowBottomFloatToolbarWndParams(const ShowBottomFloatToolbarWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
}

void ShowBottomFloatToolbarWndParams::SharedCtor() {
  bshow_ = false;
}

ShowBottomFloatToolbarWndParams::~ShowBottomFloatToolbarWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowBottomFloatToolbarWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowBottomFloatToolbarWndParams::ArenaDtor(void* object) {
  ShowBottomFloatToolbarWndParams* _this = reinterpret_cast< ShowBottomFloatToolbarWndParams* >(object);
  (void)_this;
}
void ShowBottomFloatToolbarWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowBottomFloatToolbarWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowBottomFloatToolbarWndParams& ShowBottomFloatToolbarWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowBottomFloatToolbarWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowBottomFloatToolbarWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowBottomFloatToolbarWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowBottomFloatToolbarWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  return target;
}

size_t ShowBottomFloatToolbarWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowBottomFloatToolbarWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowBottomFloatToolbarWndParams*>(
      &from));
}

void ShowBottomFloatToolbarWndParams::MergeFrom(const ShowBottomFloatToolbarWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void ShowBottomFloatToolbarWndParams::CopyFrom(const ShowBottomFloatToolbarWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowBottomFloatToolbarWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowBottomFloatToolbarWndParams::IsInitialized() const {
  return true;
}

void ShowBottomFloatToolbarWndParams::InternalSwap(ShowBottomFloatToolbarWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string ShowBottomFloatToolbarWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowBottomFloatToolbarWndParams";
}


// ===================================================================

void ShowPreOrNextPageVideoParams::InitAsDefaultInstance() {
}
class ShowPreOrNextPageVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowPreOrNextPageVideoParams>()._has_bits_);
  static void set_has_bpageup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowPreOrNextPageVideoParams::ShowPreOrNextPageVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
}
ShowPreOrNextPageVideoParams::ShowPreOrNextPageVideoParams(const ShowPreOrNextPageVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bpageup_ = from.bpageup_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
}

void ShowPreOrNextPageVideoParams::SharedCtor() {
  bpageup_ = false;
}

ShowPreOrNextPageVideoParams::~ShowPreOrNextPageVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowPreOrNextPageVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowPreOrNextPageVideoParams::ArenaDtor(void* object) {
  ShowPreOrNextPageVideoParams* _this = reinterpret_cast< ShowPreOrNextPageVideoParams* >(object);
  (void)_this;
}
void ShowPreOrNextPageVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowPreOrNextPageVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowPreOrNextPageVideoParams& ShowPreOrNextPageVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowPreOrNextPageVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowPreOrNextPageVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bpageup_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowPreOrNextPageVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bPageUp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bpageup(&has_bits);
          bpageup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowPreOrNextPageVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bPageUp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bpageup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  return target;
}

size_t ShowPreOrNextPageVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bPageUp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPreOrNextPageVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowPreOrNextPageVideoParams*>(
      &from));
}

void ShowPreOrNextPageVideoParams::MergeFrom(const ShowPreOrNextPageVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bpageup()) {
    _internal_set_bpageup(from._internal_bpageup());
  }
}

void ShowPreOrNextPageVideoParams::CopyFrom(const ShowPreOrNextPageVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowPreOrNextPageVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPreOrNextPageVideoParams::IsInitialized() const {
  return true;
}

void ShowPreOrNextPageVideoParams::InternalSwap(ShowPreOrNextPageVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bpageup_, other->bpageup_);
}

std::string ShowPreOrNextPageVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowPreOrNextPageVideoParams";
}


// ===================================================================

void ShowSharingFrameWindowsParams::InitAsDefaultInstance() {
}
class ShowSharingFrameWindowsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSharingFrameWindowsParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowSharingFrameWindowsParams::ShowSharingFrameWindowsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
}
ShowSharingFrameWindowsParams::ShowSharingFrameWindowsParams(const ShowSharingFrameWindowsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
}

void ShowSharingFrameWindowsParams::SharedCtor() {
  bshow_ = false;
}

ShowSharingFrameWindowsParams::~ShowSharingFrameWindowsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowSharingFrameWindowsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowSharingFrameWindowsParams::ArenaDtor(void* object) {
  ShowSharingFrameWindowsParams* _this = reinterpret_cast< ShowSharingFrameWindowsParams* >(object);
  (void)_this;
}
void ShowSharingFrameWindowsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowSharingFrameWindowsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSharingFrameWindowsParams& ShowSharingFrameWindowsParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSharingFrameWindowsParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowSharingFrameWindowsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSharingFrameWindowsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSharingFrameWindowsParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  return target;
}

size_t ShowSharingFrameWindowsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSharingFrameWindowsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowSharingFrameWindowsParams*>(
      &from));
}

void ShowSharingFrameWindowsParams::MergeFrom(const ShowSharingFrameWindowsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void ShowSharingFrameWindowsParams::CopyFrom(const ShowSharingFrameWindowsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSharingFrameWindowsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSharingFrameWindowsParams::IsInitialized() const {
  return true;
}

void ShowSharingFrameWindowsParams::InternalSwap(ShowSharingFrameWindowsParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string ShowSharingFrameWindowsParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSharingFrameWindowsParams";
}


// ===================================================================

void SwitchSplitScreenModeParams::InitAsDefaultInstance() {
}
class SwitchSplitScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchSplitScreenModeParams>()._has_bits_);
  static void set_has_bsplit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchSplitScreenModeParams::SwitchSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
}
SwitchSplitScreenModeParams::SwitchSplitScreenModeParams(const SwitchSplitScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bsplit_ = from.bsplit_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
}

void SwitchSplitScreenModeParams::SharedCtor() {
  bsplit_ = false;
}

SwitchSplitScreenModeParams::~SwitchSplitScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SwitchSplitScreenModeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwitchSplitScreenModeParams::ArenaDtor(void* object) {
  SwitchSplitScreenModeParams* _this = reinterpret_cast< SwitchSplitScreenModeParams* >(object);
  (void)_this;
}
void SwitchSplitScreenModeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchSplitScreenModeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchSplitScreenModeParams& SwitchSplitScreenModeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchSplitScreenModeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SwitchSplitScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bsplit_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwitchSplitScreenModeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bSplit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bsplit(&has_bits);
          bsplit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchSplitScreenModeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bSplit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bsplit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  return target;
}

size_t SwitchSplitScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bSplit = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchSplitScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SwitchSplitScreenModeParams*>(
      &from));
}

void SwitchSplitScreenModeParams::MergeFrom(const SwitchSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bsplit()) {
    _internal_set_bsplit(from._internal_bsplit());
  }
}

void SwitchSplitScreenModeParams::CopyFrom(const SwitchSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwitchSplitScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchSplitScreenModeParams::IsInitialized() const {
  return true;
}

void SwitchSplitScreenModeParams::InternalSwap(SwitchSplitScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bsplit_, other->bsplit_);
}

std::string SwitchSplitScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwitchSplitScreenModeParams";
}


// ===================================================================

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::InitAsDefaultInstance() {
}
class SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams>()._has_bits_);
  static void set_has_minimizeuimode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
}
SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  minimizeuimode_ = from.minimizeuimode_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SharedCtor() {
  minimizeuimode_ = 0;
}

SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::~SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::ArenaDtor(void* object) {
  SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* _this = reinterpret_cast< SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* >(object);
  (void)_this;
}
void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minimizeuimode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 minimizeUIMOde = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_minimizeuimode(&has_bits);
          minimizeuimode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 minimizeUIMOde = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minimizeuimode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  return target;
}

size_t SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 minimizeUIMOde = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimizeuimode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams*>(
      &from));
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::MergeFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_minimizeuimode()) {
    _internal_set_minimizeuimode(from._internal_minimizeuimode());
  }
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::CopyFrom(const SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::IsInitialized() const {
  return true;
}

void SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::InternalSwap(SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(minimizeuimode_, other->minimizeuimode_);
}

std::string SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams";
}


// ===================================================================

void SwapToShowShareViewOrVideoParams::InitAsDefaultInstance() {
}
class SwapToShowShareViewOrVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapToShowShareViewOrVideoParams>()._has_bits_);
  static void set_has_btodisplayshare(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwapToShowShareViewOrVideoParams::SwapToShowShareViewOrVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
}
SwapToShowShareViewOrVideoParams::SwapToShowShareViewOrVideoParams(const SwapToShowShareViewOrVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  btodisplayshare_ = from.btodisplayshare_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
}

void SwapToShowShareViewOrVideoParams::SharedCtor() {
  btodisplayshare_ = false;
}

SwapToShowShareViewOrVideoParams::~SwapToShowShareViewOrVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SwapToShowShareViewOrVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwapToShowShareViewOrVideoParams::ArenaDtor(void* object) {
  SwapToShowShareViewOrVideoParams* _this = reinterpret_cast< SwapToShowShareViewOrVideoParams* >(object);
  (void)_this;
}
void SwapToShowShareViewOrVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapToShowShareViewOrVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapToShowShareViewOrVideoParams& SwapToShowShareViewOrVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapToShowShareViewOrVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SwapToShowShareViewOrVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  btodisplayshare_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SwapToShowShareViewOrVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bToDisplayShare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_btodisplayshare(&has_bits);
          btodisplayshare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapToShowShareViewOrVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bToDisplayShare = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_btodisplayshare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  return target;
}

size_t SwapToShowShareViewOrVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bToDisplayShare = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapToShowShareViewOrVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SwapToShowShareViewOrVideoParams*>(
      &from));
}

void SwapToShowShareViewOrVideoParams::MergeFrom(const SwapToShowShareViewOrVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_btodisplayshare()) {
    _internal_set_btodisplayshare(from._internal_btodisplayshare());
  }
}

void SwapToShowShareViewOrVideoParams::CopyFrom(const SwapToShowShareViewOrVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SwapToShowShareViewOrVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapToShowShareViewOrVideoParams::IsInitialized() const {
  return true;
}

void SwapToShowShareViewOrVideoParams::InternalSwap(SwapToShowShareViewOrVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(btodisplayshare_, other->btodisplayshare_);
}

std::string SwapToShowShareViewOrVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SwapToShowShareViewOrVideoParams";
}


// ===================================================================

void ShowSettingDlgParams::InitAsDefaultInstance() {
}
class ShowSettingDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowSettingDlgParams>()._has_bits_);
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hsettingwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShowSettingDlgParams::ShowSettingDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowSettingDlgParams)
}
ShowSettingDlgParams::ShowSettingDlgParams(const ShowSettingDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  hsettingwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hsettingwnd()) {
    hsettingwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hsettingwnd(),
      GetArena());
  }
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowSettingDlgParams)
}

void ShowSettingDlgParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowSettingDlgParams_electron_5fsdk_2eproto.base);
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hsettingwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bshow_ = false;
}

ShowSettingDlgParams::~ShowSettingDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowSettingDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowSettingDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hsettingwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShowSettingDlgParams::ArenaDtor(void* object) {
  ShowSettingDlgParams* _this = reinterpret_cast< ShowSettingDlgParams* >(object);
  (void)_this;
}
void ShowSettingDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowSettingDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSettingDlgParams& ShowSettingDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSettingDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowSettingDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hsettingwnd_.ClearNonDefaultToEmpty();
    }
  }
  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowSettingDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hParent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hSettingWnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hsettingwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bShow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSettingDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowSettingDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hParent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hparent(), target);
  }

  // optional string left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_left(), target);
  }

  // optional string top = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_top(), target);
  }

  // optional string hSettingWnd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hsettingwnd(), target);
  }

  // optional bool bShow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowSettingDlgParams)
  return target;
}

size_t ShowSettingDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowSettingDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hParent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

    // optional string left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

    // optional string hSettingWnd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hsettingwnd());
    }

    // optional bool bShow = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSettingDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowSettingDlgParams*>(
      &from));
}

void ShowSettingDlgParams::MergeFrom(const ShowSettingDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowSettingDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hsettingwnd(from._internal_hsettingwnd());
    }
    if (cached_has_bits & 0x00000010u) {
      bshow_ = from.bshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShowSettingDlgParams::CopyFrom(const ShowSettingDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowSettingDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSettingDlgParams::IsInitialized() const {
  return true;
}

void ShowSettingDlgParams::InternalSwap(ShowSettingDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hsettingwnd_.Swap(&other->hsettingwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bshow_, other->bshow_);
}

std::string ShowSettingDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowSettingDlgParams";
}


// ===================================================================

void ScheduleMeetingWithWndParams::InitAsDefaultInstance() {
}
class ScheduleMeetingWithWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduleMeetingWithWndParams>()._has_bits_);
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScheduleMeetingWithWndParams::ScheduleMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
}
ScheduleMeetingWithWndParams::ScheduleMeetingWithWndParams(const ScheduleMeetingWithWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hselfwnd()) {
    hselfwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hselfwnd(),
      GetArena());
  }
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
}

void ScheduleMeetingWithWndParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScheduleMeetingWithWndParams_electron_5fsdk_2eproto.base);
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScheduleMeetingWithWndParams::~ScheduleMeetingWithWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ScheduleMeetingWithWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hselfwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScheduleMeetingWithWndParams::ArenaDtor(void* object) {
  ScheduleMeetingWithWndParams* _this = reinterpret_cast< ScheduleMeetingWithWndParams* >(object);
  (void)_this;
}
void ScheduleMeetingWithWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScheduleMeetingWithWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScheduleMeetingWithWndParams& ScheduleMeetingWithWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScheduleMeetingWithWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ScheduleMeetingWithWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      top_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScheduleMeetingWithWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hSelfWnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hParent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScheduleMeetingWithWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hSelfWnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hselfwnd(), target);
  }

  // optional string hParent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hparent(), target);
  }

  // optional string left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_left(), target);
  }

  // optional string top = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  return target;
}

size_t ScheduleMeetingWithWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hSelfWnd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hselfwnd());
    }

    // optional string hParent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

    // optional string left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleMeetingWithWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScheduleMeetingWithWndParams*>(
      &from));
}

void ScheduleMeetingWithWndParams::MergeFrom(const ScheduleMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_top(from._internal_top());
    }
  }
}

void ScheduleMeetingWithWndParams::CopyFrom(const ScheduleMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ScheduleMeetingWithWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleMeetingWithWndParams::IsInitialized() const {
  return true;
}

void ScheduleMeetingWithWndParams::InternalSwap(ScheduleMeetingWithWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hselfwnd_.Swap(&other->hselfwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string ScheduleMeetingWithWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.ScheduleMeetingWithWndParams";
}


// ===================================================================

void EditMeetingParams::InitAsDefaultInstance() {
}
class EditMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMeetingParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EditMeetingParams::EditMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EditMeetingParams)
}
EditMeetingParams::EditMeetingParams(const EditMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  meetingnumber_ = from.meetingnumber_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EditMeetingParams)
}

void EditMeetingParams::SharedCtor() {
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
}

EditMeetingParams::~EditMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EditMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EditMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EditMeetingParams::ArenaDtor(void* object) {
  EditMeetingParams* _this = reinterpret_cast< EditMeetingParams* >(object);
  (void)_this;
}
void EditMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditMeetingParams& EditMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EditMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EditMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meetingnumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EditMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EditMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EditMeetingParams)
  return target;
}

size_t EditMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EditMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EditMeetingParams*>(
      &from));
}

void EditMeetingParams::MergeFrom(const EditMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EditMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meetingnumber()) {
    _internal_set_meetingnumber(from._internal_meetingnumber());
  }
}

void EditMeetingParams::CopyFrom(const EditMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EditMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMeetingParams::IsInitialized() const {
  return true;
}

void EditMeetingParams::InternalSwap(EditMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meetingnumber_, other->meetingnumber_);
}

std::string EditMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EditMeetingParams";
}


// ===================================================================

void EditMeetingWithWndParams::InitAsDefaultInstance() {
}
class EditMeetingWithWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMeetingWithWndParams>()._has_bits_);
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

EditMeetingWithWndParams::EditMeetingWithWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EditMeetingWithWndParams)
}
EditMeetingWithWndParams::EditMeetingWithWndParams(const EditMeetingWithWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hselfwnd()) {
    hselfwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hselfwnd(),
      GetArena());
  }
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  meetingnumber_ = from.meetingnumber_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EditMeetingWithWndParams)
}

void EditMeetingWithWndParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditMeetingWithWndParams_electron_5fsdk_2eproto.base);
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
}

EditMeetingWithWndParams::~EditMeetingWithWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EditMeetingWithWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EditMeetingWithWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hselfwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditMeetingWithWndParams::ArenaDtor(void* object) {
  EditMeetingWithWndParams* _this = reinterpret_cast< EditMeetingWithWndParams* >(object);
  (void)_this;
}
void EditMeetingWithWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditMeetingWithWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditMeetingWithWndParams& EditMeetingWithWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditMeetingWithWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EditMeetingWithWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hparent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      top_.ClearNonDefaultToEmpty();
    }
  }
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EditMeetingWithWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hSelfWnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hParent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 meetingNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditMeetingWithWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hSelfWnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hselfwnd(), target);
  }

  // optional string hParent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hparent(), target);
  }

  // optional string left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_left(), target);
  }

  // optional string top = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_top(), target);
  }

  // optional uint64 meetingNumber = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EditMeetingWithWndParams)
  return target;
}

size_t EditMeetingWithWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hSelfWnd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hselfwnd());
    }

    // optional string hParent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

    // optional string left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

    // optional uint64 meetingNumber = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_meetingnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMeetingWithWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EditMeetingWithWndParams*>(
      &from));
}

void EditMeetingWithWndParams::MergeFrom(const EditMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hparent(from._internal_hparent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000010u) {
      meetingnumber_ = from.meetingnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EditMeetingWithWndParams::CopyFrom(const EditMeetingWithWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EditMeetingWithWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMeetingWithWndParams::IsInitialized() const {
  return true;
}

void EditMeetingWithWndParams::InternalSwap(EditMeetingWithWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hselfwnd_.Swap(&other->hselfwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(meetingnumber_, other->meetingnumber_);
}

std::string EditMeetingWithWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.EditMeetingWithWndParams";
}


// ===================================================================

void DeleteMeetingParams::InitAsDefaultInstance() {
}
class DeleteMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteMeetingParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeleteMeetingParams::DeleteMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DeleteMeetingParams)
}
DeleteMeetingParams::DeleteMeetingParams(const DeleteMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  meetingnumber_ = from.meetingnumber_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DeleteMeetingParams)
}

void DeleteMeetingParams::SharedCtor() {
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
}

DeleteMeetingParams::~DeleteMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DeleteMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMeetingParams::ArenaDtor(void* object) {
  DeleteMeetingParams* _this = reinterpret_cast< DeleteMeetingParams* >(object);
  (void)_this;
}
void DeleteMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMeetingParams& DeleteMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DeleteMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DeleteMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meetingnumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DeleteMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DeleteMeetingParams)
  return target;
}

size_t DeleteMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DeleteMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteMeetingParams*>(
      &from));
}

void DeleteMeetingParams::MergeFrom(const DeleteMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DeleteMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meetingnumber()) {
    _internal_set_meetingnumber(from._internal_meetingnumber());
  }
}

void DeleteMeetingParams::CopyFrom(const DeleteMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DeleteMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMeetingParams::IsInitialized() const {
  return true;
}

void DeleteMeetingParams::InternalSwap(DeleteMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meetingnumber_, other->meetingnumber_);
}

std::string DeleteMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DeleteMeetingParams";
}


// ===================================================================

void AddCustomizedPictureResourceParams::InitAsDefaultInstance() {
}
class AddCustomizedPictureResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedPictureResourceParams>()._has_bits_);
  static void set_has_strpngid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strpngpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AddCustomizedPictureResourceParams::AddCustomizedPictureResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
}
AddCustomizedPictureResourceParams::AddCustomizedPictureResourceParams(const AddCustomizedPictureResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  strpngid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpngid()) {
    strpngid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpngid(),
      GetArena());
  }
  strpngpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strpngpath()) {
    strpngpath_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strpngpath(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
}

void AddCustomizedPictureResourceParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCustomizedPictureResourceParams_electron_5fsdk_2eproto.base);
  strpngid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpngpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddCustomizedPictureResourceParams::~AddCustomizedPictureResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddCustomizedPictureResourceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strpngid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strpngpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddCustomizedPictureResourceParams::ArenaDtor(void* object) {
  AddCustomizedPictureResourceParams* _this = reinterpret_cast< AddCustomizedPictureResourceParams* >(object);
  (void)_this;
}
void AddCustomizedPictureResourceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCustomizedPictureResourceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCustomizedPictureResourceParams& AddCustomizedPictureResourceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCustomizedPictureResourceParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AddCustomizedPictureResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strpngid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strpngpath_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedPictureResourceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string strPNGID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strpngid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strPNGPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strpngpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCustomizedPictureResourceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string strPNGID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strpngid(), target);
  }

  // optional string strPNGPath = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strpngpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  return target;
}

size_t AddCustomizedPictureResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strPNGID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strpngid());
    }

    // optional string strPNGPath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strpngpath());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedPictureResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddCustomizedPictureResourceParams*>(
      &from));
}

void AddCustomizedPictureResourceParams::MergeFrom(const AddCustomizedPictureResourceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strpngid(from._internal_strpngid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strpngpath(from._internal_strpngpath());
    }
  }
}

void AddCustomizedPictureResourceParams::CopyFrom(const AddCustomizedPictureResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedPictureResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedPictureResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedPictureResourceParams::InternalSwap(AddCustomizedPictureResourceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strpngid_.Swap(&other->strpngid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strpngpath_.Swap(&other->strpngpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AddCustomizedPictureResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedPictureResourceParams";
}


// ===================================================================

void AddCustomizedStringResourceParams::InitAsDefaultInstance() {
}
class AddCustomizedStringResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedStringResourceParams>()._has_bits_);
  static void set_has_customizedstringtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcustomizedstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddCustomizedStringResourceParams::AddCustomizedStringResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
}
AddCustomizedStringResourceParams::AddCustomizedStringResourceParams(const AddCustomizedStringResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  strcustomizedstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcustomizedstring()) {
    strcustomizedstring_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strcustomizedstring(),
      GetArena());
  }
  customizedstringtype_ = from.customizedstringtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
}

void AddCustomizedStringResourceParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCustomizedStringResourceParams_electron_5fsdk_2eproto.base);
  strcustomizedstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedstringtype_ = 0;
}

AddCustomizedStringResourceParams::~AddCustomizedStringResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddCustomizedStringResourceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strcustomizedstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddCustomizedStringResourceParams::ArenaDtor(void* object) {
  AddCustomizedStringResourceParams* _this = reinterpret_cast< AddCustomizedStringResourceParams* >(object);
  (void)_this;
}
void AddCustomizedStringResourceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCustomizedStringResourceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCustomizedStringResourceParams& AddCustomizedStringResourceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCustomizedStringResourceParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AddCustomizedStringResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strcustomizedstring_.ClearNonDefaultToEmpty();
  }
  customizedstringtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedStringResourceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 customizedStringType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_customizedstringtype(&has_bits);
          customizedstringtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strCustomizedString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strcustomizedstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCustomizedStringResourceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 customizedStringType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_customizedstringtype(), target);
  }

  // optional string strCustomizedString = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strcustomizedstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  return target;
}

size_t AddCustomizedStringResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCustomizedString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strcustomizedstring());
    }

    // optional int32 customizedStringType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_customizedstringtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedStringResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddCustomizedStringResourceParams*>(
      &from));
}

void AddCustomizedStringResourceParams::MergeFrom(const AddCustomizedStringResourceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strcustomizedstring(from._internal_strcustomizedstring());
    }
    if (cached_has_bits & 0x00000002u) {
      customizedstringtype_ = from.customizedstringtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddCustomizedStringResourceParams::CopyFrom(const AddCustomizedStringResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedStringResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedStringResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedStringResourceParams::InternalSwap(AddCustomizedStringResourceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strcustomizedstring_.Swap(&other->strcustomizedstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(customizedstringtype_, other->customizedstringtype_);
}

std::string AddCustomizedStringResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedStringResourceParams";
}


// ===================================================================

void AddCustomizedURLResourceParams::InitAsDefaultInstance() {
}
class AddCustomizedURLResourceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddCustomizedURLResourceParams>()._has_bits_);
  static void set_has_customizedurltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcustomizedurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddCustomizedURLResourceParams::AddCustomizedURLResourceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
}
AddCustomizedURLResourceParams::AddCustomizedURLResourceParams(const AddCustomizedURLResourceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  strcustomizedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcustomizedurl()) {
    strcustomizedurl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strcustomizedurl(),
      GetArena());
  }
  customizedurltype_ = from.customizedurltype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
}

void AddCustomizedURLResourceParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCustomizedURLResourceParams_electron_5fsdk_2eproto.base);
  strcustomizedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customizedurltype_ = 0;
}

AddCustomizedURLResourceParams::~AddCustomizedURLResourceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddCustomizedURLResourceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strcustomizedurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddCustomizedURLResourceParams::ArenaDtor(void* object) {
  AddCustomizedURLResourceParams* _this = reinterpret_cast< AddCustomizedURLResourceParams* >(object);
  (void)_this;
}
void AddCustomizedURLResourceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCustomizedURLResourceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCustomizedURLResourceParams& AddCustomizedURLResourceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCustomizedURLResourceParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AddCustomizedURLResourceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strcustomizedurl_.ClearNonDefaultToEmpty();
  }
  customizedurltype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddCustomizedURLResourceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 customizedURLType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_customizedurltype(&has_bits);
          customizedurltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string strCustomizedURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strcustomizedurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCustomizedURLResourceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 customizedURLType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_customizedurltype(), target);
  }

  // optional string strCustomizedURL = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strcustomizedurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  return target;
}

size_t AddCustomizedURLResourceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCustomizedURL = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strcustomizedurl());
    }

    // optional int32 customizedURLType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_customizedurltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomizedURLResourceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddCustomizedURLResourceParams*>(
      &from));
}

void AddCustomizedURLResourceParams::MergeFrom(const AddCustomizedURLResourceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strcustomizedurl(from._internal_strcustomizedurl());
    }
    if (cached_has_bits & 0x00000002u) {
      customizedurltype_ = from.customizedurltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddCustomizedURLResourceParams::CopyFrom(const AddCustomizedURLResourceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AddCustomizedURLResourceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomizedURLResourceParams::IsInitialized() const {
  return true;
}

void AddCustomizedURLResourceParams::InternalSwap(AddCustomizedURLResourceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strcustomizedurl_.Swap(&other->strcustomizedurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(customizedurltype_, other->customizedurltype_);
}

std::string AddCustomizedURLResourceParams::GetTypeName() const {
  return "com.electron.sdk.proto.AddCustomizedURLResourceParams";
}


// ===================================================================

void TryWithMeetingNumberParams::InitAsDefaultInstance() {
}
class TryWithMeetingNumberParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TryWithMeetingNumberParams>()._has_bits_);
  static void set_has_meetingnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TryWithMeetingNumberParams::TryWithMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
}
TryWithMeetingNumberParams::TryWithMeetingNumberParams(const TryWithMeetingNumberParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  meetingnumber_ = from.meetingnumber_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
}

void TryWithMeetingNumberParams::SharedCtor() {
  meetingnumber_ = PROTOBUF_ULONGLONG(0);
}

TryWithMeetingNumberParams::~TryWithMeetingNumberParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TryWithMeetingNumberParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TryWithMeetingNumberParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TryWithMeetingNumberParams::ArenaDtor(void* object) {
  TryWithMeetingNumberParams* _this = reinterpret_cast< TryWithMeetingNumberParams* >(object);
  (void)_this;
}
void TryWithMeetingNumberParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryWithMeetingNumberParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryWithMeetingNumberParams& TryWithMeetingNumberParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryWithMeetingNumberParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void TryWithMeetingNumberParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meetingnumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TryWithMeetingNumberParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 meetingNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meetingnumber(&has_bits);
          meetingnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryWithMeetingNumberParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 meetingNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_meetingnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TryWithMeetingNumberParams)
  return target;
}

size_t TryWithMeetingNumberParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 meetingNumber = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_meetingnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryWithMeetingNumberParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TryWithMeetingNumberParams*>(
      &from));
}

void TryWithMeetingNumberParams::MergeFrom(const TryWithMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meetingnumber()) {
    _internal_set_meetingnumber(from._internal_meetingnumber());
  }
}

void TryWithMeetingNumberParams::CopyFrom(const TryWithMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TryWithMeetingNumberParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryWithMeetingNumberParams::IsInitialized() const {
  return true;
}

void TryWithMeetingNumberParams::InternalSwap(TryWithMeetingNumberParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meetingnumber_, other->meetingnumber_);
}

std::string TryWithMeetingNumberParams::GetTypeName() const {
  return "com.electron.sdk.proto.TryWithMeetingNumberParams";
}


// ===================================================================

void TryWithPairingCodeParams::InitAsDefaultInstance() {
}
class TryWithPairingCodeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TryWithPairingCodeParams>()._has_bits_);
  static void set_has_paringcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TryWithPairingCodeParams::TryWithPairingCodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TryWithPairingCodeParams)
}
TryWithPairingCodeParams::TryWithPairingCodeParams(const TryWithPairingCodeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  paringcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paringcode()) {
    paringcode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paringcode(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TryWithPairingCodeParams)
}

void TryWithPairingCodeParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TryWithPairingCodeParams_electron_5fsdk_2eproto.base);
  paringcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TryWithPairingCodeParams::~TryWithPairingCodeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TryWithPairingCodeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TryWithPairingCodeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paringcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TryWithPairingCodeParams::ArenaDtor(void* object) {
  TryWithPairingCodeParams* _this = reinterpret_cast< TryWithPairingCodeParams* >(object);
  (void)_this;
}
void TryWithPairingCodeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TryWithPairingCodeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryWithPairingCodeParams& TryWithPairingCodeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryWithPairingCodeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void TryWithPairingCodeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    paringcode_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TryWithPairingCodeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string paringCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paringcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TryWithPairingCodeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string paringCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paringcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TryWithPairingCodeParams)
  return target;
}

size_t TryWithPairingCodeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string paringCode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paringcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryWithPairingCodeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TryWithPairingCodeParams*>(
      &from));
}

void TryWithPairingCodeParams::MergeFrom(const TryWithPairingCodeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_paringcode()) {
    _internal_set_paringcode(from._internal_paringcode());
  }
}

void TryWithPairingCodeParams::CopyFrom(const TryWithPairingCodeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TryWithPairingCodeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryWithPairingCodeParams::IsInitialized() const {
  return true;
}

void TryWithPairingCodeParams::InternalSwap(TryWithPairingCodeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paringcode_.Swap(&other->paringcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string TryWithPairingCodeParams::GetTypeName() const {
  return "com.electron.sdk.proto.TryWithPairingCodeParams";
}


// ===================================================================

void StartAnnotationParams::InitAsDefaultInstance() {
}
class StartAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartAnnotationParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StartAnnotationParams::StartAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartAnnotationParams)
}
StartAnnotationParams::StartAnnotationParams(const StartAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartAnnotationParams)
}

void StartAnnotationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartAnnotationParams_electron_5fsdk_2eproto.base);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  viewtype_ = 0;
}

StartAnnotationParams::~StartAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartAnnotationParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartAnnotationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartAnnotationParams::ArenaDtor(void* object) {
  StartAnnotationParams* _this = reinterpret_cast< StartAnnotationParams* >(object);
  (void)_this;
}
void StartAnnotationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartAnnotationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAnnotationParams& StartAnnotationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartAnnotationParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StartAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_.ClearNonDefaultToEmpty();
    }
  }
  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartAnnotationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartAnnotationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  // optional string left = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_left(), target);
  }

  // optional string top = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartAnnotationParams)
  return target;
}

size_t StartAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartAnnotationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string left = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartAnnotationParams*>(
      &from));
}

void StartAnnotationParams::MergeFrom(const StartAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartAnnotationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      viewtype_ = from.viewtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartAnnotationParams::CopyFrom(const StartAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAnnotationParams::IsInitialized() const {
  return true;
}

void StartAnnotationParams::InternalSwap(StartAnnotationParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(viewtype_, other->viewtype_);
}

std::string StartAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartAnnotationParams";
}


// ===================================================================

void StopAnnotationParams::InitAsDefaultInstance() {
}
class StopAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StopAnnotationParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopAnnotationParams::StopAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StopAnnotationParams)
}
StopAnnotationParams::StopAnnotationParams(const StopAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StopAnnotationParams)
}

void StopAnnotationParams::SharedCtor() {
  viewtype_ = 0;
}

StopAnnotationParams::~StopAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StopAnnotationParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StopAnnotationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopAnnotationParams::ArenaDtor(void* object) {
  StopAnnotationParams* _this = reinterpret_cast< StopAnnotationParams* >(object);
  (void)_this;
}
void StopAnnotationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopAnnotationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopAnnotationParams& StopAnnotationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopAnnotationParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StopAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StopAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StopAnnotationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopAnnotationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StopAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StopAnnotationParams)
  return target;
}

size_t StopAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StopAnnotationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StopAnnotationParams*>(
      &from));
}

void StopAnnotationParams::MergeFrom(const StopAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StopAnnotationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_viewtype()) {
    _internal_set_viewtype(from._internal_viewtype());
  }
}

void StopAnnotationParams::CopyFrom(const StopAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StopAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAnnotationParams::IsInitialized() const {
  return true;
}

void StopAnnotationParams::InternalSwap(StopAnnotationParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(viewtype_, other->viewtype_);
}

std::string StopAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.StopAnnotationParams";
}


// ===================================================================

void SetToolParams::InitAsDefaultInstance() {
}
class SetToolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetToolParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tooltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetToolParams::SetToolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetToolParams)
}
SetToolParams::SetToolParams(const SetToolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&viewtype_, &from.viewtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&tooltype_) -
    reinterpret_cast<char*>(&viewtype_)) + sizeof(tooltype_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetToolParams)
}

void SetToolParams::SharedCtor() {
  ::memset(&viewtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tooltype_) -
      reinterpret_cast<char*>(&viewtype_)) + sizeof(tooltype_));
}

SetToolParams::~SetToolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetToolParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetToolParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetToolParams::ArenaDtor(void* object) {
  SetToolParams* _this = reinterpret_cast< SetToolParams* >(object);
  (void)_this;
}
void SetToolParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetToolParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetToolParams& SetToolParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetToolParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetToolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetToolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&viewtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tooltype_) -
        reinterpret_cast<char*>(&viewtype_)) + sizeof(tooltype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetToolParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 toolType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tooltype(&has_bits);
          tooltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetToolParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetToolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  // optional int32 toolType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tooltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetToolParams)
  return target;
}

size_t SetToolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetToolParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_viewtype());
    }

    // optional int32 toolType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tooltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetToolParams*>(
      &from));
}

void SetToolParams::MergeFrom(const SetToolParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetToolParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      viewtype_ = from.viewtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      tooltype_ = from.tooltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetToolParams::CopyFrom(const SetToolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetToolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolParams::IsInitialized() const {
  return true;
}

void SetToolParams::InternalSwap(SetToolParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetToolParams, tooltype_)
      + sizeof(SetToolParams::tooltype_)
      - PROTOBUF_FIELD_OFFSET(SetToolParams, viewtype_)>(
          reinterpret_cast<char*>(&viewtype_),
          reinterpret_cast<char*>(&other->viewtype_));
}

std::string SetToolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetToolParams";
}


// ===================================================================

void ClearAnnotationParams::InitAsDefaultInstance() {
}
class ClearAnnotationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearAnnotationParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cleartype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClearAnnotationParams::ClearAnnotationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ClearAnnotationParams)
}
ClearAnnotationParams::ClearAnnotationParams(const ClearAnnotationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&viewtype_, &from.viewtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&cleartype_) -
    reinterpret_cast<char*>(&viewtype_)) + sizeof(cleartype_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ClearAnnotationParams)
}

void ClearAnnotationParams::SharedCtor() {
  ::memset(&viewtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cleartype_) -
      reinterpret_cast<char*>(&viewtype_)) + sizeof(cleartype_));
}

ClearAnnotationParams::~ClearAnnotationParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ClearAnnotationParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearAnnotationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearAnnotationParams::ArenaDtor(void* object) {
  ClearAnnotationParams* _this = reinterpret_cast< ClearAnnotationParams* >(object);
  (void)_this;
}
void ClearAnnotationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearAnnotationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearAnnotationParams& ClearAnnotationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearAnnotationParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ClearAnnotationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ClearAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&viewtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cleartype_) -
        reinterpret_cast<char*>(&viewtype_)) + sizeof(cleartype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClearAnnotationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clearType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cleartype(&has_bits);
          cleartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearAnnotationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ClearAnnotationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  // optional int32 clearType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cleartype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ClearAnnotationParams)
  return target;
}

size_t ClearAnnotationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ClearAnnotationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_viewtype());
    }

    // optional int32 clearType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cleartype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearAnnotationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearAnnotationParams*>(
      &from));
}

void ClearAnnotationParams::MergeFrom(const ClearAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ClearAnnotationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      viewtype_ = from.viewtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      cleartype_ = from.cleartype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearAnnotationParams::CopyFrom(const ClearAnnotationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ClearAnnotationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAnnotationParams::IsInitialized() const {
  return true;
}

void ClearAnnotationParams::InternalSwap(ClearAnnotationParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearAnnotationParams, cleartype_)
      + sizeof(ClearAnnotationParams::cleartype_)
      - PROTOBUF_FIELD_OFFSET(ClearAnnotationParams, viewtype_)>(
          reinterpret_cast<char*>(&viewtype_),
          reinterpret_cast<char*>(&other->viewtype_));
}

std::string ClearAnnotationParams::GetTypeName() const {
  return "com.electron.sdk.proto.ClearAnnotationParams";
}


// ===================================================================

void SetColorParams::InitAsDefaultInstance() {
}
class SetColorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetColorParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetColorParams::SetColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetColorParams)
}
SetColorParams::SetColorParams(const SetColorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_color()) {
    color_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color(),
      GetArena());
  }
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetColorParams)
}

void SetColorParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetColorParams_electron_5fsdk_2eproto.base);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  viewtype_ = 0;
}

SetColorParams::~SetColorParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetColorParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetColorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetColorParams::ArenaDtor(void* object) {
  SetColorParams* _this = reinterpret_cast< SetColorParams* >(object);
  (void)_this;
}
void SetColorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetColorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetColorParams& SetColorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetColorParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetColorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetColorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    color_.ClearNonDefaultToEmpty();
  }
  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetColorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetColorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetColorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  // optional string color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetColorParams)
  return target;
}

size_t SetColorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetColorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetColorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetColorParams*>(
      &from));
}

void SetColorParams::MergeFrom(const SetColorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetColorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      viewtype_ = from.viewtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetColorParams::CopyFrom(const SetColorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetColorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetColorParams::IsInitialized() const {
  return true;
}

void SetColorParams::InternalSwap(SetColorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(viewtype_, other->viewtype_);
}

std::string SetColorParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetColorParams";
}


// ===================================================================

void SetLineWidthParams::InitAsDefaultInstance() {
}
class SetLineWidthParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLineWidthParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linewidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetLineWidthParams::SetLineWidthParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetLineWidthParams)
}
SetLineWidthParams::SetLineWidthParams(const SetLineWidthParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  linewidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_linewidth()) {
    linewidth_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linewidth(),
      GetArena());
  }
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetLineWidthParams)
}

void SetLineWidthParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLineWidthParams_electron_5fsdk_2eproto.base);
  linewidth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  viewtype_ = 0;
}

SetLineWidthParams::~SetLineWidthParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetLineWidthParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetLineWidthParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  linewidth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetLineWidthParams::ArenaDtor(void* object) {
  SetLineWidthParams* _this = reinterpret_cast< SetLineWidthParams* >(object);
  (void)_this;
}
void SetLineWidthParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLineWidthParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLineWidthParams& SetLineWidthParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLineWidthParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetLineWidthParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetLineWidthParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    linewidth_.ClearNonDefaultToEmpty();
  }
  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetLineWidthParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lineWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_linewidth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLineWidthParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetLineWidthParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  // optional string lineWidth = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_linewidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetLineWidthParams)
  return target;
}

size_t SetLineWidthParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetLineWidthParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lineWidth = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linewidth());
    }

    // optional int32 viewType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_viewtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLineWidthParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetLineWidthParams*>(
      &from));
}

void SetLineWidthParams::MergeFrom(const SetLineWidthParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetLineWidthParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_linewidth(from._internal_linewidth());
    }
    if (cached_has_bits & 0x00000002u) {
      viewtype_ = from.viewtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetLineWidthParams::CopyFrom(const SetLineWidthParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetLineWidthParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineWidthParams::IsInitialized() const {
  return true;
}

void SetLineWidthParams::InternalSwap(SetLineWidthParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  linewidth_.Swap(&other->linewidth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(viewtype_, other->viewtype_);
}

std::string SetLineWidthParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetLineWidthParams";
}


// ===================================================================

void UndoParams::InitAsDefaultInstance() {
}
class UndoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UndoParams::UndoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UndoParams)
}
UndoParams::UndoParams(const UndoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UndoParams)
}

void UndoParams::SharedCtor() {
  viewtype_ = 0;
}

UndoParams::~UndoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UndoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UndoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UndoParams::ArenaDtor(void* object) {
  UndoParams* _this = reinterpret_cast< UndoParams* >(object);
  (void)_this;
}
void UndoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndoParams& UndoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void UndoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UndoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UndoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UndoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UndoParams)
  return target;
}

size_t UndoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UndoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UndoParams*>(
      &from));
}

void UndoParams::MergeFrom(const UndoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UndoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_viewtype()) {
    _internal_set_viewtype(from._internal_viewtype());
  }
}

void UndoParams::CopyFrom(const UndoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UndoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoParams::IsInitialized() const {
  return true;
}

void UndoParams::InternalSwap(UndoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(viewtype_, other->viewtype_);
}

std::string UndoParams::GetTypeName() const {
  return "com.electron.sdk.proto.UndoParams";
}


// ===================================================================

void RedoParams::InitAsDefaultInstance() {
}
class RedoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedoParams>()._has_bits_);
  static void set_has_viewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedoParams::RedoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedoParams)
}
RedoParams::RedoParams(const RedoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  viewtype_ = from.viewtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedoParams)
}

void RedoParams::SharedCtor() {
  viewtype_ = 0;
}

RedoParams::~RedoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedoParams::ArenaDtor(void* object) {
  RedoParams* _this = reinterpret_cast< RedoParams* >(object);
  (void)_this;
}
void RedoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedoParams& RedoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 viewType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewtype(&has_bits);
          viewtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 viewType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_viewtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedoParams)
  return target;
}

size_t RedoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 viewType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedoParams*>(
      &from));
}

void RedoParams::MergeFrom(const RedoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_viewtype()) {
    _internal_set_viewtype(from._internal_viewtype());
  }
}

void RedoParams::CopyFrom(const RedoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedoParams::IsInitialized() const {
  return true;
}

void RedoParams::InternalSwap(RedoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(viewtype_, other->viewtype_);
}

std::string RedoParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedoParams";
}


// ===================================================================

void MuteAudioParams::InitAsDefaultInstance() {
}
class MuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MuteAudioParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowunmutebyself(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MuteAudioParams::MuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MuteAudioParams)
}
MuteAudioParams::MuteAudioParams(const MuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowunmutebyself_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(allowunmutebyself_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MuteAudioParams)
}

void MuteAudioParams::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowunmutebyself_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(allowunmutebyself_));
}

MuteAudioParams::~MuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MuteAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MuteAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MuteAudioParams::ArenaDtor(void* object) {
  MuteAudioParams* _this = reinterpret_cast< MuteAudioParams* >(object);
  (void)_this;
}
void MuteAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MuteAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteAudioParams& MuteAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void MuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MuteAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowunmutebyself_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(allowunmutebyself_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MuteAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allowUnmuteBySelf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allowunmutebyself(&has_bits);
          allowunmutebyself_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MuteAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // optional bool allowUnmuteBySelf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allowunmutebyself(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MuteAudioParams)
  return target;
}

size_t MuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MuteAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

    // optional bool allowUnmuteBySelf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MuteAudioParams*>(
      &from));
}

void MuteAudioParams::MergeFrom(const MuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MuteAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowunmutebyself_ = from.allowunmutebyself_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MuteAudioParams::CopyFrom(const MuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteAudioParams::IsInitialized() const {
  return true;
}

void MuteAudioParams::InternalSwap(MuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteAudioParams, allowunmutebyself_)
      + sizeof(MuteAudioParams::allowunmutebyself_)
      - PROTOBUF_FIELD_OFFSET(MuteAudioParams, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

std::string MuteAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.MuteAudioParams";
}


// ===================================================================

void UnmuteAudioParams::InitAsDefaultInstance() {
}
class UnmuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnmuteAudioParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnmuteAudioParams::UnmuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnmuteAudioParams)
}
UnmuteAudioParams::UnmuteAudioParams(const UnmuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnmuteAudioParams)
}

void UnmuteAudioParams::SharedCtor() {
  userid_ = 0;
}

UnmuteAudioParams::~UnmuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnmuteAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnmuteAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnmuteAudioParams::ArenaDtor(void* object) {
  UnmuteAudioParams* _this = reinterpret_cast< UnmuteAudioParams* >(object);
  (void)_this;
}
void UnmuteAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnmuteAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnmuteAudioParams& UnmuteAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnmuteAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void UnmuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnmuteAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnmuteAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnmuteAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnmuteAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnmuteAudioParams)
  return target;
}

size_t UnmuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnmuteAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnmuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnmuteAudioParams*>(
      &from));
}

void UnmuteAudioParams::MergeFrom(const UnmuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnmuteAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void UnmuteAudioParams::CopyFrom(const UnmuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnmuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteAudioParams::IsInitialized() const {
  return true;
}

void UnmuteAudioParams::InternalSwap(UnmuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string UnmuteAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnmuteAudioParams";
}


// ===================================================================

void EnablePlayChimeWhenEnterOrExitParams::InitAsDefaultInstance() {
}
class EnablePlayChimeWhenEnterOrExitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnablePlayChimeWhenEnterOrExitParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnablePlayChimeWhenEnterOrExitParams::EnablePlayChimeWhenEnterOrExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
}
EnablePlayChimeWhenEnterOrExitParams::EnablePlayChimeWhenEnterOrExitParams(const EnablePlayChimeWhenEnterOrExitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
}

void EnablePlayChimeWhenEnterOrExitParams::SharedCtor() {
  benable_ = false;
}

EnablePlayChimeWhenEnterOrExitParams::~EnablePlayChimeWhenEnterOrExitParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnablePlayChimeWhenEnterOrExitParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnablePlayChimeWhenEnterOrExitParams::ArenaDtor(void* object) {
  EnablePlayChimeWhenEnterOrExitParams* _this = reinterpret_cast< EnablePlayChimeWhenEnterOrExitParams* >(object);
  (void)_this;
}
void EnablePlayChimeWhenEnterOrExitParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnablePlayChimeWhenEnterOrExitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnablePlayChimeWhenEnterOrExitParams& EnablePlayChimeWhenEnterOrExitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnablePlayChimeWhenEnterOrExitParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnablePlayChimeWhenEnterOrExitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnablePlayChimeWhenEnterOrExitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnablePlayChimeWhenEnterOrExitParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  return target;
}

size_t EnablePlayChimeWhenEnterOrExitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePlayChimeWhenEnterOrExitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnablePlayChimeWhenEnterOrExitParams*>(
      &from));
}

void EnablePlayChimeWhenEnterOrExitParams::MergeFrom(const EnablePlayChimeWhenEnterOrExitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnablePlayChimeWhenEnterOrExitParams::CopyFrom(const EnablePlayChimeWhenEnterOrExitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePlayChimeWhenEnterOrExitParams::IsInitialized() const {
  return true;
}

void EnablePlayChimeWhenEnterOrExitParams::InternalSwap(EnablePlayChimeWhenEnterOrExitParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnablePlayChimeWhenEnterOrExitParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnablePlayChimeWhenEnterOrExitParams";
}


// ===================================================================

void EnableInviteButtonOnMeetingUIParams::InitAsDefaultInstance() {
}
class EnableInviteButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInviteButtonOnMeetingUIParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInviteButtonOnMeetingUIParams::EnableInviteButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
}
EnableInviteButtonOnMeetingUIParams::EnableInviteButtonOnMeetingUIParams(const EnableInviteButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
}

void EnableInviteButtonOnMeetingUIParams::SharedCtor() {
  benable_ = false;
}

EnableInviteButtonOnMeetingUIParams::~EnableInviteButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableInviteButtonOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableInviteButtonOnMeetingUIParams::ArenaDtor(void* object) {
  EnableInviteButtonOnMeetingUIParams* _this = reinterpret_cast< EnableInviteButtonOnMeetingUIParams* >(object);
  (void)_this;
}
void EnableInviteButtonOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableInviteButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableInviteButtonOnMeetingUIParams& EnableInviteButtonOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableInviteButtonOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableInviteButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInviteButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableInviteButtonOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  return target;
}

size_t EnableInviteButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInviteButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableInviteButtonOnMeetingUIParams*>(
      &from));
}

void EnableInviteButtonOnMeetingUIParams::MergeFrom(const EnableInviteButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableInviteButtonOnMeetingUIParams::CopyFrom(const EnableInviteButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInviteButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableInviteButtonOnMeetingUIParams::InternalSwap(EnableInviteButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableInviteButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInviteButtonOnMeetingUIParams";
}


// ===================================================================

void SetFloatVideoPosParams::InitAsDefaultInstance() {
}
class SetFloatVideoPosParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetFloatVideoPosParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SetFloatVideoPosParams::SetFloatVideoPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetFloatVideoPosParams)
}
SetFloatVideoPosParams::SetFloatVideoPosParams(const SetFloatVideoPosParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hselfwnd()) {
    hselfwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hselfwnd(),
      GetArena());
  }
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetFloatVideoPosParams)
}

void SetFloatVideoPosParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetFloatVideoPosParams_electron_5fsdk_2eproto.base);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetFloatVideoPosParams::~SetFloatVideoPosParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetFloatVideoPosParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetFloatVideoPosParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hselfwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetFloatVideoPosParams::ArenaDtor(void* object) {
  SetFloatVideoPosParams* _this = reinterpret_cast< SetFloatVideoPosParams* >(object);
  (void)_this;
}
void SetFloatVideoPosParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFloatVideoPosParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetFloatVideoPosParams& SetFloatVideoPosParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetFloatVideoPosParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetFloatVideoPosParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hparent_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetFloatVideoPosParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hSelfWnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hParent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFloatVideoPosParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_left(), target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top(), target);
  }

  // optional string hSelfWnd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hselfwnd(), target);
  }

  // optional string hParent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetFloatVideoPosParams)
  return target;
}

size_t SetFloatVideoPosParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

    // optional string hSelfWnd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hselfwnd());
    }

    // optional string hParent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFloatVideoPosParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetFloatVideoPosParams*>(
      &from));
}

void SetFloatVideoPosParams::MergeFrom(const SetFloatVideoPosParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hparent(from._internal_hparent());
    }
  }
}

void SetFloatVideoPosParams::CopyFrom(const SetFloatVideoPosParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetFloatVideoPosParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFloatVideoPosParams::IsInitialized() const {
  return true;
}

void SetFloatVideoPosParams::InternalSwap(SetFloatVideoPosParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hselfwnd_.Swap(&other->hselfwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SetFloatVideoPosParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetFloatVideoPosParams";
}


// ===================================================================

void SetBottomFloatToolBarWndVisibilityParams::InitAsDefaultInstance() {
}
class SetBottomFloatToolBarWndVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetBottomFloatToolBarWndVisibilityParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetBottomFloatToolBarWndVisibilityParams::SetBottomFloatToolBarWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
}
SetBottomFloatToolBarWndVisibilityParams::SetBottomFloatToolBarWndVisibilityParams(const SetBottomFloatToolBarWndVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
}

void SetBottomFloatToolBarWndVisibilityParams::SharedCtor() {
  bshow_ = false;
}

SetBottomFloatToolBarWndVisibilityParams::~SetBottomFloatToolBarWndVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetBottomFloatToolBarWndVisibilityParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetBottomFloatToolBarWndVisibilityParams::ArenaDtor(void* object) {
  SetBottomFloatToolBarWndVisibilityParams* _this = reinterpret_cast< SetBottomFloatToolBarWndVisibilityParams* >(object);
  (void)_this;
}
void SetBottomFloatToolBarWndVisibilityParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBottomFloatToolBarWndVisibilityParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetBottomFloatToolBarWndVisibilityParams& SetBottomFloatToolBarWndVisibilityParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetBottomFloatToolBarWndVisibilityParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetBottomFloatToolBarWndVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetBottomFloatToolBarWndVisibilityParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBottomFloatToolBarWndVisibilityParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  return target;
}

size_t SetBottomFloatToolBarWndVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBottomFloatToolBarWndVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetBottomFloatToolBarWndVisibilityParams*>(
      &from));
}

void SetBottomFloatToolBarWndVisibilityParams::MergeFrom(const SetBottomFloatToolBarWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetBottomFloatToolBarWndVisibilityParams::CopyFrom(const SetBottomFloatToolBarWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBottomFloatToolBarWndVisibilityParams::IsInitialized() const {
  return true;
}

void SetBottomFloatToolBarWndVisibilityParams::InternalSwap(SetBottomFloatToolBarWndVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetBottomFloatToolBarWndVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetBottomFloatToolBarWndVisibilityParams";
}


// ===================================================================

void SetSharingToolBarVisibilityParams::InitAsDefaultInstance() {
}
class SetSharingToolBarVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSharingToolBarVisibilityParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSharingToolBarVisibilityParams::SetSharingToolBarVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
}
SetSharingToolBarVisibilityParams::SetSharingToolBarVisibilityParams(const SetSharingToolBarVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
}

void SetSharingToolBarVisibilityParams::SharedCtor() {
  bshow_ = false;
}

SetSharingToolBarVisibilityParams::~SetSharingToolBarVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetSharingToolBarVisibilityParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetSharingToolBarVisibilityParams::ArenaDtor(void* object) {
  SetSharingToolBarVisibilityParams* _this = reinterpret_cast< SetSharingToolBarVisibilityParams* >(object);
  (void)_this;
}
void SetSharingToolBarVisibilityParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSharingToolBarVisibilityParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSharingToolBarVisibilityParams& SetSharingToolBarVisibilityParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSharingToolBarVisibilityParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetSharingToolBarVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSharingToolBarVisibilityParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSharingToolBarVisibilityParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  return target;
}

size_t SetSharingToolBarVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSharingToolBarVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetSharingToolBarVisibilityParams*>(
      &from));
}

void SetSharingToolBarVisibilityParams::MergeFrom(const SetSharingToolBarVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetSharingToolBarVisibilityParams::CopyFrom(const SetSharingToolBarVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetSharingToolBarVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSharingToolBarVisibilityParams::IsInitialized() const {
  return true;
}

void SetSharingToolBarVisibilityParams::InternalSwap(SetSharingToolBarVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetSharingToolBarVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetSharingToolBarVisibilityParams";
}


// ===================================================================

void SetDirectShareMonitorIDParams::InitAsDefaultInstance() {
}
class SetDirectShareMonitorIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetDirectShareMonitorIDParams>()._has_bits_);
  static void set_has_monitorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetDirectShareMonitorIDParams::SetDirectShareMonitorIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
}
SetDirectShareMonitorIDParams::SetDirectShareMonitorIDParams(const SetDirectShareMonitorIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  monitorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_monitorid()) {
    monitorid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_monitorid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
}

void SetDirectShareMonitorIDParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDirectShareMonitorIDParams_electron_5fsdk_2eproto.base);
  monitorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetDirectShareMonitorIDParams::~SetDirectShareMonitorIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetDirectShareMonitorIDParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  monitorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDirectShareMonitorIDParams::ArenaDtor(void* object) {
  SetDirectShareMonitorIDParams* _this = reinterpret_cast< SetDirectShareMonitorIDParams* >(object);
  (void)_this;
}
void SetDirectShareMonitorIDParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDirectShareMonitorIDParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDirectShareMonitorIDParams& SetDirectShareMonitorIDParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDirectShareMonitorIDParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetDirectShareMonitorIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    monitorid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetDirectShareMonitorIDParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string monitorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_monitorid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDirectShareMonitorIDParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string monitorID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_monitorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  return target;
}

size_t SetDirectShareMonitorIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string monitorID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_monitorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDirectShareMonitorIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetDirectShareMonitorIDParams*>(
      &from));
}

void SetDirectShareMonitorIDParams::MergeFrom(const SetDirectShareMonitorIDParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monitorid()) {
    _internal_set_monitorid(from._internal_monitorid());
  }
}

void SetDirectShareMonitorIDParams::CopyFrom(const SetDirectShareMonitorIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetDirectShareMonitorIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDirectShareMonitorIDParams::IsInitialized() const {
  return true;
}

void SetDirectShareMonitorIDParams::InternalSwap(SetDirectShareMonitorIDParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  monitorid_.Swap(&other->monitorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SetDirectShareMonitorIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetDirectShareMonitorIDParams";
}


// ===================================================================

void SetMeetingUIPosParams::InitAsDefaultInstance() {
}
class SetMeetingUIPosParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMeetingUIPosParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hselfwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hparent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SetMeetingUIPosParams::SetMeetingUIPosParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMeetingUIPosParams)
}
SetMeetingUIPosParams::SetMeetingUIPosParams(const SetMeetingUIPosParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_left()) {
    left_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_left(),
      GetArena());
  }
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top()) {
    top_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hselfwnd()) {
    hselfwnd_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hselfwnd(),
      GetArena());
  }
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hparent()) {
    hparent_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hparent(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMeetingUIPosParams)
}

void SetMeetingUIPosParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMeetingUIPosParams_electron_5fsdk_2eproto.base);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hselfwnd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetMeetingUIPosParams::~SetMeetingUIPosParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMeetingUIPosParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMeetingUIPosParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hselfwnd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hparent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMeetingUIPosParams::ArenaDtor(void* object) {
  SetMeetingUIPosParams* _this = reinterpret_cast< SetMeetingUIPosParams* >(object);
  (void)_this;
}
void SetMeetingUIPosParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMeetingUIPosParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMeetingUIPosParams& SetMeetingUIPosParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMeetingUIPosParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetMeetingUIPosParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hselfwnd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hparent_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMeetingUIPosParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hSelfWnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hselfwnd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hParent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hparent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMeetingUIPosParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_left(), target);
  }

  // optional string top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top(), target);
  }

  // optional string hSelfWnd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hselfwnd(), target);
  }

  // optional string hParent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMeetingUIPosParams)
  return target;
}

size_t SetMeetingUIPosParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_left());
    }

    // optional string top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top());
    }

    // optional string hSelfWnd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hselfwnd());
    }

    // optional string hParent = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hparent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMeetingUIPosParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMeetingUIPosParams*>(
      &from));
}

void SetMeetingUIPosParams::MergeFrom(const SetMeetingUIPosParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top(from._internal_top());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hselfwnd(from._internal_hselfwnd());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hparent(from._internal_hparent());
    }
  }
}

void SetMeetingUIPosParams::CopyFrom(const SetMeetingUIPosParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMeetingUIPosParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeetingUIPosParams::IsInitialized() const {
  return true;
}

void SetMeetingUIPosParams::InternalSwap(SetMeetingUIPosParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_.Swap(&other->left_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hselfwnd_.Swap(&other->hselfwnd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hparent_.Swap(&other->hparent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SetMeetingUIPosParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMeetingUIPosParams";
}


// ===================================================================

void DisableWaitingForHostDialogParams::InitAsDefaultInstance() {
}
class DisableWaitingForHostDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableWaitingForHostDialogParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableWaitingForHostDialogParams::DisableWaitingForHostDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
}
DisableWaitingForHostDialogParams::DisableWaitingForHostDialogParams(const DisableWaitingForHostDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
}

void DisableWaitingForHostDialogParams::SharedCtor() {
  bdisable_ = false;
}

DisableWaitingForHostDialogParams::~DisableWaitingForHostDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableWaitingForHostDialogParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableWaitingForHostDialogParams::ArenaDtor(void* object) {
  DisableWaitingForHostDialogParams* _this = reinterpret_cast< DisableWaitingForHostDialogParams* >(object);
  (void)_this;
}
void DisableWaitingForHostDialogParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableWaitingForHostDialogParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableWaitingForHostDialogParams& DisableWaitingForHostDialogParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableWaitingForHostDialogParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableWaitingForHostDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableWaitingForHostDialogParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableWaitingForHostDialogParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  return target;
}

size_t DisableWaitingForHostDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableWaitingForHostDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableWaitingForHostDialogParams*>(
      &from));
}

void DisableWaitingForHostDialogParams::MergeFrom(const DisableWaitingForHostDialogParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableWaitingForHostDialogParams::CopyFrom(const DisableWaitingForHostDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableWaitingForHostDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableWaitingForHostDialogParams::IsInitialized() const {
  return true;
}

void DisableWaitingForHostDialogParams::InternalSwap(DisableWaitingForHostDialogParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableWaitingForHostDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableWaitingForHostDialogParams";
}


// ===================================================================

void DisablePopupMeetingWrongPSWDlgParams::InitAsDefaultInstance() {
}
class DisablePopupMeetingWrongPSWDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisablePopupMeetingWrongPSWDlgParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisablePopupMeetingWrongPSWDlgParams::DisablePopupMeetingWrongPSWDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
}
DisablePopupMeetingWrongPSWDlgParams::DisablePopupMeetingWrongPSWDlgParams(const DisablePopupMeetingWrongPSWDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
}

void DisablePopupMeetingWrongPSWDlgParams::SharedCtor() {
  bdisable_ = false;
}

DisablePopupMeetingWrongPSWDlgParams::~DisablePopupMeetingWrongPSWDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisablePopupMeetingWrongPSWDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisablePopupMeetingWrongPSWDlgParams::ArenaDtor(void* object) {
  DisablePopupMeetingWrongPSWDlgParams* _this = reinterpret_cast< DisablePopupMeetingWrongPSWDlgParams* >(object);
  (void)_this;
}
void DisablePopupMeetingWrongPSWDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisablePopupMeetingWrongPSWDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisablePopupMeetingWrongPSWDlgParams& DisablePopupMeetingWrongPSWDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisablePopupMeetingWrongPSWDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisablePopupMeetingWrongPSWDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisablePopupMeetingWrongPSWDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisablePopupMeetingWrongPSWDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  return target;
}

size_t DisablePopupMeetingWrongPSWDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisablePopupMeetingWrongPSWDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisablePopupMeetingWrongPSWDlgParams*>(
      &from));
}

void DisablePopupMeetingWrongPSWDlgParams::MergeFrom(const DisablePopupMeetingWrongPSWDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisablePopupMeetingWrongPSWDlgParams::CopyFrom(const DisablePopupMeetingWrongPSWDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisablePopupMeetingWrongPSWDlgParams::IsInitialized() const {
  return true;
}

void DisablePopupMeetingWrongPSWDlgParams::InternalSwap(DisablePopupMeetingWrongPSWDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisablePopupMeetingWrongPSWDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisablePopupMeetingWrongPSWDlgParams";
}


// ===================================================================

void EnableAutoEndOtherMeetingWhenStartMeetingParams::InitAsDefaultInstance() {
}
class EnableAutoEndOtherMeetingWhenStartMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoEndOtherMeetingWhenStartMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoEndOtherMeetingWhenStartMeetingParams::EnableAutoEndOtherMeetingWhenStartMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
}
EnableAutoEndOtherMeetingWhenStartMeetingParams::EnableAutoEndOtherMeetingWhenStartMeetingParams(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableAutoEndOtherMeetingWhenStartMeetingParams::~EnableAutoEndOtherMeetingWhenStartMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::ArenaDtor(void* object) {
  EnableAutoEndOtherMeetingWhenStartMeetingParams* _this = reinterpret_cast< EnableAutoEndOtherMeetingWhenStartMeetingParams* >(object);
  (void)_this;
}
void EnableAutoEndOtherMeetingWhenStartMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoEndOtherMeetingWhenStartMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoEndOtherMeetingWhenStartMeetingParams& EnableAutoEndOtherMeetingWhenStartMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoEndOtherMeetingWhenStartMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoEndOtherMeetingWhenStartMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoEndOtherMeetingWhenStartMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoEndOtherMeetingWhenStartMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  return target;
}

size_t EnableAutoEndOtherMeetingWhenStartMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoEndOtherMeetingWhenStartMeetingParams*>(
      &from));
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::MergeFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::CopyFrom(const EnableAutoEndOtherMeetingWhenStartMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoEndOtherMeetingWhenStartMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoEndOtherMeetingWhenStartMeetingParams::InternalSwap(EnableAutoEndOtherMeetingWhenStartMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoEndOtherMeetingWhenStartMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoEndOtherMeetingWhenStartMeetingParams";
}


// ===================================================================

void EnableLButtonDBClick4SwitchFullScreenModeParams::InitAsDefaultInstance() {
}
class EnableLButtonDBClick4SwitchFullScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLButtonDBClick4SwitchFullScreenModeParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLButtonDBClick4SwitchFullScreenModeParams::EnableLButtonDBClick4SwitchFullScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
}
EnableLButtonDBClick4SwitchFullScreenModeParams::EnableLButtonDBClick4SwitchFullScreenModeParams(const EnableLButtonDBClick4SwitchFullScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::SharedCtor() {
  benable_ = false;
}

EnableLButtonDBClick4SwitchFullScreenModeParams::~EnableLButtonDBClick4SwitchFullScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::ArenaDtor(void* object) {
  EnableLButtonDBClick4SwitchFullScreenModeParams* _this = reinterpret_cast< EnableLButtonDBClick4SwitchFullScreenModeParams* >(object);
  (void)_this;
}
void EnableLButtonDBClick4SwitchFullScreenModeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableLButtonDBClick4SwitchFullScreenModeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableLButtonDBClick4SwitchFullScreenModeParams& EnableLButtonDBClick4SwitchFullScreenModeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableLButtonDBClick4SwitchFullScreenModeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableLButtonDBClick4SwitchFullScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLButtonDBClick4SwitchFullScreenModeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableLButtonDBClick4SwitchFullScreenModeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  return target;
}

size_t EnableLButtonDBClick4SwitchFullScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableLButtonDBClick4SwitchFullScreenModeParams*>(
      &from));
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::MergeFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::CopyFrom(const EnableLButtonDBClick4SwitchFullScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLButtonDBClick4SwitchFullScreenModeParams::IsInitialized() const {
  return true;
}

void EnableLButtonDBClick4SwitchFullScreenModeParams::InternalSwap(EnableLButtonDBClick4SwitchFullScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableLButtonDBClick4SwitchFullScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLButtonDBClick4SwitchFullScreenModeParams";
}


// ===================================================================

void SetFloatVideoWndVisibilityParams::InitAsDefaultInstance() {
}
class SetFloatVideoWndVisibilityParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetFloatVideoWndVisibilityParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetFloatVideoWndVisibilityParams::SetFloatVideoWndVisibilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
}
SetFloatVideoWndVisibilityParams::SetFloatVideoWndVisibilityParams(const SetFloatVideoWndVisibilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
}

void SetFloatVideoWndVisibilityParams::SharedCtor() {
  bshow_ = false;
}

SetFloatVideoWndVisibilityParams::~SetFloatVideoWndVisibilityParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetFloatVideoWndVisibilityParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetFloatVideoWndVisibilityParams::ArenaDtor(void* object) {
  SetFloatVideoWndVisibilityParams* _this = reinterpret_cast< SetFloatVideoWndVisibilityParams* >(object);
  (void)_this;
}
void SetFloatVideoWndVisibilityParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFloatVideoWndVisibilityParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetFloatVideoWndVisibilityParams& SetFloatVideoWndVisibilityParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetFloatVideoWndVisibilityParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetFloatVideoWndVisibilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetFloatVideoWndVisibilityParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFloatVideoWndVisibilityParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  return target;
}

size_t SetFloatVideoWndVisibilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFloatVideoWndVisibilityParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetFloatVideoWndVisibilityParams*>(
      &from));
}

void SetFloatVideoWndVisibilityParams::MergeFrom(const SetFloatVideoWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetFloatVideoWndVisibilityParams::CopyFrom(const SetFloatVideoWndVisibilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetFloatVideoWndVisibilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFloatVideoWndVisibilityParams::IsInitialized() const {
  return true;
}

void SetFloatVideoWndVisibilityParams::InternalSwap(SetFloatVideoWndVisibilityParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetFloatVideoWndVisibilityParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetFloatVideoWndVisibilityParams";
}


// ===================================================================

void PrePopulateWebinarRegistrationInfoParams::InitAsDefaultInstance() {
}
class PrePopulateWebinarRegistrationInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PrePopulateWebinarRegistrationInfoParams>()._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PrePopulateWebinarRegistrationInfoParams::PrePopulateWebinarRegistrationInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
}
PrePopulateWebinarRegistrationInfoParams::PrePopulateWebinarRegistrationInfoParams(const PrePopulateWebinarRegistrationInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
}

void PrePopulateWebinarRegistrationInfoParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrePopulateWebinarRegistrationInfoParams_electron_5fsdk_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrePopulateWebinarRegistrationInfoParams::~PrePopulateWebinarRegistrationInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PrePopulateWebinarRegistrationInfoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrePopulateWebinarRegistrationInfoParams::ArenaDtor(void* object) {
  PrePopulateWebinarRegistrationInfoParams* _this = reinterpret_cast< PrePopulateWebinarRegistrationInfoParams* >(object);
  (void)_this;
}
void PrePopulateWebinarRegistrationInfoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrePopulateWebinarRegistrationInfoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrePopulateWebinarRegistrationInfoParams& PrePopulateWebinarRegistrationInfoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrePopulateWebinarRegistrationInfoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void PrePopulateWebinarRegistrationInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrePopulateWebinarRegistrationInfoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrePopulateWebinarRegistrationInfoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // optional string userName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  return target;
}

size_t PrePopulateWebinarRegistrationInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string userName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrePopulateWebinarRegistrationInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PrePopulateWebinarRegistrationInfoParams*>(
      &from));
}

void PrePopulateWebinarRegistrationInfoParams::MergeFrom(const PrePopulateWebinarRegistrationInfoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_username(from._internal_username());
    }
  }
}

void PrePopulateWebinarRegistrationInfoParams::CopyFrom(const PrePopulateWebinarRegistrationInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrePopulateWebinarRegistrationInfoParams::IsInitialized() const {
  return true;
}

void PrePopulateWebinarRegistrationInfoParams::InternalSwap(PrePopulateWebinarRegistrationInfoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string PrePopulateWebinarRegistrationInfoParams::GetTypeName() const {
  return "com.electron.sdk.proto.PrePopulateWebinarRegistrationInfoParams";
}


// ===================================================================

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::InitAsDefaultInstance() {
}
class EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
}
EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SharedCtor() {
  benable_ = false;
}

EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::~EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::ArenaDtor(void* object) {
  EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* _this = reinterpret_cast< EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* >(object);
  (void)_this;
}
void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  return target;
}

size_t EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams*>(
      &from));
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::MergeFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::CopyFrom(const EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::InternalSwap(EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams";
}


// ===================================================================

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::InitAsDefaultInstance() {
}
class EnableAutoAdjustMicVolumeWhenJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustMicVolumeWhenJoinAudioParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustMicVolumeWhenJoinAudioParams::EnableAutoAdjustMicVolumeWhenJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
}
EnableAutoAdjustMicVolumeWhenJoinAudioParams::EnableAutoAdjustMicVolumeWhenJoinAudioParams(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SharedCtor() {
  benable_ = false;
}

EnableAutoAdjustMicVolumeWhenJoinAudioParams::~EnableAutoAdjustMicVolumeWhenJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::ArenaDtor(void* object) {
  EnableAutoAdjustMicVolumeWhenJoinAudioParams* _this = reinterpret_cast< EnableAutoAdjustMicVolumeWhenJoinAudioParams* >(object);
  (void)_this;
}
void EnableAutoAdjustMicVolumeWhenJoinAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoAdjustMicVolumeWhenJoinAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoAdjustMicVolumeWhenJoinAudioParams& EnableAutoAdjustMicVolumeWhenJoinAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoAdjustMicVolumeWhenJoinAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoAdjustMicVolumeWhenJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustMicVolumeWhenJoinAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoAdjustMicVolumeWhenJoinAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  return target;
}

size_t EnableAutoAdjustMicVolumeWhenJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoAdjustMicVolumeWhenJoinAudioParams*>(
      &from));
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::MergeFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::CopyFrom(const EnableAutoAdjustMicVolumeWhenJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustMicVolumeWhenJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustMicVolumeWhenJoinAudioParams::InternalSwap(EnableAutoAdjustMicVolumeWhenJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoAdjustMicVolumeWhenJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustMicVolumeWhenJoinAudioParams";
}


// ===================================================================

void ConfigDSCPParams::InitAsDefaultInstance() {
}
class ConfigDSCPParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigDSCPParams>()._has_bits_);
  static void set_has_dscpaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dscpvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_breset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConfigDSCPParams::ConfigDSCPParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfigDSCPParams)
}
ConfigDSCPParams::ConfigDSCPParams(const ConfigDSCPParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dscpaudio_, &from.dscpaudio_,
    static_cast<size_t>(reinterpret_cast<char*>(&breset_) -
    reinterpret_cast<char*>(&dscpaudio_)) + sizeof(breset_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfigDSCPParams)
}

void ConfigDSCPParams::SharedCtor() {
  ::memset(&dscpaudio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breset_) -
      reinterpret_cast<char*>(&dscpaudio_)) + sizeof(breset_));
}

ConfigDSCPParams::~ConfigDSCPParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfigDSCPParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ConfigDSCPParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfigDSCPParams::ArenaDtor(void* object) {
  ConfigDSCPParams* _this = reinterpret_cast< ConfigDSCPParams* >(object);
  (void)_this;
}
void ConfigDSCPParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigDSCPParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigDSCPParams& ConfigDSCPParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigDSCPParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ConfigDSCPParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfigDSCPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&dscpaudio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&breset_) -
        reinterpret_cast<char*>(&dscpaudio_)) + sizeof(breset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfigDSCPParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dscpAudio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dscpaudio(&has_bits);
          dscpaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dscpVideo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dscpvideo(&has_bits);
          dscpvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bReset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_breset(&has_bits);
          breset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigDSCPParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfigDSCPParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dscpAudio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dscpaudio(), target);
  }

  // optional int32 dscpVideo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dscpvideo(), target);
  }

  // optional bool bReset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_breset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfigDSCPParams)
  return target;
}

size_t ConfigDSCPParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfigDSCPParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 dscpAudio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dscpaudio());
    }

    // optional int32 dscpVideo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dscpvideo());
    }

    // optional bool bReset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDSCPParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConfigDSCPParams*>(
      &from));
}

void ConfigDSCPParams::MergeFrom(const ConfigDSCPParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfigDSCPParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dscpaudio_ = from.dscpaudio_;
    }
    if (cached_has_bits & 0x00000002u) {
      dscpvideo_ = from.dscpvideo_;
    }
    if (cached_has_bits & 0x00000004u) {
      breset_ = from.breset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDSCPParams::CopyFrom(const ConfigDSCPParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfigDSCPParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDSCPParams::IsInitialized() const {
  return true;
}

void ConfigDSCPParams::InternalSwap(ConfigDSCPParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigDSCPParams, breset_)
      + sizeof(ConfigDSCPParams::breset_)
      - PROTOBUF_FIELD_OFFSET(ConfigDSCPParams, dscpaudio_)>(
          reinterpret_cast<char*>(&dscpaudio_),
          reinterpret_cast<char*>(&other->dscpaudio_));
}

std::string ConfigDSCPParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfigDSCPParams";
}


// ===================================================================

void EnableHIdeFullPhoneNumber4PureCallinUserParams::InitAsDefaultInstance() {
}
class EnableHIdeFullPhoneNumber4PureCallinUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHIdeFullPhoneNumber4PureCallinUserParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHIdeFullPhoneNumber4PureCallinUserParams::EnableHIdeFullPhoneNumber4PureCallinUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
}
EnableHIdeFullPhoneNumber4PureCallinUserParams::EnableHIdeFullPhoneNumber4PureCallinUserParams(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::SharedCtor() {
  benable_ = false;
}

EnableHIdeFullPhoneNumber4PureCallinUserParams::~EnableHIdeFullPhoneNumber4PureCallinUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::ArenaDtor(void* object) {
  EnableHIdeFullPhoneNumber4PureCallinUserParams* _this = reinterpret_cast< EnableHIdeFullPhoneNumber4PureCallinUserParams* >(object);
  (void)_this;
}
void EnableHIdeFullPhoneNumber4PureCallinUserParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableHIdeFullPhoneNumber4PureCallinUserParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableHIdeFullPhoneNumber4PureCallinUserParams& EnableHIdeFullPhoneNumber4PureCallinUserParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableHIdeFullPhoneNumber4PureCallinUserParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableHIdeFullPhoneNumber4PureCallinUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHIdeFullPhoneNumber4PureCallinUserParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableHIdeFullPhoneNumber4PureCallinUserParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  return target;
}

size_t EnableHIdeFullPhoneNumber4PureCallinUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableHIdeFullPhoneNumber4PureCallinUserParams*>(
      &from));
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::MergeFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::CopyFrom(const EnableHIdeFullPhoneNumber4PureCallinUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHIdeFullPhoneNumber4PureCallinUserParams::IsInitialized() const {
  return true;
}

void EnableHIdeFullPhoneNumber4PureCallinUserParams::InternalSwap(EnableHIdeFullPhoneNumber4PureCallinUserParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableHIdeFullPhoneNumber4PureCallinUserParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHIdeFullPhoneNumber4PureCallinUserParams";
}


// ===================================================================

void EnableShareIOSDeviceParams::InitAsDefaultInstance() {
}
class EnableShareIOSDeviceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShareIOSDeviceParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShareIOSDeviceParams::EnableShareIOSDeviceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
}
EnableShareIOSDeviceParams::EnableShareIOSDeviceParams(const EnableShareIOSDeviceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
}

void EnableShareIOSDeviceParams::SharedCtor() {
  benable_ = false;
}

EnableShareIOSDeviceParams::~EnableShareIOSDeviceParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableShareIOSDeviceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableShareIOSDeviceParams::ArenaDtor(void* object) {
  EnableShareIOSDeviceParams* _this = reinterpret_cast< EnableShareIOSDeviceParams* >(object);
  (void)_this;
}
void EnableShareIOSDeviceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableShareIOSDeviceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableShareIOSDeviceParams& EnableShareIOSDeviceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableShareIOSDeviceParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableShareIOSDeviceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShareIOSDeviceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableShareIOSDeviceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  return target;
}

size_t EnableShareIOSDeviceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShareIOSDeviceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableShareIOSDeviceParams*>(
      &from));
}

void EnableShareIOSDeviceParams::MergeFrom(const EnableShareIOSDeviceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableShareIOSDeviceParams::CopyFrom(const EnableShareIOSDeviceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShareIOSDeviceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShareIOSDeviceParams::IsInitialized() const {
  return true;
}

void EnableShareIOSDeviceParams::InternalSwap(EnableShareIOSDeviceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableShareIOSDeviceParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShareIOSDeviceParams";
}


// ===================================================================

void EnableShareWhiteBoardParams::InitAsDefaultInstance() {
}
class EnableShareWhiteBoardParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShareWhiteBoardParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShareWhiteBoardParams::EnableShareWhiteBoardParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
}
EnableShareWhiteBoardParams::EnableShareWhiteBoardParams(const EnableShareWhiteBoardParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
}

void EnableShareWhiteBoardParams::SharedCtor() {
  benable_ = false;
}

EnableShareWhiteBoardParams::~EnableShareWhiteBoardParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableShareWhiteBoardParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableShareWhiteBoardParams::ArenaDtor(void* object) {
  EnableShareWhiteBoardParams* _this = reinterpret_cast< EnableShareWhiteBoardParams* >(object);
  (void)_this;
}
void EnableShareWhiteBoardParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableShareWhiteBoardParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableShareWhiteBoardParams& EnableShareWhiteBoardParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableShareWhiteBoardParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableShareWhiteBoardParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShareWhiteBoardParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableShareWhiteBoardParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  return target;
}

size_t EnableShareWhiteBoardParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShareWhiteBoardParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableShareWhiteBoardParams*>(
      &from));
}

void EnableShareWhiteBoardParams::MergeFrom(const EnableShareWhiteBoardParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableShareWhiteBoardParams::CopyFrom(const EnableShareWhiteBoardParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShareWhiteBoardParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShareWhiteBoardParams::IsInitialized() const {
  return true;
}

void EnableShareWhiteBoardParams::InternalSwap(EnableShareWhiteBoardParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableShareWhiteBoardParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShareWhiteBoardParams";
}


// ===================================================================

void EnableLengthLimitationOfMeetingNumberParams::InitAsDefaultInstance() {
}
class EnableLengthLimitationOfMeetingNumberParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLengthLimitationOfMeetingNumberParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLengthLimitationOfMeetingNumberParams::EnableLengthLimitationOfMeetingNumberParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
}
EnableLengthLimitationOfMeetingNumberParams::EnableLengthLimitationOfMeetingNumberParams(const EnableLengthLimitationOfMeetingNumberParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
}

void EnableLengthLimitationOfMeetingNumberParams::SharedCtor() {
  benable_ = false;
}

EnableLengthLimitationOfMeetingNumberParams::~EnableLengthLimitationOfMeetingNumberParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableLengthLimitationOfMeetingNumberParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableLengthLimitationOfMeetingNumberParams::ArenaDtor(void* object) {
  EnableLengthLimitationOfMeetingNumberParams* _this = reinterpret_cast< EnableLengthLimitationOfMeetingNumberParams* >(object);
  (void)_this;
}
void EnableLengthLimitationOfMeetingNumberParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableLengthLimitationOfMeetingNumberParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableLengthLimitationOfMeetingNumberParams& EnableLengthLimitationOfMeetingNumberParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableLengthLimitationOfMeetingNumberParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableLengthLimitationOfMeetingNumberParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLengthLimitationOfMeetingNumberParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableLengthLimitationOfMeetingNumberParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  return target;
}

size_t EnableLengthLimitationOfMeetingNumberParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLengthLimitationOfMeetingNumberParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableLengthLimitationOfMeetingNumberParams*>(
      &from));
}

void EnableLengthLimitationOfMeetingNumberParams::MergeFrom(const EnableLengthLimitationOfMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableLengthLimitationOfMeetingNumberParams::CopyFrom(const EnableLengthLimitationOfMeetingNumberParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLengthLimitationOfMeetingNumberParams::IsInitialized() const {
  return true;
}

void EnableLengthLimitationOfMeetingNumberParams::InternalSwap(EnableLengthLimitationOfMeetingNumberParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableLengthLimitationOfMeetingNumberParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLengthLimitationOfMeetingNumberParams";
}


// ===================================================================

void ForceDisableMultiShareParams::InitAsDefaultInstance() {
}
class ForceDisableMultiShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ForceDisableMultiShareParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForceDisableMultiShareParams::ForceDisableMultiShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
}
ForceDisableMultiShareParams::ForceDisableMultiShareParams(const ForceDisableMultiShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
}

void ForceDisableMultiShareParams::SharedCtor() {
  bdisable_ = false;
}

ForceDisableMultiShareParams::~ForceDisableMultiShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ForceDisableMultiShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ForceDisableMultiShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ForceDisableMultiShareParams::ArenaDtor(void* object) {
  ForceDisableMultiShareParams* _this = reinterpret_cast< ForceDisableMultiShareParams* >(object);
  (void)_this;
}
void ForceDisableMultiShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForceDisableMultiShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForceDisableMultiShareParams& ForceDisableMultiShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForceDisableMultiShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ForceDisableMultiShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ForceDisableMultiShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForceDisableMultiShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ForceDisableMultiShareParams)
  return target;
}

size_t ForceDisableMultiShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForceDisableMultiShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ForceDisableMultiShareParams*>(
      &from));
}

void ForceDisableMultiShareParams::MergeFrom(const ForceDisableMultiShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void ForceDisableMultiShareParams::CopyFrom(const ForceDisableMultiShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ForceDisableMultiShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceDisableMultiShareParams::IsInitialized() const {
  return true;
}

void ForceDisableMultiShareParams::InternalSwap(ForceDisableMultiShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string ForceDisableMultiShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.ForceDisableMultiShareParams";
}


// ===================================================================

void EnableLocalRecordingConverProgressBarDialogParams::InitAsDefaultInstance() {
}
class EnableLocalRecordingConverProgressBarDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLocalRecordingConverProgressBarDialogParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLocalRecordingConverProgressBarDialogParams::EnableLocalRecordingConverProgressBarDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
}
EnableLocalRecordingConverProgressBarDialogParams::EnableLocalRecordingConverProgressBarDialogParams(const EnableLocalRecordingConverProgressBarDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
}

void EnableLocalRecordingConverProgressBarDialogParams::SharedCtor() {
  benable_ = false;
}

EnableLocalRecordingConverProgressBarDialogParams::~EnableLocalRecordingConverProgressBarDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableLocalRecordingConverProgressBarDialogParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableLocalRecordingConverProgressBarDialogParams::ArenaDtor(void* object) {
  EnableLocalRecordingConverProgressBarDialogParams* _this = reinterpret_cast< EnableLocalRecordingConverProgressBarDialogParams* >(object);
  (void)_this;
}
void EnableLocalRecordingConverProgressBarDialogParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableLocalRecordingConverProgressBarDialogParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableLocalRecordingConverProgressBarDialogParams& EnableLocalRecordingConverProgressBarDialogParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableLocalRecordingConverProgressBarDialogParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableLocalRecordingConverProgressBarDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLocalRecordingConverProgressBarDialogParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableLocalRecordingConverProgressBarDialogParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  return target;
}

size_t EnableLocalRecordingConverProgressBarDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLocalRecordingConverProgressBarDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableLocalRecordingConverProgressBarDialogParams*>(
      &from));
}

void EnableLocalRecordingConverProgressBarDialogParams::MergeFrom(const EnableLocalRecordingConverProgressBarDialogParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableLocalRecordingConverProgressBarDialogParams::CopyFrom(const EnableLocalRecordingConverProgressBarDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLocalRecordingConverProgressBarDialogParams::IsInitialized() const {
  return true;
}

void EnableLocalRecordingConverProgressBarDialogParams::InternalSwap(EnableLocalRecordingConverProgressBarDialogParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableLocalRecordingConverProgressBarDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLocalRecordingConverProgressBarDialogParams";
}


// ===================================================================

void SetMaxDurationForOnlyHostInMeetingParams::InitAsDefaultInstance() {
}
class SetMaxDurationForOnlyHostInMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMaxDurationForOnlyHostInMeetingParams>()._has_bits_);
  static void set_has_nduration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetMaxDurationForOnlyHostInMeetingParams::SetMaxDurationForOnlyHostInMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
}
SetMaxDurationForOnlyHostInMeetingParams::SetMaxDurationForOnlyHostInMeetingParams(const SetMaxDurationForOnlyHostInMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  nduration_ = from.nduration_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
}

void SetMaxDurationForOnlyHostInMeetingParams::SharedCtor() {
  nduration_ = 0;
}

SetMaxDurationForOnlyHostInMeetingParams::~SetMaxDurationForOnlyHostInMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMaxDurationForOnlyHostInMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetMaxDurationForOnlyHostInMeetingParams::ArenaDtor(void* object) {
  SetMaxDurationForOnlyHostInMeetingParams* _this = reinterpret_cast< SetMaxDurationForOnlyHostInMeetingParams* >(object);
  (void)_this;
}
void SetMaxDurationForOnlyHostInMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMaxDurationForOnlyHostInMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMaxDurationForOnlyHostInMeetingParams& SetMaxDurationForOnlyHostInMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMaxDurationForOnlyHostInMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetMaxDurationForOnlyHostInMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nduration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMaxDurationForOnlyHostInMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nDuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nduration(&has_bits);
          nduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMaxDurationForOnlyHostInMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nDuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  return target;
}

size_t SetMaxDurationForOnlyHostInMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nDuration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nduration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaxDurationForOnlyHostInMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMaxDurationForOnlyHostInMeetingParams*>(
      &from));
}

void SetMaxDurationForOnlyHostInMeetingParams::MergeFrom(const SetMaxDurationForOnlyHostInMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nduration()) {
    _internal_set_nduration(from._internal_nduration());
  }
}

void SetMaxDurationForOnlyHostInMeetingParams::CopyFrom(const SetMaxDurationForOnlyHostInMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaxDurationForOnlyHostInMeetingParams::IsInitialized() const {
  return true;
}

void SetMaxDurationForOnlyHostInMeetingParams::InternalSwap(SetMaxDurationForOnlyHostInMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nduration_, other->nduration_);
}

std::string SetMaxDurationForOnlyHostInMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMaxDurationForOnlyHostInMeetingParams";
}


// ===================================================================

void EnableApproveRemoteControlDlgParams::InitAsDefaultInstance() {
}
class EnableApproveRemoteControlDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableApproveRemoteControlDlgParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableApproveRemoteControlDlgParams::EnableApproveRemoteControlDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
}
EnableApproveRemoteControlDlgParams::EnableApproveRemoteControlDlgParams(const EnableApproveRemoteControlDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
}

void EnableApproveRemoteControlDlgParams::SharedCtor() {
  benable_ = false;
}

EnableApproveRemoteControlDlgParams::~EnableApproveRemoteControlDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableApproveRemoteControlDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableApproveRemoteControlDlgParams::ArenaDtor(void* object) {
  EnableApproveRemoteControlDlgParams* _this = reinterpret_cast< EnableApproveRemoteControlDlgParams* >(object);
  (void)_this;
}
void EnableApproveRemoteControlDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableApproveRemoteControlDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableApproveRemoteControlDlgParams& EnableApproveRemoteControlDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableApproveRemoteControlDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableApproveRemoteControlDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableApproveRemoteControlDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableApproveRemoteControlDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  return target;
}

size_t EnableApproveRemoteControlDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableApproveRemoteControlDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableApproveRemoteControlDlgParams*>(
      &from));
}

void EnableApproveRemoteControlDlgParams::MergeFrom(const EnableApproveRemoteControlDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableApproveRemoteControlDlgParams::CopyFrom(const EnableApproveRemoteControlDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableApproveRemoteControlDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableApproveRemoteControlDlgParams::IsInitialized() const {
  return true;
}

void EnableApproveRemoteControlDlgParams::InternalSwap(EnableApproveRemoteControlDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableApproveRemoteControlDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableApproveRemoteControlDlgParams";
}


// ===================================================================

void EnableDeclineRemoteControlResponseDlgParams::InitAsDefaultInstance() {
}
class EnableDeclineRemoteControlResponseDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDeclineRemoteControlResponseDlgParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDeclineRemoteControlResponseDlgParams::EnableDeclineRemoteControlResponseDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
}
EnableDeclineRemoteControlResponseDlgParams::EnableDeclineRemoteControlResponseDlgParams(const EnableDeclineRemoteControlResponseDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
}

void EnableDeclineRemoteControlResponseDlgParams::SharedCtor() {
  benable_ = false;
}

EnableDeclineRemoteControlResponseDlgParams::~EnableDeclineRemoteControlResponseDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableDeclineRemoteControlResponseDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableDeclineRemoteControlResponseDlgParams::ArenaDtor(void* object) {
  EnableDeclineRemoteControlResponseDlgParams* _this = reinterpret_cast< EnableDeclineRemoteControlResponseDlgParams* >(object);
  (void)_this;
}
void EnableDeclineRemoteControlResponseDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableDeclineRemoteControlResponseDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableDeclineRemoteControlResponseDlgParams& EnableDeclineRemoteControlResponseDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableDeclineRemoteControlResponseDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableDeclineRemoteControlResponseDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDeclineRemoteControlResponseDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableDeclineRemoteControlResponseDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  return target;
}

size_t EnableDeclineRemoteControlResponseDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDeclineRemoteControlResponseDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableDeclineRemoteControlResponseDlgParams*>(
      &from));
}

void EnableDeclineRemoteControlResponseDlgParams::MergeFrom(const EnableDeclineRemoteControlResponseDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableDeclineRemoteControlResponseDlgParams::CopyFrom(const EnableDeclineRemoteControlResponseDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDeclineRemoteControlResponseDlgParams::IsInitialized() const {
  return true;
}

void EnableDeclineRemoteControlResponseDlgParams::InternalSwap(EnableDeclineRemoteControlResponseDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableDeclineRemoteControlResponseDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDeclineRemoteControlResponseDlgParams";
}


// ===================================================================

void EnableLeaveMeetingOptionForHostParams::InitAsDefaultInstance() {
}
class EnableLeaveMeetingOptionForHostParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableLeaveMeetingOptionForHostParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableLeaveMeetingOptionForHostParams::EnableLeaveMeetingOptionForHostParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
}
EnableLeaveMeetingOptionForHostParams::EnableLeaveMeetingOptionForHostParams(const EnableLeaveMeetingOptionForHostParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
}

void EnableLeaveMeetingOptionForHostParams::SharedCtor() {
  benable_ = false;
}

EnableLeaveMeetingOptionForHostParams::~EnableLeaveMeetingOptionForHostParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableLeaveMeetingOptionForHostParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableLeaveMeetingOptionForHostParams::ArenaDtor(void* object) {
  EnableLeaveMeetingOptionForHostParams* _this = reinterpret_cast< EnableLeaveMeetingOptionForHostParams* >(object);
  (void)_this;
}
void EnableLeaveMeetingOptionForHostParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableLeaveMeetingOptionForHostParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableLeaveMeetingOptionForHostParams& EnableLeaveMeetingOptionForHostParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableLeaveMeetingOptionForHostParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableLeaveMeetingOptionForHostParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableLeaveMeetingOptionForHostParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableLeaveMeetingOptionForHostParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  return target;
}

size_t EnableLeaveMeetingOptionForHostParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableLeaveMeetingOptionForHostParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableLeaveMeetingOptionForHostParams*>(
      &from));
}

void EnableLeaveMeetingOptionForHostParams::MergeFrom(const EnableLeaveMeetingOptionForHostParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableLeaveMeetingOptionForHostParams::CopyFrom(const EnableLeaveMeetingOptionForHostParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableLeaveMeetingOptionForHostParams::IsInitialized() const {
  return true;
}

void EnableLeaveMeetingOptionForHostParams::InternalSwap(EnableLeaveMeetingOptionForHostParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableLeaveMeetingOptionForHostParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableLeaveMeetingOptionForHostParams";
}


// ===================================================================

void EnableVideoButtonOnMeetingUIParams::InitAsDefaultInstance() {
}
class EnableVideoButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoButtonOnMeetingUIParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoButtonOnMeetingUIParams::EnableVideoButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
}
EnableVideoButtonOnMeetingUIParams::EnableVideoButtonOnMeetingUIParams(const EnableVideoButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
}

void EnableVideoButtonOnMeetingUIParams::SharedCtor() {
  benable_ = false;
}

EnableVideoButtonOnMeetingUIParams::~EnableVideoButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableVideoButtonOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableVideoButtonOnMeetingUIParams::ArenaDtor(void* object) {
  EnableVideoButtonOnMeetingUIParams* _this = reinterpret_cast< EnableVideoButtonOnMeetingUIParams* >(object);
  (void)_this;
}
void EnableVideoButtonOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableVideoButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableVideoButtonOnMeetingUIParams& EnableVideoButtonOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableVideoButtonOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableVideoButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableVideoButtonOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  return target;
}

size_t EnableVideoButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableVideoButtonOnMeetingUIParams*>(
      &from));
}

void EnableVideoButtonOnMeetingUIParams::MergeFrom(const EnableVideoButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableVideoButtonOnMeetingUIParams::CopyFrom(const EnableVideoButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableVideoButtonOnMeetingUIParams::InternalSwap(EnableVideoButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableVideoButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoButtonOnMeetingUIParams";
}


// ===================================================================

void EnableAudioButtonOnMeetingUIParams::InitAsDefaultInstance() {
}
class EnableAudioButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAudioButtonOnMeetingUIParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAudioButtonOnMeetingUIParams::EnableAudioButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
}
EnableAudioButtonOnMeetingUIParams::EnableAudioButtonOnMeetingUIParams(const EnableAudioButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
}

void EnableAudioButtonOnMeetingUIParams::SharedCtor() {
  benable_ = false;
}

EnableAudioButtonOnMeetingUIParams::~EnableAudioButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAudioButtonOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAudioButtonOnMeetingUIParams::ArenaDtor(void* object) {
  EnableAudioButtonOnMeetingUIParams* _this = reinterpret_cast< EnableAudioButtonOnMeetingUIParams* >(object);
  (void)_this;
}
void EnableAudioButtonOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAudioButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAudioButtonOnMeetingUIParams& EnableAudioButtonOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAudioButtonOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAudioButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAudioButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAudioButtonOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  return target;
}

size_t EnableAudioButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAudioButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAudioButtonOnMeetingUIParams*>(
      &from));
}

void EnableAudioButtonOnMeetingUIParams::MergeFrom(const EnableAudioButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAudioButtonOnMeetingUIParams::CopyFrom(const EnableAudioButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAudioButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableAudioButtonOnMeetingUIParams::InternalSwap(EnableAudioButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAudioButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAudioButtonOnMeetingUIParams";
}


// ===================================================================

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::InitAsDefaultInstance() {
}
class EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableEnterAndExitFullScreenButtonOnMeetingUIParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableEnterAndExitFullScreenButtonOnMeetingUIParams::EnableEnterAndExitFullScreenButtonOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
}
EnableEnterAndExitFullScreenButtonOnMeetingUIParams::EnableEnterAndExitFullScreenButtonOnMeetingUIParams(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SharedCtor() {
  benable_ = false;
}

EnableEnterAndExitFullScreenButtonOnMeetingUIParams::~EnableEnterAndExitFullScreenButtonOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::ArenaDtor(void* object) {
  EnableEnterAndExitFullScreenButtonOnMeetingUIParams* _this = reinterpret_cast< EnableEnterAndExitFullScreenButtonOnMeetingUIParams* >(object);
  (void)_this;
}
void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& EnableEnterAndExitFullScreenButtonOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableEnterAndExitFullScreenButtonOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableEnterAndExitFullScreenButtonOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  return target;
}

size_t EnableEnterAndExitFullScreenButtonOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableEnterAndExitFullScreenButtonOnMeetingUIParams*>(
      &from));
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::MergeFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::CopyFrom(const EnableEnterAndExitFullScreenButtonOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableEnterAndExitFullScreenButtonOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableEnterAndExitFullScreenButtonOnMeetingUIParams::InternalSwap(EnableEnterAndExitFullScreenButtonOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableEnterAndExitFullScreenButtonOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableEnterAndExitFullScreenButtonOnMeetingUIParams";
}


// ===================================================================

void RedirectClickShareBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickShareBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickShareBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickShareBTNEventParams::RedirectClickShareBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
}
RedirectClickShareBTNEventParams::RedirectClickShareBTNEventParams(const RedirectClickShareBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
}

void RedirectClickShareBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickShareBTNEventParams::~RedirectClickShareBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickShareBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickShareBTNEventParams::ArenaDtor(void* object) {
  RedirectClickShareBTNEventParams* _this = reinterpret_cast< RedirectClickShareBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickShareBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickShareBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickShareBTNEventParams& RedirectClickShareBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickShareBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickShareBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickShareBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickShareBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  return target;
}

size_t RedirectClickShareBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickShareBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickShareBTNEventParams*>(
      &from));
}

void RedirectClickShareBTNEventParams::MergeFrom(const RedirectClickShareBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickShareBTNEventParams::CopyFrom(const RedirectClickShareBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickShareBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickShareBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickShareBTNEventParams::InternalSwap(RedirectClickShareBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickShareBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickShareBTNEventParams";
}


// ===================================================================

void RedirectClickEndMeetingBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickEndMeetingBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickEndMeetingBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickEndMeetingBTNEventParams::RedirectClickEndMeetingBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
}
RedirectClickEndMeetingBTNEventParams::RedirectClickEndMeetingBTNEventParams(const RedirectClickEndMeetingBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
}

void RedirectClickEndMeetingBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickEndMeetingBTNEventParams::~RedirectClickEndMeetingBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickEndMeetingBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickEndMeetingBTNEventParams::ArenaDtor(void* object) {
  RedirectClickEndMeetingBTNEventParams* _this = reinterpret_cast< RedirectClickEndMeetingBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickEndMeetingBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickEndMeetingBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickEndMeetingBTNEventParams& RedirectClickEndMeetingBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickEndMeetingBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickEndMeetingBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickEndMeetingBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickEndMeetingBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  return target;
}

size_t RedirectClickEndMeetingBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickEndMeetingBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickEndMeetingBTNEventParams*>(
      &from));
}

void RedirectClickEndMeetingBTNEventParams::MergeFrom(const RedirectClickEndMeetingBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickEndMeetingBTNEventParams::CopyFrom(const RedirectClickEndMeetingBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickEndMeetingBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickEndMeetingBTNEventParams::InternalSwap(RedirectClickEndMeetingBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickEndMeetingBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickEndMeetingBTNEventParams";
}


// ===================================================================

void RedirectFreeMeetingEndingReminderDlgParams::InitAsDefaultInstance() {
}
class RedirectFreeMeetingEndingReminderDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectFreeMeetingEndingReminderDlgParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectFreeMeetingEndingReminderDlgParams::RedirectFreeMeetingEndingReminderDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
}
RedirectFreeMeetingEndingReminderDlgParams::RedirectFreeMeetingEndingReminderDlgParams(const RedirectFreeMeetingEndingReminderDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
}

void RedirectFreeMeetingEndingReminderDlgParams::SharedCtor() {
  bredirect_ = false;
}

RedirectFreeMeetingEndingReminderDlgParams::~RedirectFreeMeetingEndingReminderDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectFreeMeetingEndingReminderDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectFreeMeetingEndingReminderDlgParams::ArenaDtor(void* object) {
  RedirectFreeMeetingEndingReminderDlgParams* _this = reinterpret_cast< RedirectFreeMeetingEndingReminderDlgParams* >(object);
  (void)_this;
}
void RedirectFreeMeetingEndingReminderDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectFreeMeetingEndingReminderDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectFreeMeetingEndingReminderDlgParams& RedirectFreeMeetingEndingReminderDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectFreeMeetingEndingReminderDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectFreeMeetingEndingReminderDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectFreeMeetingEndingReminderDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectFreeMeetingEndingReminderDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  return target;
}

size_t RedirectFreeMeetingEndingReminderDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectFreeMeetingEndingReminderDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectFreeMeetingEndingReminderDlgParams*>(
      &from));
}

void RedirectFreeMeetingEndingReminderDlgParams::MergeFrom(const RedirectFreeMeetingEndingReminderDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectFreeMeetingEndingReminderDlgParams::CopyFrom(const RedirectFreeMeetingEndingReminderDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectFreeMeetingEndingReminderDlgParams::IsInitialized() const {
  return true;
}

void RedirectFreeMeetingEndingReminderDlgParams::InternalSwap(RedirectFreeMeetingEndingReminderDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectFreeMeetingEndingReminderDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectFreeMeetingEndingReminderDlgParams";
}


// ===================================================================

void RedirectClickCustomLiveStreamMenuEventParams::InitAsDefaultInstance() {
}
class RedirectClickCustomLiveStreamMenuEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickCustomLiveStreamMenuEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickCustomLiveStreamMenuEventParams::RedirectClickCustomLiveStreamMenuEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
}
RedirectClickCustomLiveStreamMenuEventParams::RedirectClickCustomLiveStreamMenuEventParams(const RedirectClickCustomLiveStreamMenuEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
}

void RedirectClickCustomLiveStreamMenuEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickCustomLiveStreamMenuEventParams::~RedirectClickCustomLiveStreamMenuEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickCustomLiveStreamMenuEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickCustomLiveStreamMenuEventParams::ArenaDtor(void* object) {
  RedirectClickCustomLiveStreamMenuEventParams* _this = reinterpret_cast< RedirectClickCustomLiveStreamMenuEventParams* >(object);
  (void)_this;
}
void RedirectClickCustomLiveStreamMenuEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickCustomLiveStreamMenuEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickCustomLiveStreamMenuEventParams& RedirectClickCustomLiveStreamMenuEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickCustomLiveStreamMenuEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickCustomLiveStreamMenuEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickCustomLiveStreamMenuEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickCustomLiveStreamMenuEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  return target;
}

size_t RedirectClickCustomLiveStreamMenuEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickCustomLiveStreamMenuEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickCustomLiveStreamMenuEventParams*>(
      &from));
}

void RedirectClickCustomLiveStreamMenuEventParams::MergeFrom(const RedirectClickCustomLiveStreamMenuEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickCustomLiveStreamMenuEventParams::CopyFrom(const RedirectClickCustomLiveStreamMenuEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickCustomLiveStreamMenuEventParams::IsInitialized() const {
  return true;
}

void RedirectClickCustomLiveStreamMenuEventParams::InternalSwap(RedirectClickCustomLiveStreamMenuEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickCustomLiveStreamMenuEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickCustomLiveStreamMenuEventParams";
}


// ===================================================================

void RedirectClickParticipantListBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickParticipantListBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickParticipantListBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickParticipantListBTNEventParams::RedirectClickParticipantListBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
}
RedirectClickParticipantListBTNEventParams::RedirectClickParticipantListBTNEventParams(const RedirectClickParticipantListBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
}

void RedirectClickParticipantListBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickParticipantListBTNEventParams::~RedirectClickParticipantListBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickParticipantListBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickParticipantListBTNEventParams::ArenaDtor(void* object) {
  RedirectClickParticipantListBTNEventParams* _this = reinterpret_cast< RedirectClickParticipantListBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickParticipantListBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickParticipantListBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickParticipantListBTNEventParams& RedirectClickParticipantListBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickParticipantListBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickParticipantListBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickParticipantListBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickParticipantListBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  return target;
}

size_t RedirectClickParticipantListBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickParticipantListBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickParticipantListBTNEventParams*>(
      &from));
}

void RedirectClickParticipantListBTNEventParams::MergeFrom(const RedirectClickParticipantListBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickParticipantListBTNEventParams::CopyFrom(const RedirectClickParticipantListBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickParticipantListBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickParticipantListBTNEventParams::InternalSwap(RedirectClickParticipantListBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickParticipantListBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickParticipantListBTNEventParams";
}


// ===================================================================

void RedirectClickCCBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickCCBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickCCBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickCCBTNEventParams::RedirectClickCCBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
}
RedirectClickCCBTNEventParams::RedirectClickCCBTNEventParams(const RedirectClickCCBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
}

void RedirectClickCCBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickCCBTNEventParams::~RedirectClickCCBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickCCBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickCCBTNEventParams::ArenaDtor(void* object) {
  RedirectClickCCBTNEventParams* _this = reinterpret_cast< RedirectClickCCBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickCCBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickCCBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickCCBTNEventParams& RedirectClickCCBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickCCBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickCCBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickCCBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickCCBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  return target;
}

size_t RedirectClickCCBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickCCBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickCCBTNEventParams*>(
      &from));
}

void RedirectClickCCBTNEventParams::MergeFrom(const RedirectClickCCBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickCCBTNEventParams::CopyFrom(const RedirectClickCCBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickCCBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickCCBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickCCBTNEventParams::InternalSwap(RedirectClickCCBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickCCBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickCCBTNEventParams";
}


// ===================================================================

void RedirectClickAudioBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickAudioBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickAudioBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickAudioBTNEventParams::RedirectClickAudioBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
}
RedirectClickAudioBTNEventParams::RedirectClickAudioBTNEventParams(const RedirectClickAudioBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
}

void RedirectClickAudioBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickAudioBTNEventParams::~RedirectClickAudioBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickAudioBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickAudioBTNEventParams::ArenaDtor(void* object) {
  RedirectClickAudioBTNEventParams* _this = reinterpret_cast< RedirectClickAudioBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickAudioBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickAudioBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickAudioBTNEventParams& RedirectClickAudioBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickAudioBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickAudioBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickAudioBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickAudioBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  return target;
}

size_t RedirectClickAudioBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickAudioBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickAudioBTNEventParams*>(
      &from));
}

void RedirectClickAudioBTNEventParams::MergeFrom(const RedirectClickAudioBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickAudioBTNEventParams::CopyFrom(const RedirectClickAudioBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickAudioBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickAudioBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickAudioBTNEventParams::InternalSwap(RedirectClickAudioBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickAudioBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickAudioBTNEventParams";
}


// ===================================================================

void RedirectClickAudioMenuBTNEventParams::InitAsDefaultInstance() {
}
class RedirectClickAudioMenuBTNEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectClickAudioMenuBTNEventParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectClickAudioMenuBTNEventParams::RedirectClickAudioMenuBTNEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
}
RedirectClickAudioMenuBTNEventParams::RedirectClickAudioMenuBTNEventParams(const RedirectClickAudioMenuBTNEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
}

void RedirectClickAudioMenuBTNEventParams::SharedCtor() {
  bredirect_ = false;
}

RedirectClickAudioMenuBTNEventParams::~RedirectClickAudioMenuBTNEventParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectClickAudioMenuBTNEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectClickAudioMenuBTNEventParams::ArenaDtor(void* object) {
  RedirectClickAudioMenuBTNEventParams* _this = reinterpret_cast< RedirectClickAudioMenuBTNEventParams* >(object);
  (void)_this;
}
void RedirectClickAudioMenuBTNEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectClickAudioMenuBTNEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectClickAudioMenuBTNEventParams& RedirectClickAudioMenuBTNEventParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectClickAudioMenuBTNEventParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectClickAudioMenuBTNEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectClickAudioMenuBTNEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectClickAudioMenuBTNEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  return target;
}

size_t RedirectClickAudioMenuBTNEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectClickAudioMenuBTNEventParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectClickAudioMenuBTNEventParams*>(
      &from));
}

void RedirectClickAudioMenuBTNEventParams::MergeFrom(const RedirectClickAudioMenuBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectClickAudioMenuBTNEventParams::CopyFrom(const RedirectClickAudioMenuBTNEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectClickAudioMenuBTNEventParams::IsInitialized() const {
  return true;
}

void RedirectClickAudioMenuBTNEventParams::InternalSwap(RedirectClickAudioMenuBTNEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectClickAudioMenuBTNEventParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectClickAudioMenuBTNEventParams";
}


// ===================================================================

void RedirectMeetingWarningMsgParams::InitAsDefaultInstance() {
}
class RedirectMeetingWarningMsgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectMeetingWarningMsgParams>()._has_bits_);
  static void set_has_bredirectbadnetwork(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bredirectwarnhighcpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RedirectMeetingWarningMsgParams::RedirectMeetingWarningMsgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
}
RedirectMeetingWarningMsgParams::RedirectMeetingWarningMsgParams(const RedirectMeetingWarningMsgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bredirectbadnetwork_, &from.bredirectbadnetwork_,
    static_cast<size_t>(reinterpret_cast<char*>(&bredirectwarnhighcpu_) -
    reinterpret_cast<char*>(&bredirectbadnetwork_)) + sizeof(bredirectwarnhighcpu_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
}

void RedirectMeetingWarningMsgParams::SharedCtor() {
  ::memset(&bredirectbadnetwork_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bredirectwarnhighcpu_) -
      reinterpret_cast<char*>(&bredirectbadnetwork_)) + sizeof(bredirectwarnhighcpu_));
}

RedirectMeetingWarningMsgParams::~RedirectMeetingWarningMsgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectMeetingWarningMsgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectMeetingWarningMsgParams::ArenaDtor(void* object) {
  RedirectMeetingWarningMsgParams* _this = reinterpret_cast< RedirectMeetingWarningMsgParams* >(object);
  (void)_this;
}
void RedirectMeetingWarningMsgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectMeetingWarningMsgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectMeetingWarningMsgParams& RedirectMeetingWarningMsgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectMeetingWarningMsgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectMeetingWarningMsgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bredirectbadnetwork_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bredirectwarnhighcpu_) -
      reinterpret_cast<char*>(&bredirectbadnetwork_)) + sizeof(bredirectwarnhighcpu_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectMeetingWarningMsgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirectBadNetwork = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirectbadnetwork(&has_bits);
          bredirectbadnetwork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bRedirectWarnHighCPU = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bredirectwarnhighcpu(&has_bits);
          bredirectwarnhighcpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectMeetingWarningMsgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirectBadNetwork = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirectbadnetwork(), target);
  }

  // optional bool bRedirectWarnHighCPU = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bredirectwarnhighcpu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  return target;
}

size_t RedirectMeetingWarningMsgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bRedirectBadNetwork = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bRedirectWarnHighCPU = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectMeetingWarningMsgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectMeetingWarningMsgParams*>(
      &from));
}

void RedirectMeetingWarningMsgParams::MergeFrom(const RedirectMeetingWarningMsgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bredirectbadnetwork_ = from.bredirectbadnetwork_;
    }
    if (cached_has_bits & 0x00000002u) {
      bredirectwarnhighcpu_ = from.bredirectwarnhighcpu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedirectMeetingWarningMsgParams::CopyFrom(const RedirectMeetingWarningMsgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectMeetingWarningMsgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectMeetingWarningMsgParams::IsInitialized() const {
  return true;
}

void RedirectMeetingWarningMsgParams::InternalSwap(RedirectMeetingWarningMsgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedirectMeetingWarningMsgParams, bredirectwarnhighcpu_)
      + sizeof(RedirectMeetingWarningMsgParams::bredirectwarnhighcpu_)
      - PROTOBUF_FIELD_OFFSET(RedirectMeetingWarningMsgParams, bredirectbadnetwork_)>(
          reinterpret_cast<char*>(&bredirectbadnetwork_),
          reinterpret_cast<char*>(&other->bredirectbadnetwork_));
}

std::string RedirectMeetingWarningMsgParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectMeetingWarningMsgParams";
}


// ===================================================================

void EnableToolTipsShowParams::InitAsDefaultInstance() {
}
class EnableToolTipsShowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableToolTipsShowParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableToolTipsShowParams::EnableToolTipsShowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableToolTipsShowParams)
}
EnableToolTipsShowParams::EnableToolTipsShowParams(const EnableToolTipsShowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableToolTipsShowParams)
}

void EnableToolTipsShowParams::SharedCtor() {
  benable_ = false;
}

EnableToolTipsShowParams::~EnableToolTipsShowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableToolTipsShowParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableToolTipsShowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableToolTipsShowParams::ArenaDtor(void* object) {
  EnableToolTipsShowParams* _this = reinterpret_cast< EnableToolTipsShowParams* >(object);
  (void)_this;
}
void EnableToolTipsShowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableToolTipsShowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableToolTipsShowParams& EnableToolTipsShowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableToolTipsShowParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableToolTipsShowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableToolTipsShowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableToolTipsShowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableToolTipsShowParams)
  return target;
}

size_t EnableToolTipsShowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableToolTipsShowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableToolTipsShowParams*>(
      &from));
}

void EnableToolTipsShowParams::MergeFrom(const EnableToolTipsShowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableToolTipsShowParams::CopyFrom(const EnableToolTipsShowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableToolTipsShowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableToolTipsShowParams::IsInitialized() const {
  return true;
}

void EnableToolTipsShowParams::InternalSwap(EnableToolTipsShowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableToolTipsShowParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableToolTipsShowParams";
}


// ===================================================================

void EnableAirplayInstructionWindowParams::InitAsDefaultInstance() {
}
class EnableAirplayInstructionWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAirplayInstructionWindowParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAirplayInstructionWindowParams::EnableAirplayInstructionWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
}
EnableAirplayInstructionWindowParams::EnableAirplayInstructionWindowParams(const EnableAirplayInstructionWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
}

void EnableAirplayInstructionWindowParams::SharedCtor() {
  benable_ = false;
}

EnableAirplayInstructionWindowParams::~EnableAirplayInstructionWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAirplayInstructionWindowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAirplayInstructionWindowParams::ArenaDtor(void* object) {
  EnableAirplayInstructionWindowParams* _this = reinterpret_cast< EnableAirplayInstructionWindowParams* >(object);
  (void)_this;
}
void EnableAirplayInstructionWindowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAirplayInstructionWindowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAirplayInstructionWindowParams& EnableAirplayInstructionWindowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAirplayInstructionWindowParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAirplayInstructionWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAirplayInstructionWindowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAirplayInstructionWindowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  return target;
}

size_t EnableAirplayInstructionWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAirplayInstructionWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAirplayInstructionWindowParams*>(
      &from));
}

void EnableAirplayInstructionWindowParams::MergeFrom(const EnableAirplayInstructionWindowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAirplayInstructionWindowParams::CopyFrom(const EnableAirplayInstructionWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAirplayInstructionWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAirplayInstructionWindowParams::IsInitialized() const {
  return true;
}

void EnableAirplayInstructionWindowParams::InternalSwap(EnableAirplayInstructionWindowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAirplayInstructionWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAirplayInstructionWindowParams";
}


// ===================================================================

void EnableClaimHostFeatureParams::InitAsDefaultInstance() {
}
class EnableClaimHostFeatureParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableClaimHostFeatureParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableClaimHostFeatureParams::EnableClaimHostFeatureParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
}
EnableClaimHostFeatureParams::EnableClaimHostFeatureParams(const EnableClaimHostFeatureParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
}

void EnableClaimHostFeatureParams::SharedCtor() {
  benable_ = false;
}

EnableClaimHostFeatureParams::~EnableClaimHostFeatureParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableClaimHostFeatureParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableClaimHostFeatureParams::ArenaDtor(void* object) {
  EnableClaimHostFeatureParams* _this = reinterpret_cast< EnableClaimHostFeatureParams* >(object);
  (void)_this;
}
void EnableClaimHostFeatureParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableClaimHostFeatureParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableClaimHostFeatureParams& EnableClaimHostFeatureParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableClaimHostFeatureParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableClaimHostFeatureParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableClaimHostFeatureParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableClaimHostFeatureParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  return target;
}

size_t EnableClaimHostFeatureParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableClaimHostFeatureParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableClaimHostFeatureParams*>(
      &from));
}

void EnableClaimHostFeatureParams::MergeFrom(const EnableClaimHostFeatureParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableClaimHostFeatureParams::CopyFrom(const EnableClaimHostFeatureParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableClaimHostFeatureParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableClaimHostFeatureParams::IsInitialized() const {
  return true;
}

void EnableClaimHostFeatureParams::InternalSwap(EnableClaimHostFeatureParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableClaimHostFeatureParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableClaimHostFeatureParams";
}


// ===================================================================

void EnableAutoHideJoinAudioDialogParams::InitAsDefaultInstance() {
}
class EnableAutoHideJoinAudioDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoHideJoinAudioDialogParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoHideJoinAudioDialogParams::EnableAutoHideJoinAudioDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
}
EnableAutoHideJoinAudioDialogParams::EnableAutoHideJoinAudioDialogParams(const EnableAutoHideJoinAudioDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
}

void EnableAutoHideJoinAudioDialogParams::SharedCtor() {
  benable_ = false;
}

EnableAutoHideJoinAudioDialogParams::~EnableAutoHideJoinAudioDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoHideJoinAudioDialogParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoHideJoinAudioDialogParams::ArenaDtor(void* object) {
  EnableAutoHideJoinAudioDialogParams* _this = reinterpret_cast< EnableAutoHideJoinAudioDialogParams* >(object);
  (void)_this;
}
void EnableAutoHideJoinAudioDialogParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoHideJoinAudioDialogParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoHideJoinAudioDialogParams& EnableAutoHideJoinAudioDialogParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoHideJoinAudioDialogParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoHideJoinAudioDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoHideJoinAudioDialogParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoHideJoinAudioDialogParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  return target;
}

size_t EnableAutoHideJoinAudioDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoHideJoinAudioDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoHideJoinAudioDialogParams*>(
      &from));
}

void EnableAutoHideJoinAudioDialogParams::MergeFrom(const EnableAutoHideJoinAudioDialogParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoHideJoinAudioDialogParams::CopyFrom(const EnableAutoHideJoinAudioDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoHideJoinAudioDialogParams::IsInitialized() const {
  return true;
}

void EnableAutoHideJoinAudioDialogParams::InternalSwap(EnableAutoHideJoinAudioDialogParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoHideJoinAudioDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoHideJoinAudioDialogParams";
}


// ===================================================================

void AlwaysShowIconOnTaskBarParams::InitAsDefaultInstance() {
}
class AlwaysShowIconOnTaskBarParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AlwaysShowIconOnTaskBarParams>()._has_bits_);
  static void set_has_balwaysshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlwaysShowIconOnTaskBarParams::AlwaysShowIconOnTaskBarParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
}
AlwaysShowIconOnTaskBarParams::AlwaysShowIconOnTaskBarParams(const AlwaysShowIconOnTaskBarParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  balwaysshow_ = from.balwaysshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
}

void AlwaysShowIconOnTaskBarParams::SharedCtor() {
  balwaysshow_ = false;
}

AlwaysShowIconOnTaskBarParams::~AlwaysShowIconOnTaskBarParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AlwaysShowIconOnTaskBarParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlwaysShowIconOnTaskBarParams::ArenaDtor(void* object) {
  AlwaysShowIconOnTaskBarParams* _this = reinterpret_cast< AlwaysShowIconOnTaskBarParams* >(object);
  (void)_this;
}
void AlwaysShowIconOnTaskBarParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlwaysShowIconOnTaskBarParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlwaysShowIconOnTaskBarParams& AlwaysShowIconOnTaskBarParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlwaysShowIconOnTaskBarParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AlwaysShowIconOnTaskBarParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balwaysshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AlwaysShowIconOnTaskBarParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bAlwaysShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_balwaysshow(&has_bits);
          balwaysshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlwaysShowIconOnTaskBarParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bAlwaysShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_balwaysshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  return target;
}

size_t AlwaysShowIconOnTaskBarParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bAlwaysShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlwaysShowIconOnTaskBarParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AlwaysShowIconOnTaskBarParams*>(
      &from));
}

void AlwaysShowIconOnTaskBarParams::MergeFrom(const AlwaysShowIconOnTaskBarParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_balwaysshow()) {
    _internal_set_balwaysshow(from._internal_balwaysshow());
  }
}

void AlwaysShowIconOnTaskBarParams::CopyFrom(const AlwaysShowIconOnTaskBarParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlwaysShowIconOnTaskBarParams::IsInitialized() const {
  return true;
}

void AlwaysShowIconOnTaskBarParams::InternalSwap(AlwaysShowIconOnTaskBarParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(balwaysshow_, other->balwaysshow_);
}

std::string AlwaysShowIconOnTaskBarParams::GetTypeName() const {
  return "com.electron.sdk.proto.AlwaysShowIconOnTaskBarParams";
}


// ===================================================================

void DisableSplitScreenModeUIElementsParams::InitAsDefaultInstance() {
}
class DisableSplitScreenModeUIElementsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableSplitScreenModeUIElementsParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableSplitScreenModeUIElementsParams::DisableSplitScreenModeUIElementsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
}
DisableSplitScreenModeUIElementsParams::DisableSplitScreenModeUIElementsParams(const DisableSplitScreenModeUIElementsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
}

void DisableSplitScreenModeUIElementsParams::SharedCtor() {
  bdisable_ = false;
}

DisableSplitScreenModeUIElementsParams::~DisableSplitScreenModeUIElementsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableSplitScreenModeUIElementsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableSplitScreenModeUIElementsParams::ArenaDtor(void* object) {
  DisableSplitScreenModeUIElementsParams* _this = reinterpret_cast< DisableSplitScreenModeUIElementsParams* >(object);
  (void)_this;
}
void DisableSplitScreenModeUIElementsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableSplitScreenModeUIElementsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableSplitScreenModeUIElementsParams& DisableSplitScreenModeUIElementsParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableSplitScreenModeUIElementsParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableSplitScreenModeUIElementsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableSplitScreenModeUIElementsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableSplitScreenModeUIElementsParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  return target;
}

size_t DisableSplitScreenModeUIElementsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableSplitScreenModeUIElementsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableSplitScreenModeUIElementsParams*>(
      &from));
}

void DisableSplitScreenModeUIElementsParams::MergeFrom(const DisableSplitScreenModeUIElementsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableSplitScreenModeUIElementsParams::CopyFrom(const DisableSplitScreenModeUIElementsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableSplitScreenModeUIElementsParams::IsInitialized() const {
  return true;
}

void DisableSplitScreenModeUIElementsParams::InternalSwap(DisableSplitScreenModeUIElementsParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableSplitScreenModeUIElementsParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableSplitScreenModeUIElementsParams";
}


// ===================================================================

void SetShowAudioUseComputerSoundChkboxParams::InitAsDefaultInstance() {
}
class SetShowAudioUseComputerSoundChkboxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowAudioUseComputerSoundChkboxParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowAudioUseComputerSoundChkboxParams::SetShowAudioUseComputerSoundChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
}
SetShowAudioUseComputerSoundChkboxParams::SetShowAudioUseComputerSoundChkboxParams(const SetShowAudioUseComputerSoundChkboxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
}

void SetShowAudioUseComputerSoundChkboxParams::SharedCtor() {
  bshow_ = false;
}

SetShowAudioUseComputerSoundChkboxParams::~SetShowAudioUseComputerSoundChkboxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowAudioUseComputerSoundChkboxParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowAudioUseComputerSoundChkboxParams::ArenaDtor(void* object) {
  SetShowAudioUseComputerSoundChkboxParams* _this = reinterpret_cast< SetShowAudioUseComputerSoundChkboxParams* >(object);
  (void)_this;
}
void SetShowAudioUseComputerSoundChkboxParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowAudioUseComputerSoundChkboxParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowAudioUseComputerSoundChkboxParams& SetShowAudioUseComputerSoundChkboxParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowAudioUseComputerSoundChkboxParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowAudioUseComputerSoundChkboxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowAudioUseComputerSoundChkboxParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowAudioUseComputerSoundChkboxParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  return target;
}

size_t SetShowAudioUseComputerSoundChkboxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowAudioUseComputerSoundChkboxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowAudioUseComputerSoundChkboxParams*>(
      &from));
}

void SetShowAudioUseComputerSoundChkboxParams::MergeFrom(const SetShowAudioUseComputerSoundChkboxParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetShowAudioUseComputerSoundChkboxParams::CopyFrom(const SetShowAudioUseComputerSoundChkboxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowAudioUseComputerSoundChkboxParams::IsInitialized() const {
  return true;
}

void SetShowAudioUseComputerSoundChkboxParams::InternalSwap(SetShowAudioUseComputerSoundChkboxParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetShowAudioUseComputerSoundChkboxParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowAudioUseComputerSoundChkboxParams";
}


// ===================================================================

void SetShowCallInTabParams::InitAsDefaultInstance() {
}
class SetShowCallInTabParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowCallInTabParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowCallInTabParams::SetShowCallInTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowCallInTabParams)
}
SetShowCallInTabParams::SetShowCallInTabParams(const SetShowCallInTabParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowCallInTabParams)
}

void SetShowCallInTabParams::SharedCtor() {
  bshow_ = false;
}

SetShowCallInTabParams::~SetShowCallInTabParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowCallInTabParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowCallInTabParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowCallInTabParams::ArenaDtor(void* object) {
  SetShowCallInTabParams* _this = reinterpret_cast< SetShowCallInTabParams* >(object);
  (void)_this;
}
void SetShowCallInTabParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowCallInTabParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowCallInTabParams& SetShowCallInTabParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowCallInTabParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowCallInTabParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowCallInTabParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowCallInTabParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowCallInTabParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowCallInTabParams)
  return target;
}

size_t SetShowCallInTabParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowCallInTabParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowCallInTabParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowCallInTabParams*>(
      &from));
}

void SetShowCallInTabParams::MergeFrom(const SetShowCallInTabParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowCallInTabParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetShowCallInTabParams::CopyFrom(const SetShowCallInTabParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowCallInTabParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowCallInTabParams::IsInitialized() const {
  return true;
}

void SetShowCallInTabParams::InternalSwap(SetShowCallInTabParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetShowCallInTabParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowCallInTabParams";
}


// ===================================================================

void SetShowCallMeTabParams::InitAsDefaultInstance() {
}
class SetShowCallMeTabParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowCallMeTabParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowCallMeTabParams::SetShowCallMeTabParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowCallMeTabParams)
}
SetShowCallMeTabParams::SetShowCallMeTabParams(const SetShowCallMeTabParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowCallMeTabParams)
}

void SetShowCallMeTabParams::SharedCtor() {
  bshow_ = false;
}

SetShowCallMeTabParams::~SetShowCallMeTabParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowCallMeTabParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowCallMeTabParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowCallMeTabParams::ArenaDtor(void* object) {
  SetShowCallMeTabParams* _this = reinterpret_cast< SetShowCallMeTabParams* >(object);
  (void)_this;
}
void SetShowCallMeTabParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowCallMeTabParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowCallMeTabParams& SetShowCallMeTabParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowCallMeTabParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowCallMeTabParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowCallMeTabParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowCallMeTabParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowCallMeTabParams)
  return target;
}

size_t SetShowCallMeTabParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowCallMeTabParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowCallMeTabParams*>(
      &from));
}

void SetShowCallMeTabParams::MergeFrom(const SetShowCallMeTabParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetShowCallMeTabParams::CopyFrom(const SetShowCallMeTabParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowCallMeTabParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowCallMeTabParams::IsInitialized() const {
  return true;
}

void SetShowCallMeTabParams::InternalSwap(SetShowCallMeTabParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetShowCallMeTabParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowCallMeTabParams";
}


// ===================================================================

void DisableTopMostAttr4SettingDialogParams::InitAsDefaultInstance() {
}
class DisableTopMostAttr4SettingDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableTopMostAttr4SettingDialogParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableTopMostAttr4SettingDialogParams::DisableTopMostAttr4SettingDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
}
DisableTopMostAttr4SettingDialogParams::DisableTopMostAttr4SettingDialogParams(const DisableTopMostAttr4SettingDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
}

void DisableTopMostAttr4SettingDialogParams::SharedCtor() {
  bdisable_ = false;
}

DisableTopMostAttr4SettingDialogParams::~DisableTopMostAttr4SettingDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableTopMostAttr4SettingDialogParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableTopMostAttr4SettingDialogParams::ArenaDtor(void* object) {
  DisableTopMostAttr4SettingDialogParams* _this = reinterpret_cast< DisableTopMostAttr4SettingDialogParams* >(object);
  (void)_this;
}
void DisableTopMostAttr4SettingDialogParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableTopMostAttr4SettingDialogParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableTopMostAttr4SettingDialogParams& DisableTopMostAttr4SettingDialogParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableTopMostAttr4SettingDialogParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableTopMostAttr4SettingDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableTopMostAttr4SettingDialogParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableTopMostAttr4SettingDialogParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  return target;
}

size_t DisableTopMostAttr4SettingDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableTopMostAttr4SettingDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableTopMostAttr4SettingDialogParams*>(
      &from));
}

void DisableTopMostAttr4SettingDialogParams::MergeFrom(const DisableTopMostAttr4SettingDialogParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableTopMostAttr4SettingDialogParams::CopyFrom(const DisableTopMostAttr4SettingDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTopMostAttr4SettingDialogParams::IsInitialized() const {
  return true;
}

void DisableTopMostAttr4SettingDialogParams::InternalSwap(DisableTopMostAttr4SettingDialogParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableTopMostAttr4SettingDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableTopMostAttr4SettingDialogParams";
}


// ===================================================================

void EnableGrabShareWithoutReminderParams::InitAsDefaultInstance() {
}
class EnableGrabShareWithoutReminderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableGrabShareWithoutReminderParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableGrabShareWithoutReminderParams::EnableGrabShareWithoutReminderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
}
EnableGrabShareWithoutReminderParams::EnableGrabShareWithoutReminderParams(const EnableGrabShareWithoutReminderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
}

void EnableGrabShareWithoutReminderParams::SharedCtor() {
  benable_ = false;
}

EnableGrabShareWithoutReminderParams::~EnableGrabShareWithoutReminderParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableGrabShareWithoutReminderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableGrabShareWithoutReminderParams::ArenaDtor(void* object) {
  EnableGrabShareWithoutReminderParams* _this = reinterpret_cast< EnableGrabShareWithoutReminderParams* >(object);
  (void)_this;
}
void EnableGrabShareWithoutReminderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableGrabShareWithoutReminderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableGrabShareWithoutReminderParams& EnableGrabShareWithoutReminderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableGrabShareWithoutReminderParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableGrabShareWithoutReminderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableGrabShareWithoutReminderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableGrabShareWithoutReminderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  return target;
}

size_t EnableGrabShareWithoutReminderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableGrabShareWithoutReminderParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableGrabShareWithoutReminderParams*>(
      &from));
}

void EnableGrabShareWithoutReminderParams::MergeFrom(const EnableGrabShareWithoutReminderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableGrabShareWithoutReminderParams::CopyFrom(const EnableGrabShareWithoutReminderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableGrabShareWithoutReminderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableGrabShareWithoutReminderParams::IsInitialized() const {
  return true;
}

void EnableGrabShareWithoutReminderParams::InternalSwap(EnableGrabShareWithoutReminderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableGrabShareWithoutReminderParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableGrabShareWithoutReminderParams";
}


// ===================================================================

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::InitAsDefaultInstance() {
}
class EnableShowShareSwitchMultiToSingleConfirmDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowShareSwitchMultiToSingleConfirmDlgParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowShareSwitchMultiToSingleConfirmDlgParams::EnableShowShareSwitchMultiToSingleConfirmDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
}
EnableShowShareSwitchMultiToSingleConfirmDlgParams::EnableShowShareSwitchMultiToSingleConfirmDlgParams(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SharedCtor() {
  benable_ = false;
}

EnableShowShareSwitchMultiToSingleConfirmDlgParams::~EnableShowShareSwitchMultiToSingleConfirmDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::ArenaDtor(void* object) {
  EnableShowShareSwitchMultiToSingleConfirmDlgParams* _this = reinterpret_cast< EnableShowShareSwitchMultiToSingleConfirmDlgParams* >(object);
  (void)_this;
}
void EnableShowShareSwitchMultiToSingleConfirmDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableShowShareSwitchMultiToSingleConfirmDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableShowShareSwitchMultiToSingleConfirmDlgParams& EnableShowShareSwitchMultiToSingleConfirmDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableShowShareSwitchMultiToSingleConfirmDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableShowShareSwitchMultiToSingleConfirmDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowShareSwitchMultiToSingleConfirmDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableShowShareSwitchMultiToSingleConfirmDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  return target;
}

size_t EnableShowShareSwitchMultiToSingleConfirmDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableShowShareSwitchMultiToSingleConfirmDlgParams*>(
      &from));
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::MergeFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::CopyFrom(const EnableShowShareSwitchMultiToSingleConfirmDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowShareSwitchMultiToSingleConfirmDlgParams::IsInitialized() const {
  return true;
}

void EnableShowShareSwitchMultiToSingleConfirmDlgParams::InternalSwap(EnableShowShareSwitchMultiToSingleConfirmDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableShowShareSwitchMultiToSingleConfirmDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowShareSwitchMultiToSingleConfirmDlgParams";
}


// ===================================================================

void DisableFreeMeetingRemainTimeNotifyParams::InitAsDefaultInstance() {
}
class DisableFreeMeetingRemainTimeNotifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableFreeMeetingRemainTimeNotifyParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableFreeMeetingRemainTimeNotifyParams::DisableFreeMeetingRemainTimeNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
}
DisableFreeMeetingRemainTimeNotifyParams::DisableFreeMeetingRemainTimeNotifyParams(const DisableFreeMeetingRemainTimeNotifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
}

void DisableFreeMeetingRemainTimeNotifyParams::SharedCtor() {
  bdisable_ = false;
}

DisableFreeMeetingRemainTimeNotifyParams::~DisableFreeMeetingRemainTimeNotifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableFreeMeetingRemainTimeNotifyParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableFreeMeetingRemainTimeNotifyParams::ArenaDtor(void* object) {
  DisableFreeMeetingRemainTimeNotifyParams* _this = reinterpret_cast< DisableFreeMeetingRemainTimeNotifyParams* >(object);
  (void)_this;
}
void DisableFreeMeetingRemainTimeNotifyParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableFreeMeetingRemainTimeNotifyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableFreeMeetingRemainTimeNotifyParams& DisableFreeMeetingRemainTimeNotifyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableFreeMeetingRemainTimeNotifyParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableFreeMeetingRemainTimeNotifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableFreeMeetingRemainTimeNotifyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableFreeMeetingRemainTimeNotifyParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  return target;
}

size_t DisableFreeMeetingRemainTimeNotifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableFreeMeetingRemainTimeNotifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableFreeMeetingRemainTimeNotifyParams*>(
      &from));
}

void DisableFreeMeetingRemainTimeNotifyParams::MergeFrom(const DisableFreeMeetingRemainTimeNotifyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableFreeMeetingRemainTimeNotifyParams::CopyFrom(const DisableFreeMeetingRemainTimeNotifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableFreeMeetingRemainTimeNotifyParams::IsInitialized() const {
  return true;
}

void DisableFreeMeetingRemainTimeNotifyParams::InternalSwap(DisableFreeMeetingRemainTimeNotifyParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableFreeMeetingRemainTimeNotifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableFreeMeetingRemainTimeNotifyParams";
}


// ===================================================================

void HideChatItemOnMeetingUIParams::InitAsDefaultInstance() {
}
class HideChatItemOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideChatItemOnMeetingUIParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideChatItemOnMeetingUIParams::HideChatItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
}
HideChatItemOnMeetingUIParams::HideChatItemOnMeetingUIParams(const HideChatItemOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
}

void HideChatItemOnMeetingUIParams::SharedCtor() {
  bhide_ = false;
}

HideChatItemOnMeetingUIParams::~HideChatItemOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideChatItemOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideChatItemOnMeetingUIParams::ArenaDtor(void* object) {
  HideChatItemOnMeetingUIParams* _this = reinterpret_cast< HideChatItemOnMeetingUIParams* >(object);
  (void)_this;
}
void HideChatItemOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideChatItemOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideChatItemOnMeetingUIParams& HideChatItemOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideChatItemOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideChatItemOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideChatItemOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideChatItemOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  return target;
}

size_t HideChatItemOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideChatItemOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideChatItemOnMeetingUIParams*>(
      &from));
}

void HideChatItemOnMeetingUIParams::MergeFrom(const HideChatItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideChatItemOnMeetingUIParams::CopyFrom(const HideChatItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideChatItemOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideChatItemOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideChatItemOnMeetingUIParams::InternalSwap(HideChatItemOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideChatItemOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideChatItemOnMeetingUIParams";
}


// ===================================================================

void HideRecordItemOnMeetingUIParams::InitAsDefaultInstance() {
}
class HideRecordItemOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideRecordItemOnMeetingUIParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideRecordItemOnMeetingUIParams::HideRecordItemOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
}
HideRecordItemOnMeetingUIParams::HideRecordItemOnMeetingUIParams(const HideRecordItemOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
}

void HideRecordItemOnMeetingUIParams::SharedCtor() {
  bhide_ = false;
}

HideRecordItemOnMeetingUIParams::~HideRecordItemOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideRecordItemOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideRecordItemOnMeetingUIParams::ArenaDtor(void* object) {
  HideRecordItemOnMeetingUIParams* _this = reinterpret_cast< HideRecordItemOnMeetingUIParams* >(object);
  (void)_this;
}
void HideRecordItemOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideRecordItemOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideRecordItemOnMeetingUIParams& HideRecordItemOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideRecordItemOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideRecordItemOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideRecordItemOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideRecordItemOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  return target;
}

size_t HideRecordItemOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideRecordItemOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideRecordItemOnMeetingUIParams*>(
      &from));
}

void HideRecordItemOnMeetingUIParams::MergeFrom(const HideRecordItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideRecordItemOnMeetingUIParams::CopyFrom(const HideRecordItemOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideRecordItemOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideRecordItemOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideRecordItemOnMeetingUIParams::InternalSwap(HideRecordItemOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideRecordItemOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideRecordItemOnMeetingUIParams";
}


// ===================================================================

void HideUpgradeFreeMeetingButtonParams::InitAsDefaultInstance() {
}
class HideUpgradeFreeMeetingButtonParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideUpgradeFreeMeetingButtonParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideUpgradeFreeMeetingButtonParams::HideUpgradeFreeMeetingButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
}
HideUpgradeFreeMeetingButtonParams::HideUpgradeFreeMeetingButtonParams(const HideUpgradeFreeMeetingButtonParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
}

void HideUpgradeFreeMeetingButtonParams::SharedCtor() {
  bhide_ = false;
}

HideUpgradeFreeMeetingButtonParams::~HideUpgradeFreeMeetingButtonParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideUpgradeFreeMeetingButtonParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideUpgradeFreeMeetingButtonParams::ArenaDtor(void* object) {
  HideUpgradeFreeMeetingButtonParams* _this = reinterpret_cast< HideUpgradeFreeMeetingButtonParams* >(object);
  (void)_this;
}
void HideUpgradeFreeMeetingButtonParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideUpgradeFreeMeetingButtonParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideUpgradeFreeMeetingButtonParams& HideUpgradeFreeMeetingButtonParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideUpgradeFreeMeetingButtonParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideUpgradeFreeMeetingButtonParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideUpgradeFreeMeetingButtonParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideUpgradeFreeMeetingButtonParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  return target;
}

size_t HideUpgradeFreeMeetingButtonParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideUpgradeFreeMeetingButtonParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideUpgradeFreeMeetingButtonParams*>(
      &from));
}

void HideUpgradeFreeMeetingButtonParams::MergeFrom(const HideUpgradeFreeMeetingButtonParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideUpgradeFreeMeetingButtonParams::CopyFrom(const HideUpgradeFreeMeetingButtonParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideUpgradeFreeMeetingButtonParams::IsInitialized() const {
  return true;
}

void HideUpgradeFreeMeetingButtonParams::InternalSwap(HideUpgradeFreeMeetingButtonParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideUpgradeFreeMeetingButtonParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideUpgradeFreeMeetingButtonParams";
}


// ===================================================================

void SetShowInviteDlgTabPageParams::InitAsDefaultInstance() {
}
class SetShowInviteDlgTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowInviteDlgTabPageParams>()._has_bits_);
  static void set_has_tabpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetShowInviteDlgTabPageParams::SetShowInviteDlgTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
}
SetShowInviteDlgTabPageParams::SetShowInviteDlgTabPageParams(const SetShowInviteDlgTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&tabpage_, &from.tabpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&bshow_) -
    reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
}

void SetShowInviteDlgTabPageParams::SharedCtor() {
  ::memset(&tabpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bshow_) -
      reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
}

SetShowInviteDlgTabPageParams::~SetShowInviteDlgTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowInviteDlgTabPageParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowInviteDlgTabPageParams::ArenaDtor(void* object) {
  SetShowInviteDlgTabPageParams* _this = reinterpret_cast< SetShowInviteDlgTabPageParams* >(object);
  (void)_this;
}
void SetShowInviteDlgTabPageParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowInviteDlgTabPageParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowInviteDlgTabPageParams& SetShowInviteDlgTabPageParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowInviteDlgTabPageParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowInviteDlgTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tabpage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bshow_) -
        reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowInviteDlgTabPageParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tabPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tabpage(&has_bits);
          tabpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bShow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowInviteDlgTabPageParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tabPage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tabpage(), target);
  }

  // optional bool bShow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  return target;
}

size_t SetShowInviteDlgTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tabPage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tabpage());
    }

    // optional bool bShow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowInviteDlgTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowInviteDlgTabPageParams*>(
      &from));
}

void SetShowInviteDlgTabPageParams::MergeFrom(const SetShowInviteDlgTabPageParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tabpage_ = from.tabpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      bshow_ = from.bshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetShowInviteDlgTabPageParams::CopyFrom(const SetShowInviteDlgTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowInviteDlgTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowInviteDlgTabPageParams::IsInitialized() const {
  return true;
}

void SetShowInviteDlgTabPageParams::InternalSwap(SetShowInviteDlgTabPageParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetShowInviteDlgTabPageParams, bshow_)
      + sizeof(SetShowInviteDlgTabPageParams::bshow_)
      - PROTOBUF_FIELD_OFFSET(SetShowInviteDlgTabPageParams, tabpage_)>(
          reinterpret_cast<char*>(&tabpage_),
          reinterpret_cast<char*>(&other->tabpage_));
}

std::string SetShowInviteDlgTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowInviteDlgTabPageParams";
}


// ===================================================================

void SetShowH323SubTabPageParams::InitAsDefaultInstance() {
}
class SetShowH323SubTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowH323SubTabPageParams>()._has_bits_);
  static void set_has_tabpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetShowH323SubTabPageParams::SetShowH323SubTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
}
SetShowH323SubTabPageParams::SetShowH323SubTabPageParams(const SetShowH323SubTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&tabpage_, &from.tabpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&bshow_) -
    reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
}

void SetShowH323SubTabPageParams::SharedCtor() {
  ::memset(&tabpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bshow_) -
      reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
}

SetShowH323SubTabPageParams::~SetShowH323SubTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowH323SubTabPageParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowH323SubTabPageParams::ArenaDtor(void* object) {
  SetShowH323SubTabPageParams* _this = reinterpret_cast< SetShowH323SubTabPageParams* >(object);
  (void)_this;
}
void SetShowH323SubTabPageParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowH323SubTabPageParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowH323SubTabPageParams& SetShowH323SubTabPageParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowH323SubTabPageParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowH323SubTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tabpage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bshow_) -
        reinterpret_cast<char*>(&tabpage_)) + sizeof(bshow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowH323SubTabPageParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tabPage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tabpage(&has_bits);
          tabpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bShow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowH323SubTabPageParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tabPage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tabpage(), target);
  }

  // optional bool bShow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  return target;
}

size_t SetShowH323SubTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tabPage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tabpage());
    }

    // optional bool bShow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowH323SubTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowH323SubTabPageParams*>(
      &from));
}

void SetShowH323SubTabPageParams::MergeFrom(const SetShowH323SubTabPageParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tabpage_ = from.tabpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      bshow_ = from.bshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetShowH323SubTabPageParams::CopyFrom(const SetShowH323SubTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowH323SubTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowH323SubTabPageParams::IsInitialized() const {
  return true;
}

void SetShowH323SubTabPageParams::InternalSwap(SetShowH323SubTabPageParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetShowH323SubTabPageParams, bshow_)
      + sizeof(SetShowH323SubTabPageParams::bshow_)
      - PROTOBUF_FIELD_OFFSET(SetShowH323SubTabPageParams, tabpage_)>(
          reinterpret_cast<char*>(&tabpage_),
          reinterpret_cast<char*>(&other->tabpage_));
}

std::string SetShowH323SubTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowH323SubTabPageParams";
}


// ===================================================================

void HideSwitchCameraButtonParams::InitAsDefaultInstance() {
}
class HideSwitchCameraButtonParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideSwitchCameraButtonParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideSwitchCameraButtonParams::HideSwitchCameraButtonParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
}
HideSwitchCameraButtonParams::HideSwitchCameraButtonParams(const HideSwitchCameraButtonParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
}

void HideSwitchCameraButtonParams::SharedCtor() {
  bhide_ = false;
}

HideSwitchCameraButtonParams::~HideSwitchCameraButtonParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideSwitchCameraButtonParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideSwitchCameraButtonParams::ArenaDtor(void* object) {
  HideSwitchCameraButtonParams* _this = reinterpret_cast< HideSwitchCameraButtonParams* >(object);
  (void)_this;
}
void HideSwitchCameraButtonParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideSwitchCameraButtonParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideSwitchCameraButtonParams& HideSwitchCameraButtonParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideSwitchCameraButtonParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideSwitchCameraButtonParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideSwitchCameraButtonParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideSwitchCameraButtonParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  return target;
}

size_t HideSwitchCameraButtonParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideSwitchCameraButtonParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideSwitchCameraButtonParams*>(
      &from));
}

void HideSwitchCameraButtonParams::MergeFrom(const HideSwitchCameraButtonParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideSwitchCameraButtonParams::CopyFrom(const HideSwitchCameraButtonParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideSwitchCameraButtonParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideSwitchCameraButtonParams::IsInitialized() const {
  return true;
}

void HideSwitchCameraButtonParams::InternalSwap(HideSwitchCameraButtonParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideSwitchCameraButtonParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideSwitchCameraButtonParams";
}


// ===================================================================

void HideCopyUrlOnInviteWindowParams::InitAsDefaultInstance() {
}
class HideCopyUrlOnInviteWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideCopyUrlOnInviteWindowParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideCopyUrlOnInviteWindowParams::HideCopyUrlOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
}
HideCopyUrlOnInviteWindowParams::HideCopyUrlOnInviteWindowParams(const HideCopyUrlOnInviteWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
}

void HideCopyUrlOnInviteWindowParams::SharedCtor() {
  bhide_ = false;
}

HideCopyUrlOnInviteWindowParams::~HideCopyUrlOnInviteWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideCopyUrlOnInviteWindowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideCopyUrlOnInviteWindowParams::ArenaDtor(void* object) {
  HideCopyUrlOnInviteWindowParams* _this = reinterpret_cast< HideCopyUrlOnInviteWindowParams* >(object);
  (void)_this;
}
void HideCopyUrlOnInviteWindowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideCopyUrlOnInviteWindowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideCopyUrlOnInviteWindowParams& HideCopyUrlOnInviteWindowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideCopyUrlOnInviteWindowParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideCopyUrlOnInviteWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideCopyUrlOnInviteWindowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideCopyUrlOnInviteWindowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  return target;
}

size_t HideCopyUrlOnInviteWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideCopyUrlOnInviteWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideCopyUrlOnInviteWindowParams*>(
      &from));
}

void HideCopyUrlOnInviteWindowParams::MergeFrom(const HideCopyUrlOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideCopyUrlOnInviteWindowParams::CopyFrom(const HideCopyUrlOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideCopyUrlOnInviteWindowParams::IsInitialized() const {
  return true;
}

void HideCopyUrlOnInviteWindowParams::InternalSwap(HideCopyUrlOnInviteWindowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideCopyUrlOnInviteWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideCopyUrlOnInviteWindowParams";
}


// ===================================================================

void HideCopyInvitationOnInviteWindowParams::InitAsDefaultInstance() {
}
class HideCopyInvitationOnInviteWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideCopyInvitationOnInviteWindowParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideCopyInvitationOnInviteWindowParams::HideCopyInvitationOnInviteWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
}
HideCopyInvitationOnInviteWindowParams::HideCopyInvitationOnInviteWindowParams(const HideCopyInvitationOnInviteWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
}

void HideCopyInvitationOnInviteWindowParams::SharedCtor() {
  bhide_ = false;
}

HideCopyInvitationOnInviteWindowParams::~HideCopyInvitationOnInviteWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideCopyInvitationOnInviteWindowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideCopyInvitationOnInviteWindowParams::ArenaDtor(void* object) {
  HideCopyInvitationOnInviteWindowParams* _this = reinterpret_cast< HideCopyInvitationOnInviteWindowParams* >(object);
  (void)_this;
}
void HideCopyInvitationOnInviteWindowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideCopyInvitationOnInviteWindowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideCopyInvitationOnInviteWindowParams& HideCopyInvitationOnInviteWindowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideCopyInvitationOnInviteWindowParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideCopyInvitationOnInviteWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideCopyInvitationOnInviteWindowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideCopyInvitationOnInviteWindowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  return target;
}

size_t HideCopyInvitationOnInviteWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideCopyInvitationOnInviteWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideCopyInvitationOnInviteWindowParams*>(
      &from));
}

void HideCopyInvitationOnInviteWindowParams::MergeFrom(const HideCopyInvitationOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideCopyInvitationOnInviteWindowParams::CopyFrom(const HideCopyInvitationOnInviteWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideCopyInvitationOnInviteWindowParams::IsInitialized() const {
  return true;
}

void HideCopyInvitationOnInviteWindowParams::InternalSwap(HideCopyInvitationOnInviteWindowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideCopyInvitationOnInviteWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideCopyInvitationOnInviteWindowParams";
}


// ===================================================================

void HideKeypadButtonOnMeetingWindowParams::InitAsDefaultInstance() {
}
class HideKeypadButtonOnMeetingWindowParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideKeypadButtonOnMeetingWindowParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideKeypadButtonOnMeetingWindowParams::HideKeypadButtonOnMeetingWindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
}
HideKeypadButtonOnMeetingWindowParams::HideKeypadButtonOnMeetingWindowParams(const HideKeypadButtonOnMeetingWindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
}

void HideKeypadButtonOnMeetingWindowParams::SharedCtor() {
  bhide_ = false;
}

HideKeypadButtonOnMeetingWindowParams::~HideKeypadButtonOnMeetingWindowParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideKeypadButtonOnMeetingWindowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideKeypadButtonOnMeetingWindowParams::ArenaDtor(void* object) {
  HideKeypadButtonOnMeetingWindowParams* _this = reinterpret_cast< HideKeypadButtonOnMeetingWindowParams* >(object);
  (void)_this;
}
void HideKeypadButtonOnMeetingWindowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideKeypadButtonOnMeetingWindowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideKeypadButtonOnMeetingWindowParams& HideKeypadButtonOnMeetingWindowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideKeypadButtonOnMeetingWindowParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideKeypadButtonOnMeetingWindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideKeypadButtonOnMeetingWindowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideKeypadButtonOnMeetingWindowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  return target;
}

size_t HideKeypadButtonOnMeetingWindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideKeypadButtonOnMeetingWindowParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideKeypadButtonOnMeetingWindowParams*>(
      &from));
}

void HideKeypadButtonOnMeetingWindowParams::MergeFrom(const HideKeypadButtonOnMeetingWindowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideKeypadButtonOnMeetingWindowParams::CopyFrom(const HideKeypadButtonOnMeetingWindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideKeypadButtonOnMeetingWindowParams::IsInitialized() const {
  return true;
}

void HideKeypadButtonOnMeetingWindowParams::InternalSwap(HideKeypadButtonOnMeetingWindowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideKeypadButtonOnMeetingWindowParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideKeypadButtonOnMeetingWindowParams";
}


// ===================================================================

void HideRemoteControlOnMeetingUIParams::InitAsDefaultInstance() {
}
class HideRemoteControlOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideRemoteControlOnMeetingUIParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideRemoteControlOnMeetingUIParams::HideRemoteControlOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
}
HideRemoteControlOnMeetingUIParams::HideRemoteControlOnMeetingUIParams(const HideRemoteControlOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
}

void HideRemoteControlOnMeetingUIParams::SharedCtor() {
  bhide_ = false;
}

HideRemoteControlOnMeetingUIParams::~HideRemoteControlOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideRemoteControlOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideRemoteControlOnMeetingUIParams::ArenaDtor(void* object) {
  HideRemoteControlOnMeetingUIParams* _this = reinterpret_cast< HideRemoteControlOnMeetingUIParams* >(object);
  (void)_this;
}
void HideRemoteControlOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideRemoteControlOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideRemoteControlOnMeetingUIParams& HideRemoteControlOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideRemoteControlOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideRemoteControlOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideRemoteControlOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideRemoteControlOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  return target;
}

size_t HideRemoteControlOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideRemoteControlOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideRemoteControlOnMeetingUIParams*>(
      &from));
}

void HideRemoteControlOnMeetingUIParams::MergeFrom(const HideRemoteControlOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideRemoteControlOnMeetingUIParams::CopyFrom(const HideRemoteControlOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideRemoteControlOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideRemoteControlOnMeetingUIParams::InternalSwap(HideRemoteControlOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideRemoteControlOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideRemoteControlOnMeetingUIParams";
}


// ===================================================================

void HideQAOnMeetingUIParams::InitAsDefaultInstance() {
}
class HideQAOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideQAOnMeetingUIParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideQAOnMeetingUIParams::HideQAOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
}
HideQAOnMeetingUIParams::HideQAOnMeetingUIParams(const HideQAOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
}

void HideQAOnMeetingUIParams::SharedCtor() {
  bhide_ = false;
}

HideQAOnMeetingUIParams::~HideQAOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideQAOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideQAOnMeetingUIParams::ArenaDtor(void* object) {
  HideQAOnMeetingUIParams* _this = reinterpret_cast< HideQAOnMeetingUIParams* >(object);
  (void)_this;
}
void HideQAOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideQAOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideQAOnMeetingUIParams& HideQAOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideQAOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideQAOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideQAOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideQAOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  return target;
}

size_t HideQAOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideQAOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideQAOnMeetingUIParams*>(
      &from));
}

void HideQAOnMeetingUIParams::MergeFrom(const HideQAOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideQAOnMeetingUIParams::CopyFrom(const HideQAOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideQAOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideQAOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HideQAOnMeetingUIParams::InternalSwap(HideQAOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideQAOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideQAOnMeetingUIParams";
}


// ===================================================================

void HidePollOnMeetingUIParams::InitAsDefaultInstance() {
}
class HidePollOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HidePollOnMeetingUIParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HidePollOnMeetingUIParams::HidePollOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
}
HidePollOnMeetingUIParams::HidePollOnMeetingUIParams(const HidePollOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
}

void HidePollOnMeetingUIParams::SharedCtor() {
  bhide_ = false;
}

HidePollOnMeetingUIParams::~HidePollOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HidePollOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HidePollOnMeetingUIParams::ArenaDtor(void* object) {
  HidePollOnMeetingUIParams* _this = reinterpret_cast< HidePollOnMeetingUIParams* >(object);
  (void)_this;
}
void HidePollOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HidePollOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HidePollOnMeetingUIParams& HidePollOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HidePollOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HidePollOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HidePollOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HidePollOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  return target;
}

size_t HidePollOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HidePollOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HidePollOnMeetingUIParams*>(
      &from));
}

void HidePollOnMeetingUIParams::MergeFrom(const HidePollOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HidePollOnMeetingUIParams::CopyFrom(const HidePollOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HidePollOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidePollOnMeetingUIParams::IsInitialized() const {
  return true;
}

void HidePollOnMeetingUIParams::InternalSwap(HidePollOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HidePollOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.HidePollOnMeetingUIParams";
}


// ===================================================================

void EnableInputMeetingPasswordDlgParams::InitAsDefaultInstance() {
}
class EnableInputMeetingPasswordDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInputMeetingPasswordDlgParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInputMeetingPasswordDlgParams::EnableInputMeetingPasswordDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
}
EnableInputMeetingPasswordDlgParams::EnableInputMeetingPasswordDlgParams(const EnableInputMeetingPasswordDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
}

void EnableInputMeetingPasswordDlgParams::SharedCtor() {
  benable_ = false;
}

EnableInputMeetingPasswordDlgParams::~EnableInputMeetingPasswordDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableInputMeetingPasswordDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableInputMeetingPasswordDlgParams::ArenaDtor(void* object) {
  EnableInputMeetingPasswordDlgParams* _this = reinterpret_cast< EnableInputMeetingPasswordDlgParams* >(object);
  (void)_this;
}
void EnableInputMeetingPasswordDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableInputMeetingPasswordDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableInputMeetingPasswordDlgParams& EnableInputMeetingPasswordDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableInputMeetingPasswordDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableInputMeetingPasswordDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInputMeetingPasswordDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableInputMeetingPasswordDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  return target;
}

size_t EnableInputMeetingPasswordDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInputMeetingPasswordDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableInputMeetingPasswordDlgParams*>(
      &from));
}

void EnableInputMeetingPasswordDlgParams::MergeFrom(const EnableInputMeetingPasswordDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableInputMeetingPasswordDlgParams::CopyFrom(const EnableInputMeetingPasswordDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInputMeetingPasswordDlgParams::IsInitialized() const {
  return true;
}

void EnableInputMeetingPasswordDlgParams::InternalSwap(EnableInputMeetingPasswordDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableInputMeetingPasswordDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInputMeetingPasswordDlgParams";
}


// ===================================================================

void EnableInputMeetingScreenNameDlgParams::InitAsDefaultInstance() {
}
class EnableInputMeetingScreenNameDlgParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInputMeetingScreenNameDlgParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInputMeetingScreenNameDlgParams::EnableInputMeetingScreenNameDlgParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
}
EnableInputMeetingScreenNameDlgParams::EnableInputMeetingScreenNameDlgParams(const EnableInputMeetingScreenNameDlgParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
}

void EnableInputMeetingScreenNameDlgParams::SharedCtor() {
  benable_ = false;
}

EnableInputMeetingScreenNameDlgParams::~EnableInputMeetingScreenNameDlgParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableInputMeetingScreenNameDlgParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableInputMeetingScreenNameDlgParams::ArenaDtor(void* object) {
  EnableInputMeetingScreenNameDlgParams* _this = reinterpret_cast< EnableInputMeetingScreenNameDlgParams* >(object);
  (void)_this;
}
void EnableInputMeetingScreenNameDlgParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableInputMeetingScreenNameDlgParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableInputMeetingScreenNameDlgParams& EnableInputMeetingScreenNameDlgParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableInputMeetingScreenNameDlgParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableInputMeetingScreenNameDlgParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInputMeetingScreenNameDlgParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableInputMeetingScreenNameDlgParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  return target;
}

size_t EnableInputMeetingScreenNameDlgParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInputMeetingScreenNameDlgParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableInputMeetingScreenNameDlgParams*>(
      &from));
}

void EnableInputMeetingScreenNameDlgParams::MergeFrom(const EnableInputMeetingScreenNameDlgParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableInputMeetingScreenNameDlgParams::CopyFrom(const EnableInputMeetingScreenNameDlgParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInputMeetingScreenNameDlgParams::IsInitialized() const {
  return true;
}

void EnableInputMeetingScreenNameDlgParams::InternalSwap(EnableInputMeetingScreenNameDlgParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableInputMeetingScreenNameDlgParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInputMeetingScreenNameDlgParams";
}


// ===================================================================

void RedirectWebinarNeedRegisterParams::InitAsDefaultInstance() {
}
class RedirectWebinarNeedRegisterParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectWebinarNeedRegisterParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectWebinarNeedRegisterParams::RedirectWebinarNeedRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
}
RedirectWebinarNeedRegisterParams::RedirectWebinarNeedRegisterParams(const RedirectWebinarNeedRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
}

void RedirectWebinarNeedRegisterParams::SharedCtor() {
  bredirect_ = false;
}

RedirectWebinarNeedRegisterParams::~RedirectWebinarNeedRegisterParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectWebinarNeedRegisterParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectWebinarNeedRegisterParams::ArenaDtor(void* object) {
  RedirectWebinarNeedRegisterParams* _this = reinterpret_cast< RedirectWebinarNeedRegisterParams* >(object);
  (void)_this;
}
void RedirectWebinarNeedRegisterParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectWebinarNeedRegisterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectWebinarNeedRegisterParams& RedirectWebinarNeedRegisterParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectWebinarNeedRegisterParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectWebinarNeedRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectWebinarNeedRegisterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectWebinarNeedRegisterParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  return target;
}

size_t RedirectWebinarNeedRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectWebinarNeedRegisterParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectWebinarNeedRegisterParams*>(
      &from));
}

void RedirectWebinarNeedRegisterParams::MergeFrom(const RedirectWebinarNeedRegisterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectWebinarNeedRegisterParams::CopyFrom(const RedirectWebinarNeedRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectWebinarNeedRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectWebinarNeedRegisterParams::IsInitialized() const {
  return true;
}

void RedirectWebinarNeedRegisterParams::InternalSwap(RedirectWebinarNeedRegisterParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectWebinarNeedRegisterParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectWebinarNeedRegisterParams";
}


// ===================================================================

void RedirectEndOtherMeetingParams::InitAsDefaultInstance() {
}
class RedirectEndOtherMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectEndOtherMeetingParams>()._has_bits_);
  static void set_has_bredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RedirectEndOtherMeetingParams::RedirectEndOtherMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
}
RedirectEndOtherMeetingParams::RedirectEndOtherMeetingParams(const RedirectEndOtherMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bredirect_ = from.bredirect_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
}

void RedirectEndOtherMeetingParams::SharedCtor() {
  bredirect_ = false;
}

RedirectEndOtherMeetingParams::~RedirectEndOtherMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RedirectEndOtherMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedirectEndOtherMeetingParams::ArenaDtor(void* object) {
  RedirectEndOtherMeetingParams* _this = reinterpret_cast< RedirectEndOtherMeetingParams* >(object);
  (void)_this;
}
void RedirectEndOtherMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedirectEndOtherMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectEndOtherMeetingParams& RedirectEndOtherMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectEndOtherMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RedirectEndOtherMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bredirect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectEndOtherMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bRedirect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bredirect(&has_bits);
          bredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectEndOtherMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bRedirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  return target;
}

size_t RedirectEndOtherMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bRedirect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectEndOtherMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RedirectEndOtherMeetingParams*>(
      &from));
}

void RedirectEndOtherMeetingParams::MergeFrom(const RedirectEndOtherMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bredirect()) {
    _internal_set_bredirect(from._internal_bredirect());
  }
}

void RedirectEndOtherMeetingParams::CopyFrom(const RedirectEndOtherMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RedirectEndOtherMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectEndOtherMeetingParams::IsInitialized() const {
  return true;
}

void RedirectEndOtherMeetingParams::InternalSwap(RedirectEndOtherMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bredirect_, other->bredirect_);
}

std::string RedirectEndOtherMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.RedirectEndOtherMeetingParams";
}


// ===================================================================

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::InitAsDefaultInstance() {
}
class EnableForceAutoStartMyVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableForceAutoStartMyVideoWhenJoinMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableForceAutoStartMyVideoWhenJoinMeetingParams::EnableForceAutoStartMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
}
EnableForceAutoStartMyVideoWhenJoinMeetingParams::EnableForceAutoStartMyVideoWhenJoinMeetingParams(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableForceAutoStartMyVideoWhenJoinMeetingParams::~EnableForceAutoStartMyVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::ArenaDtor(void* object) {
  EnableForceAutoStartMyVideoWhenJoinMeetingParams* _this = reinterpret_cast< EnableForceAutoStartMyVideoWhenJoinMeetingParams* >(object);
  (void)_this;
}
void EnableForceAutoStartMyVideoWhenJoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableForceAutoStartMyVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableForceAutoStartMyVideoWhenJoinMeetingParams& EnableForceAutoStartMyVideoWhenJoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableForceAutoStartMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableForceAutoStartMyVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableForceAutoStartMyVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableForceAutoStartMyVideoWhenJoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  return target;
}

size_t EnableForceAutoStartMyVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableForceAutoStartMyVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::MergeFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::CopyFrom(const EnableForceAutoStartMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableForceAutoStartMyVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableForceAutoStartMyVideoWhenJoinMeetingParams::InternalSwap(EnableForceAutoStartMyVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableForceAutoStartMyVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableForceAutoStartMyVideoWhenJoinMeetingParams";
}


// ===================================================================

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::InitAsDefaultInstance() {
}
class EnableForceAutoStopMyVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableForceAutoStopMyVideoWhenJoinMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableForceAutoStopMyVideoWhenJoinMeetingParams::EnableForceAutoStopMyVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
}
EnableForceAutoStopMyVideoWhenJoinMeetingParams::EnableForceAutoStopMyVideoWhenJoinMeetingParams(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableForceAutoStopMyVideoWhenJoinMeetingParams::~EnableForceAutoStopMyVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::ArenaDtor(void* object) {
  EnableForceAutoStopMyVideoWhenJoinMeetingParams* _this = reinterpret_cast< EnableForceAutoStopMyVideoWhenJoinMeetingParams* >(object);
  (void)_this;
}
void EnableForceAutoStopMyVideoWhenJoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableForceAutoStopMyVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableForceAutoStopMyVideoWhenJoinMeetingParams& EnableForceAutoStopMyVideoWhenJoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableForceAutoStopMyVideoWhenJoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableForceAutoStopMyVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableForceAutoStopMyVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableForceAutoStopMyVideoWhenJoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  return target;
}

size_t EnableForceAutoStopMyVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableForceAutoStopMyVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::MergeFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::CopyFrom(const EnableForceAutoStopMyVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableForceAutoStopMyVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableForceAutoStopMyVideoWhenJoinMeetingParams::InternalSwap(EnableForceAutoStopMyVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableForceAutoStopMyVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableForceAutoStopMyVideoWhenJoinMeetingParams";
}


// ===================================================================

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::InitAsDefaultInstance() {
}
class DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
}
DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SharedCtor() {
  bdisable_ = false;
}

DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::~DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::ArenaDtor(void* object) {
  DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* _this = reinterpret_cast< DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* >(object);
  (void)_this;
}
void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  return target;
}

size_t DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams*>(
      &from));
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::MergeFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::CopyFrom(const DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::InternalSwap(DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams";
}


// ===================================================================

void DisableShowJoinMeetingWndParams::InitAsDefaultInstance() {
}
class DisableShowJoinMeetingWndParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableShowJoinMeetingWndParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableShowJoinMeetingWndParams::DisableShowJoinMeetingWndParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
}
DisableShowJoinMeetingWndParams::DisableShowJoinMeetingWndParams(const DisableShowJoinMeetingWndParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
}

void DisableShowJoinMeetingWndParams::SharedCtor() {
  bdisable_ = false;
}

DisableShowJoinMeetingWndParams::~DisableShowJoinMeetingWndParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableShowJoinMeetingWndParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableShowJoinMeetingWndParams::ArenaDtor(void* object) {
  DisableShowJoinMeetingWndParams* _this = reinterpret_cast< DisableShowJoinMeetingWndParams* >(object);
  (void)_this;
}
void DisableShowJoinMeetingWndParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableShowJoinMeetingWndParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableShowJoinMeetingWndParams& DisableShowJoinMeetingWndParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableShowJoinMeetingWndParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableShowJoinMeetingWndParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableShowJoinMeetingWndParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableShowJoinMeetingWndParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  return target;
}

size_t DisableShowJoinMeetingWndParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableShowJoinMeetingWndParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableShowJoinMeetingWndParams*>(
      &from));
}

void DisableShowJoinMeetingWndParams::MergeFrom(const DisableShowJoinMeetingWndParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableShowJoinMeetingWndParams::CopyFrom(const DisableShowJoinMeetingWndParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableShowJoinMeetingWndParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableShowJoinMeetingWndParams::IsInitialized() const {
  return true;
}

void DisableShowJoinMeetingWndParams::InternalSwap(DisableShowJoinMeetingWndParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableShowJoinMeetingWndParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableShowJoinMeetingWndParams";
}


// ===================================================================

void DisableConfidentialWatermarkParams::InitAsDefaultInstance() {
}
class DisableConfidentialWatermarkParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableConfidentialWatermarkParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableConfidentialWatermarkParams::DisableConfidentialWatermarkParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
}
DisableConfidentialWatermarkParams::DisableConfidentialWatermarkParams(const DisableConfidentialWatermarkParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
}

void DisableConfidentialWatermarkParams::SharedCtor() {
  bdisable_ = false;
}

DisableConfidentialWatermarkParams::~DisableConfidentialWatermarkParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableConfidentialWatermarkParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableConfidentialWatermarkParams::ArenaDtor(void* object) {
  DisableConfidentialWatermarkParams* _this = reinterpret_cast< DisableConfidentialWatermarkParams* >(object);
  (void)_this;
}
void DisableConfidentialWatermarkParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableConfidentialWatermarkParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableConfidentialWatermarkParams& DisableConfidentialWatermarkParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableConfidentialWatermarkParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableConfidentialWatermarkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableConfidentialWatermarkParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableConfidentialWatermarkParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  return target;
}

size_t DisableConfidentialWatermarkParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableConfidentialWatermarkParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableConfidentialWatermarkParams*>(
      &from));
}

void DisableConfidentialWatermarkParams::MergeFrom(const DisableConfidentialWatermarkParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableConfidentialWatermarkParams::CopyFrom(const DisableConfidentialWatermarkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableConfidentialWatermarkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableConfidentialWatermarkParams::IsInitialized() const {
  return true;
}

void DisableConfidentialWatermarkParams::InternalSwap(DisableConfidentialWatermarkParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableConfidentialWatermarkParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableConfidentialWatermarkParams";
}


// ===================================================================

void DisableToolbarInviteButtonClickOriginActionParams::InitAsDefaultInstance() {
}
class DisableToolbarInviteButtonClickOriginActionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableToolbarInviteButtonClickOriginActionParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableToolbarInviteButtonClickOriginActionParams::DisableToolbarInviteButtonClickOriginActionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
}
DisableToolbarInviteButtonClickOriginActionParams::DisableToolbarInviteButtonClickOriginActionParams(const DisableToolbarInviteButtonClickOriginActionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
}

void DisableToolbarInviteButtonClickOriginActionParams::SharedCtor() {
  bdisable_ = false;
}

DisableToolbarInviteButtonClickOriginActionParams::~DisableToolbarInviteButtonClickOriginActionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableToolbarInviteButtonClickOriginActionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableToolbarInviteButtonClickOriginActionParams::ArenaDtor(void* object) {
  DisableToolbarInviteButtonClickOriginActionParams* _this = reinterpret_cast< DisableToolbarInviteButtonClickOriginActionParams* >(object);
  (void)_this;
}
void DisableToolbarInviteButtonClickOriginActionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableToolbarInviteButtonClickOriginActionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableToolbarInviteButtonClickOriginActionParams& DisableToolbarInviteButtonClickOriginActionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableToolbarInviteButtonClickOriginActionParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableToolbarInviteButtonClickOriginActionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableToolbarInviteButtonClickOriginActionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableToolbarInviteButtonClickOriginActionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  return target;
}

size_t DisableToolbarInviteButtonClickOriginActionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableToolbarInviteButtonClickOriginActionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableToolbarInviteButtonClickOriginActionParams*>(
      &from));
}

void DisableToolbarInviteButtonClickOriginActionParams::MergeFrom(const DisableToolbarInviteButtonClickOriginActionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableToolbarInviteButtonClickOriginActionParams::CopyFrom(const DisableToolbarInviteButtonClickOriginActionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableToolbarInviteButtonClickOriginActionParams::IsInitialized() const {
  return true;
}

void DisableToolbarInviteButtonClickOriginActionParams::InternalSwap(DisableToolbarInviteButtonClickOriginActionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableToolbarInviteButtonClickOriginActionParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableToolbarInviteButtonClickOriginActionParams";
}


// ===================================================================

void SetShowVideoOptimizeChkboxParams::InitAsDefaultInstance() {
}
class SetShowVideoOptimizeChkboxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetShowVideoOptimizeChkboxParams>()._has_bits_);
  static void set_has_bshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetShowVideoOptimizeChkboxParams::SetShowVideoOptimizeChkboxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
}
SetShowVideoOptimizeChkboxParams::SetShowVideoOptimizeChkboxParams(const SetShowVideoOptimizeChkboxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bshow_ = from.bshow_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
}

void SetShowVideoOptimizeChkboxParams::SharedCtor() {
  bshow_ = false;
}

SetShowVideoOptimizeChkboxParams::~SetShowVideoOptimizeChkboxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetShowVideoOptimizeChkboxParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetShowVideoOptimizeChkboxParams::ArenaDtor(void* object) {
  SetShowVideoOptimizeChkboxParams* _this = reinterpret_cast< SetShowVideoOptimizeChkboxParams* >(object);
  (void)_this;
}
void SetShowVideoOptimizeChkboxParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShowVideoOptimizeChkboxParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShowVideoOptimizeChkboxParams& SetShowVideoOptimizeChkboxParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShowVideoOptimizeChkboxParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetShowVideoOptimizeChkboxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetShowVideoOptimizeChkboxParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bShow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bshow(&has_bits);
          bshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShowVideoOptimizeChkboxParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bShow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  return target;
}

size_t SetShowVideoOptimizeChkboxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bShow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShowVideoOptimizeChkboxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetShowVideoOptimizeChkboxParams*>(
      &from));
}

void SetShowVideoOptimizeChkboxParams::MergeFrom(const SetShowVideoOptimizeChkboxParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bshow()) {
    _internal_set_bshow(from._internal_bshow());
  }
}

void SetShowVideoOptimizeChkboxParams::CopyFrom(const SetShowVideoOptimizeChkboxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShowVideoOptimizeChkboxParams::IsInitialized() const {
  return true;
}

void SetShowVideoOptimizeChkboxParams::InternalSwap(SetShowVideoOptimizeChkboxParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bshow_, other->bshow_);
}

std::string SetShowVideoOptimizeChkboxParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetShowVideoOptimizeChkboxParams";
}


// ===================================================================

void InputMeetingPasswordAndScreenNameParams::InitAsDefaultInstance() {
}
class InputMeetingPasswordAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingPasswordAndScreenNameParams>()._has_bits_);
  static void set_has_psw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputMeetingPasswordAndScreenNameParams::InputMeetingPasswordAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
}
InputMeetingPasswordAndScreenNameParams::InputMeetingPasswordAndScreenNameParams(const InputMeetingPasswordAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_psw()) {
    psw_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_psw(),
      GetArena());
  }
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_screenname()) {
    screenname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_screenname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
}

void InputMeetingPasswordAndScreenNameParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputMeetingPasswordAndScreenNameParams_electron_5fsdk_2eproto.base);
  psw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputMeetingPasswordAndScreenNameParams::~InputMeetingPasswordAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InputMeetingPasswordAndScreenNameParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  psw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputMeetingPasswordAndScreenNameParams::ArenaDtor(void* object) {
  InputMeetingPasswordAndScreenNameParams* _this = reinterpret_cast< InputMeetingPasswordAndScreenNameParams* >(object);
  (void)_this;
}
void InputMeetingPasswordAndScreenNameParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputMeetingPasswordAndScreenNameParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputMeetingPasswordAndScreenNameParams& InputMeetingPasswordAndScreenNameParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputMeetingPasswordAndScreenNameParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void InputMeetingPasswordAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      psw_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      screenname_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingPasswordAndScreenNameParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string psw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_psw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputMeetingPasswordAndScreenNameParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string psw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_psw(), target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  return target;
}

size_t InputMeetingPasswordAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string psw = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_psw());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingPasswordAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InputMeetingPasswordAndScreenNameParams*>(
      &from));
}

void InputMeetingPasswordAndScreenNameParams::MergeFrom(const InputMeetingPasswordAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_psw(from._internal_psw());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_screenname(from._internal_screenname());
    }
  }
}

void InputMeetingPasswordAndScreenNameParams::CopyFrom(const InputMeetingPasswordAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingPasswordAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingPasswordAndScreenNameParams::InternalSwap(InputMeetingPasswordAndScreenNameParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  psw_.Swap(&other->psw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string InputMeetingPasswordAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingPasswordAndScreenNameParams";
}


// ===================================================================

void InputMeetingIDAndScreenNameParams::InitAsDefaultInstance() {
}
class InputMeetingIDAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingIDAndScreenNameParams>()._has_bits_);
  static void set_has_meetingid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputMeetingIDAndScreenNameParams::InputMeetingIDAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
}
InputMeetingIDAndScreenNameParams::InputMeetingIDAndScreenNameParams(const InputMeetingIDAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  meetingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_meetingid()) {
    meetingid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_meetingid(),
      GetArena());
  }
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_screenname()) {
    screenname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_screenname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
}

void InputMeetingIDAndScreenNameParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputMeetingIDAndScreenNameParams_electron_5fsdk_2eproto.base);
  meetingid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputMeetingIDAndScreenNameParams::~InputMeetingIDAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InputMeetingIDAndScreenNameParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  meetingid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputMeetingIDAndScreenNameParams::ArenaDtor(void* object) {
  InputMeetingIDAndScreenNameParams* _this = reinterpret_cast< InputMeetingIDAndScreenNameParams* >(object);
  (void)_this;
}
void InputMeetingIDAndScreenNameParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputMeetingIDAndScreenNameParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputMeetingIDAndScreenNameParams& InputMeetingIDAndScreenNameParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputMeetingIDAndScreenNameParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void InputMeetingIDAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      meetingid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      screenname_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingIDAndScreenNameParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string meetingID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_meetingid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputMeetingIDAndScreenNameParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string meetingID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_meetingid(), target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  return target;
}

size_t InputMeetingIDAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string meetingID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_meetingid());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingIDAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InputMeetingIDAndScreenNameParams*>(
      &from));
}

void InputMeetingIDAndScreenNameParams::MergeFrom(const InputMeetingIDAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_meetingid(from._internal_meetingid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_screenname(from._internal_screenname());
    }
  }
}

void InputMeetingIDAndScreenNameParams::CopyFrom(const InputMeetingIDAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingIDAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingIDAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingIDAndScreenNameParams::InternalSwap(InputMeetingIDAndScreenNameParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  meetingid_.Swap(&other->meetingid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string InputMeetingIDAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingIDAndScreenNameParams";
}


// ===================================================================

void InputMeetingScreenNameParams::InitAsDefaultInstance() {
}
class InputMeetingScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputMeetingScreenNameParams>()._has_bits_);
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputMeetingScreenNameParams::InputMeetingScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
}
InputMeetingScreenNameParams::InputMeetingScreenNameParams(const InputMeetingScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_screenname()) {
    screenname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_screenname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
}

void InputMeetingScreenNameParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputMeetingScreenNameParams_electron_5fsdk_2eproto.base);
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputMeetingScreenNameParams::~InputMeetingScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputMeetingScreenNameParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InputMeetingScreenNameParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputMeetingScreenNameParams::ArenaDtor(void* object) {
  InputMeetingScreenNameParams* _this = reinterpret_cast< InputMeetingScreenNameParams* >(object);
  (void)_this;
}
void InputMeetingScreenNameParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputMeetingScreenNameParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputMeetingScreenNameParams& InputMeetingScreenNameParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputMeetingScreenNameParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void InputMeetingScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    screenname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputMeetingScreenNameParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string screenName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputMeetingScreenNameParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string screenName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputMeetingScreenNameParams)
  return target;
}

size_t InputMeetingScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string screenName = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_screenname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputMeetingScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InputMeetingScreenNameParams*>(
      &from));
}

void InputMeetingScreenNameParams::MergeFrom(const InputMeetingScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_screenname()) {
    _internal_set_screenname(from._internal_screenname());
  }
}

void InputMeetingScreenNameParams::CopyFrom(const InputMeetingScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputMeetingScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMeetingScreenNameParams::IsInitialized() const {
  return true;
}

void InputMeetingScreenNameParams::InternalSwap(InputMeetingScreenNameParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string InputMeetingScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputMeetingScreenNameParams";
}


// ===================================================================

void InputWebinarRegisterEmailAndScreenNameParams::InitAsDefaultInstance() {
}
class InputWebinarRegisterEmailAndScreenNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InputWebinarRegisterEmailAndScreenNameParams>()._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputWebinarRegisterEmailAndScreenNameParams::InputWebinarRegisterEmailAndScreenNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
}
InputWebinarRegisterEmailAndScreenNameParams::InputWebinarRegisterEmailAndScreenNameParams(const InputWebinarRegisterEmailAndScreenNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_screenname()) {
    screenname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_screenname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
}

void InputWebinarRegisterEmailAndScreenNameParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputWebinarRegisterEmailAndScreenNameParams_electron_5fsdk_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputWebinarRegisterEmailAndScreenNameParams::~InputWebinarRegisterEmailAndScreenNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void InputWebinarRegisterEmailAndScreenNameParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputWebinarRegisterEmailAndScreenNameParams::ArenaDtor(void* object) {
  InputWebinarRegisterEmailAndScreenNameParams* _this = reinterpret_cast< InputWebinarRegisterEmailAndScreenNameParams* >(object);
  (void)_this;
}
void InputWebinarRegisterEmailAndScreenNameParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputWebinarRegisterEmailAndScreenNameParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputWebinarRegisterEmailAndScreenNameParams& InputWebinarRegisterEmailAndScreenNameParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputWebinarRegisterEmailAndScreenNameParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void InputWebinarRegisterEmailAndScreenNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      screenname_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputWebinarRegisterEmailAndScreenNameParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string screenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputWebinarRegisterEmailAndScreenNameParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // optional string screenName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  return target;
}

size_t InputWebinarRegisterEmailAndScreenNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string screenName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputWebinarRegisterEmailAndScreenNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InputWebinarRegisterEmailAndScreenNameParams*>(
      &from));
}

void InputWebinarRegisterEmailAndScreenNameParams::MergeFrom(const InputWebinarRegisterEmailAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_screenname(from._internal_screenname());
    }
  }
}

void InputWebinarRegisterEmailAndScreenNameParams::CopyFrom(const InputWebinarRegisterEmailAndScreenNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputWebinarRegisterEmailAndScreenNameParams::IsInitialized() const {
  return true;
}

void InputWebinarRegisterEmailAndScreenNameParams::InternalSwap(InputWebinarRegisterEmailAndScreenNameParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string InputWebinarRegisterEmailAndScreenNameParams::GetTypeName() const {
  return "com.electron.sdk.proto.InputWebinarRegisterEmailAndScreenNameParams";
}


// ===================================================================

void CallOutH323Params::InitAsDefaultInstance() {
}
class CallOutH323Params::_Internal {
 public:
  using HasBits = decltype(std::declval<CallOutH323Params>()._has_bits_);
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_devicee164num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h323devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CallOutH323Params::CallOutH323Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CallOutH323Params)
}
CallOutH323Params::CallOutH323Params(const CallOutH323Params& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_devicename()) {
    devicename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devicename(),
      GetArena());
  }
  deviceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deviceip()) {
    deviceip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceip(),
      GetArena());
  }
  devicee164num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_devicee164num()) {
    devicee164num_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devicee164num(),
      GetArena());
  }
  h323devicetype_ = from.h323devicetype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CallOutH323Params)
}

void CallOutH323Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallOutH323Params_electron_5fsdk_2eproto.base);
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicee164num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h323devicetype_ = 0;
}

CallOutH323Params::~CallOutH323Params() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CallOutH323Params)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CallOutH323Params::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicee164num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallOutH323Params::ArenaDtor(void* object) {
  CallOutH323Params* _this = reinterpret_cast< CallOutH323Params* >(object);
  (void)_this;
}
void CallOutH323Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallOutH323Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallOutH323Params& CallOutH323Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallOutH323Params_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void CallOutH323Params::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CallOutH323Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      devicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      deviceip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      devicee164num_.ClearNonDefaultToEmpty();
    }
  }
  h323devicetype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallOutH323Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deviceIP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deviceE164num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_devicee164num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 h323DeviceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_h323devicetype(&has_bits);
          h323devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallOutH323Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CallOutH323Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deviceName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devicename(), target);
  }

  // optional string deviceIP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceip(), target);
  }

  // optional string deviceE164num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicee164num(), target);
  }

  // optional int32 h323DeviceType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h323devicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CallOutH323Params)
  return target;
}

size_t CallOutH323Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CallOutH323Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string deviceName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

    // optional string deviceIP = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceip());
    }

    // optional string deviceE164num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicee164num());
    }

    // optional int32 h323DeviceType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_h323devicetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallOutH323Params::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallOutH323Params*>(
      &from));
}

void CallOutH323Params::MergeFrom(const CallOutH323Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CallOutH323Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_deviceip(from._internal_deviceip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_devicee164num(from._internal_devicee164num());
    }
    if (cached_has_bits & 0x00000008u) {
      h323devicetype_ = from.h323devicetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallOutH323Params::CopyFrom(const CallOutH323Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CallOutH323Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallOutH323Params::IsInitialized() const {
  return true;
}

void CallOutH323Params::InternalSwap(CallOutH323Params* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  devicename_.Swap(&other->devicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceip_.Swap(&other->deviceip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devicee164num_.Swap(&other->devicee164num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(h323devicetype_, other->h323devicetype_);
}

std::string CallOutH323Params::GetTypeName() const {
  return "com.electron.sdk.proto.CallOutH323Params";
}


// ===================================================================

void GetUserInfoByUserIDParams::InitAsDefaultInstance() {
}
class GetUserInfoByUserIDParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserInfoByUserIDParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetUserInfoByUserIDParams::GetUserInfoByUserIDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
}
GetUserInfoByUserIDParams::GetUserInfoByUserIDParams(const GetUserInfoByUserIDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
}

void GetUserInfoByUserIDParams::SharedCtor() {
  userid_ = 0u;
}

GetUserInfoByUserIDParams::~GetUserInfoByUserIDParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetUserInfoByUserIDParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUserInfoByUserIDParams::ArenaDtor(void* object) {
  GetUserInfoByUserIDParams* _this = reinterpret_cast< GetUserInfoByUserIDParams* >(object);
  (void)_this;
}
void GetUserInfoByUserIDParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserInfoByUserIDParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserInfoByUserIDParams& GetUserInfoByUserIDParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserInfoByUserIDParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void GetUserInfoByUserIDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetUserInfoByUserIDParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserInfoByUserIDParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  return target;
}

size_t GetUserInfoByUserIDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserInfoByUserIDParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUserInfoByUserIDParams*>(
      &from));
}

void GetUserInfoByUserIDParams::MergeFrom(const GetUserInfoByUserIDParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void GetUserInfoByUserIDParams::CopyFrom(const GetUserInfoByUserIDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetUserInfoByUserIDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoByUserIDParams::IsInitialized() const {
  return true;
}

void GetUserInfoByUserIDParams::InternalSwap(GetUserInfoByUserIDParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string GetUserInfoByUserIDParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetUserInfoByUserIDParams";
}


// ===================================================================

void CanStartRecordingParams::InitAsDefaultInstance() {
}
class CanStartRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CanStartRecordingParams>()._has_bits_);
  static void set_has_bcloudrecording(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CanStartRecordingParams::CanStartRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CanStartRecordingParams)
}
CanStartRecordingParams::CanStartRecordingParams(const CanStartRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bcloudrecording_, &from.bcloudrecording_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&bcloudrecording_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CanStartRecordingParams)
}

void CanStartRecordingParams::SharedCtor() {
  ::memset(&bcloudrecording_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&bcloudrecording_)) + sizeof(userid_));
}

CanStartRecordingParams::~CanStartRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CanStartRecordingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CanStartRecordingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CanStartRecordingParams::ArenaDtor(void* object) {
  CanStartRecordingParams* _this = reinterpret_cast< CanStartRecordingParams* >(object);
  (void)_this;
}
void CanStartRecordingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanStartRecordingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanStartRecordingParams& CanStartRecordingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanStartRecordingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void CanStartRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CanStartRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&bcloudrecording_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&bcloudrecording_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CanStartRecordingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bCloudRecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bcloudrecording(&has_bits);
          bcloudrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanStartRecordingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CanStartRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bCloudRecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bcloudrecording(), target);
  }

  // optional uint32 userID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CanStartRecordingParams)
  return target;
}

size_t CanStartRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CanStartRecordingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bCloudRecording = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 userID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanStartRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CanStartRecordingParams*>(
      &from));
}

void CanStartRecordingParams::MergeFrom(const CanStartRecordingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CanStartRecordingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bcloudrecording_ = from.bcloudrecording_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanStartRecordingParams::CopyFrom(const CanStartRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CanStartRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanStartRecordingParams::IsInitialized() const {
  return true;
}

void CanStartRecordingParams::InternalSwap(CanStartRecordingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanStartRecordingParams, userid_)
      + sizeof(CanStartRecordingParams::userid_)
      - PROTOBUF_FIELD_OFFSET(CanStartRecordingParams, bcloudrecording_)>(
          reinterpret_cast<char*>(&bcloudrecording_),
          reinterpret_cast<char*>(&other->bcloudrecording_));
}

std::string CanStartRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.CanStartRecordingParams";
}


// ===================================================================

void IsSupportLocalRecordingParams::InitAsDefaultInstance() {
}
class IsSupportLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<IsSupportLocalRecordingParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsSupportLocalRecordingParams::IsSupportLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
}
IsSupportLocalRecordingParams::IsSupportLocalRecordingParams(const IsSupportLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
}

void IsSupportLocalRecordingParams::SharedCtor() {
  userid_ = 0u;
}

IsSupportLocalRecordingParams::~IsSupportLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsSupportLocalRecordingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsSupportLocalRecordingParams::ArenaDtor(void* object) {
  IsSupportLocalRecordingParams* _this = reinterpret_cast< IsSupportLocalRecordingParams* >(object);
  (void)_this;
}
void IsSupportLocalRecordingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsSupportLocalRecordingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsSupportLocalRecordingParams& IsSupportLocalRecordingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsSupportLocalRecordingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void IsSupportLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsSupportLocalRecordingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsSupportLocalRecordingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  return target;
}

size_t IsSupportLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsSupportLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsSupportLocalRecordingParams*>(
      &from));
}

void IsSupportLocalRecordingParams::MergeFrom(const IsSupportLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void IsSupportLocalRecordingParams::CopyFrom(const IsSupportLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.IsSupportLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSupportLocalRecordingParams::IsInitialized() const {
  return true;
}

void IsSupportLocalRecordingParams::InternalSwap(IsSupportLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string IsSupportLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.IsSupportLocalRecordingParams";
}


// ===================================================================

void AllowLocalRecordingParams::InitAsDefaultInstance() {
}
class AllowLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowLocalRecordingParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowLocalRecordingParams::AllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.AllowLocalRecordingParams)
}
AllowLocalRecordingParams::AllowLocalRecordingParams(const AllowLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.AllowLocalRecordingParams)
}

void AllowLocalRecordingParams::SharedCtor() {
  userid_ = 0;
}

AllowLocalRecordingParams::~AllowLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.AllowLocalRecordingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllowLocalRecordingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllowLocalRecordingParams::ArenaDtor(void* object) {
  AllowLocalRecordingParams* _this = reinterpret_cast< AllowLocalRecordingParams* >(object);
  (void)_this;
}
void AllowLocalRecordingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowLocalRecordingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowLocalRecordingParams& AllowLocalRecordingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowLocalRecordingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void AllowLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowLocalRecordingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowLocalRecordingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.AllowLocalRecordingParams)
  return target;
}

size_t AllowLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllowLocalRecordingParams*>(
      &from));
}

void AllowLocalRecordingParams::MergeFrom(const AllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void AllowLocalRecordingParams::CopyFrom(const AllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.AllowLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowLocalRecordingParams::IsInitialized() const {
  return true;
}

void AllowLocalRecordingParams::InternalSwap(AllowLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string AllowLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.AllowLocalRecordingParams";
}


// ===================================================================

void DisAllowLocalRecordingParams::InitAsDefaultInstance() {
}
class DisAllowLocalRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisAllowLocalRecordingParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisAllowLocalRecordingParams::DisAllowLocalRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
}
DisAllowLocalRecordingParams::DisAllowLocalRecordingParams(const DisAllowLocalRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
}

void DisAllowLocalRecordingParams::SharedCtor() {
  userid_ = 0u;
}

DisAllowLocalRecordingParams::~DisAllowLocalRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisAllowLocalRecordingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisAllowLocalRecordingParams::ArenaDtor(void* object) {
  DisAllowLocalRecordingParams* _this = reinterpret_cast< DisAllowLocalRecordingParams* >(object);
  (void)_this;
}
void DisAllowLocalRecordingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisAllowLocalRecordingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisAllowLocalRecordingParams& DisAllowLocalRecordingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisAllowLocalRecordingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisAllowLocalRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisAllowLocalRecordingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisAllowLocalRecordingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  return target;
}

size_t DisAllowLocalRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisAllowLocalRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisAllowLocalRecordingParams*>(
      &from));
}

void DisAllowLocalRecordingParams::MergeFrom(const DisAllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void DisAllowLocalRecordingParams::CopyFrom(const DisAllowLocalRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisAllowLocalRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisAllowLocalRecordingParams::IsInitialized() const {
  return true;
}

void DisAllowLocalRecordingParams::InternalSwap(DisAllowLocalRecordingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string DisAllowLocalRecordingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisAllowLocalRecordingParams";
}


// ===================================================================

void StartAppShareParams::InitAsDefaultInstance() {
}
class StartAppShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartAppShareParams>()._has_bits_);
  static void set_has_hshareapp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartAppShareParams::StartAppShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartAppShareParams)
}
StartAppShareParams::StartAppShareParams(const StartAppShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hshareapp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hshareapp()) {
    hshareapp_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hshareapp(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartAppShareParams)
}

void StartAppShareParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartAppShareParams_electron_5fsdk_2eproto.base);
  hshareapp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartAppShareParams::~StartAppShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartAppShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartAppShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hshareapp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartAppShareParams::ArenaDtor(void* object) {
  StartAppShareParams* _this = reinterpret_cast< StartAppShareParams* >(object);
  (void)_this;
}
void StartAppShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartAppShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAppShareParams& StartAppShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartAppShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StartAppShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartAppShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hshareapp_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartAppShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hShareApp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hshareapp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartAppShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartAppShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hShareApp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hshareapp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartAppShareParams)
  return target;
}

size_t StartAppShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartAppShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hShareApp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hshareapp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAppShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartAppShareParams*>(
      &from));
}

void StartAppShareParams::MergeFrom(const StartAppShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartAppShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hshareapp()) {
    _internal_set_hshareapp(from._internal_hshareapp());
  }
}

void StartAppShareParams::CopyFrom(const StartAppShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartAppShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAppShareParams::IsInitialized() const {
  return true;
}

void StartAppShareParams::InternalSwap(StartAppShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hshareapp_.Swap(&other->hshareapp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string StartAppShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartAppShareParams";
}


// ===================================================================

void StartMonitorShareParams::InitAsDefaultInstance() {
}
class StartMonitorShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartMonitorShareParams>()._has_bits_);
  static void set_has_monitorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartMonitorShareParams::StartMonitorShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.StartMonitorShareParams)
}
StartMonitorShareParams::StartMonitorShareParams(const StartMonitorShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  monitorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_monitorid()) {
    monitorid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_monitorid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.StartMonitorShareParams)
}

void StartMonitorShareParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartMonitorShareParams_electron_5fsdk_2eproto.base);
  monitorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartMonitorShareParams::~StartMonitorShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.StartMonitorShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartMonitorShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  monitorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartMonitorShareParams::ArenaDtor(void* object) {
  StartMonitorShareParams* _this = reinterpret_cast< StartMonitorShareParams* >(object);
  (void)_this;
}
void StartMonitorShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartMonitorShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartMonitorShareParams& StartMonitorShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartMonitorShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void StartMonitorShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.StartMonitorShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    monitorid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartMonitorShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string monitorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_monitorid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartMonitorShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.StartMonitorShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string monitorID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_monitorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.StartMonitorShareParams)
  return target;
}

size_t StartMonitorShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.StartMonitorShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string monitorID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_monitorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMonitorShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartMonitorShareParams*>(
      &from));
}

void StartMonitorShareParams::MergeFrom(const StartMonitorShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.StartMonitorShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monitorid()) {
    _internal_set_monitorid(from._internal_monitorid());
  }
}

void StartMonitorShareParams::CopyFrom(const StartMonitorShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.StartMonitorShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMonitorShareParams::IsInitialized() const {
  return true;
}

void StartMonitorShareParams::InternalSwap(StartMonitorShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  monitorid_.Swap(&other->monitorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string StartMonitorShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.StartMonitorShareParams";
}


// ===================================================================

void MuteVideoParams::InitAsDefaultInstance() {
}
class MuteVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MuteVideoParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MuteVideoParams::MuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.MuteVideoParams)
}
MuteVideoParams::MuteVideoParams(const MuteVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.MuteVideoParams)
}

void MuteVideoParams::SharedCtor() {
  userid_ = 0u;
}

MuteVideoParams::~MuteVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.MuteVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MuteVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MuteVideoParams::ArenaDtor(void* object) {
  MuteVideoParams* _this = reinterpret_cast< MuteVideoParams* >(object);
  (void)_this;
}
void MuteVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MuteVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteVideoParams& MuteVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void MuteVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.MuteVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MuteVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.MuteVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.MuteVideoParams)
  return target;
}

size_t MuteVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.MuteVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MuteVideoParams*>(
      &from));
}

void MuteVideoParams::MergeFrom(const MuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.MuteVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void MuteVideoParams::CopyFrom(const MuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.MuteVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteVideoParams::IsInitialized() const {
  return true;
}

void MuteVideoParams::InternalSwap(MuteVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string MuteVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.MuteVideoParams";
}


// ===================================================================

void UnMuteVideoParams::InitAsDefaultInstance() {
}
class UnMuteVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnMuteVideoParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnMuteVideoParams::UnMuteVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnMuteVideoParams)
}
UnMuteVideoParams::UnMuteVideoParams(const UnMuteVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnMuteVideoParams)
}

void UnMuteVideoParams::SharedCtor() {
  userid_ = 0u;
}

UnMuteVideoParams::~UnMuteVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnMuteVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnMuteVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnMuteVideoParams::ArenaDtor(void* object) {
  UnMuteVideoParams* _this = reinterpret_cast< UnMuteVideoParams* >(object);
  (void)_this;
}
void UnMuteVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnMuteVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnMuteVideoParams& UnMuteVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnMuteVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void UnMuteVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnMuteVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnMuteVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnMuteVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnMuteVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnMuteVideoParams)
  return target;
}

size_t UnMuteVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnMuteVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 userID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnMuteVideoParams*>(
      &from));
}

void UnMuteVideoParams::MergeFrom(const UnMuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnMuteVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void UnMuteVideoParams::CopyFrom(const UnMuteVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnMuteVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteVideoParams::IsInitialized() const {
  return true;
}

void UnMuteVideoParams::InternalSwap(UnMuteVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

std::string UnMuteVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnMuteVideoParams";
}


// ===================================================================

void PinVideoParams::InitAsDefaultInstance() {
}
class PinVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PinVideoParams>()._has_bits_);
  static void set_has_bpin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bfirstview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PinVideoParams::PinVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.PinVideoParams)
}
PinVideoParams::PinVideoParams(const PinVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bpin_, &from.bpin_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&bpin_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.PinVideoParams)
}

void PinVideoParams::SharedCtor() {
  ::memset(&bpin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&bpin_)) + sizeof(userid_));
}

PinVideoParams::~PinVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.PinVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PinVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PinVideoParams::ArenaDtor(void* object) {
  PinVideoParams* _this = reinterpret_cast< PinVideoParams* >(object);
  (void)_this;
}
void PinVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PinVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinVideoParams& PinVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void PinVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.PinVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&bpin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&bpin_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PinVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bPin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bpin(&has_bits);
          bpin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bFirstView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bfirstview(&has_bits);
          bfirstview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.PinVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bPin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bpin(), target);
  }

  // optional bool bFirstView = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bfirstview(), target);
  }

  // optional uint32 userID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.PinVideoParams)
  return target;
}

size_t PinVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.PinVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool bPin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bFirstView = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 userID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PinVideoParams*>(
      &from));
}

void PinVideoParams::MergeFrom(const PinVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.PinVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bpin_ = from.bpin_;
    }
    if (cached_has_bits & 0x00000002u) {
      bfirstview_ = from.bfirstview_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PinVideoParams::CopyFrom(const PinVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.PinVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinVideoParams::IsInitialized() const {
  return true;
}

void PinVideoParams::InternalSwap(PinVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PinVideoParams, userid_)
      + sizeof(PinVideoParams::userid_)
      - PROTOBUF_FIELD_OFFSET(PinVideoParams, bpin_)>(
          reinterpret_cast<char*>(&bpin_),
          reinterpret_cast<char*>(&other->bpin_));
}

std::string PinVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.PinVideoParams";
}


// ===================================================================

void SpotlightVideoParams::InitAsDefaultInstance() {
}
class SpotlightVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SpotlightVideoParams>()._has_bits_);
  static void set_has_bspotlight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpotlightVideoParams::SpotlightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SpotlightVideoParams)
}
SpotlightVideoParams::SpotlightVideoParams(const SpotlightVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&bspotlight_, &from.bspotlight_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&bspotlight_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SpotlightVideoParams)
}

void SpotlightVideoParams::SharedCtor() {
  ::memset(&bspotlight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&bspotlight_)) + sizeof(userid_));
}

SpotlightVideoParams::~SpotlightVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SpotlightVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SpotlightVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpotlightVideoParams::ArenaDtor(void* object) {
  SpotlightVideoParams* _this = reinterpret_cast< SpotlightVideoParams* >(object);
  (void)_this;
}
void SpotlightVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotlightVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotlightVideoParams& SpotlightVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotlightVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SpotlightVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SpotlightVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&bspotlight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&bspotlight_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpotlightVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bSpotlight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bspotlight(&has_bits);
          bspotlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotlightVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SpotlightVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bSpotlight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bspotlight(), target);
  }

  // optional uint32 userID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SpotlightVideoParams)
  return target;
}

size_t SpotlightVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SpotlightVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bSpotlight = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 userID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotlightVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SpotlightVideoParams*>(
      &from));
}

void SpotlightVideoParams::MergeFrom(const SpotlightVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SpotlightVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bspotlight_ = from.bspotlight_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpotlightVideoParams::CopyFrom(const SpotlightVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SpotlightVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotlightVideoParams::IsInitialized() const {
  return true;
}

void SpotlightVideoParams::InternalSwap(SpotlightVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotlightVideoParams, userid_)
      + sizeof(SpotlightVideoParams::userid_)
      - PROTOBUF_FIELD_OFFSET(SpotlightVideoParams, bspotlight_)>(
          reinterpret_cast<char*>(&bspotlight_),
          reinterpret_cast<char*>(&other->bspotlight_));
}

std::string SpotlightVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SpotlightVideoParams";
}


// ===================================================================

void HideOrShowNoVideoUserOnVideoWallParams::InitAsDefaultInstance() {
}
class HideOrShowNoVideoUserOnVideoWallParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideOrShowNoVideoUserOnVideoWallParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideOrShowNoVideoUserOnVideoWallParams::HideOrShowNoVideoUserOnVideoWallParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
}
HideOrShowNoVideoUserOnVideoWallParams::HideOrShowNoVideoUserOnVideoWallParams(const HideOrShowNoVideoUserOnVideoWallParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
}

void HideOrShowNoVideoUserOnVideoWallParams::SharedCtor() {
  bhide_ = false;
}

HideOrShowNoVideoUserOnVideoWallParams::~HideOrShowNoVideoUserOnVideoWallParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideOrShowNoVideoUserOnVideoWallParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideOrShowNoVideoUserOnVideoWallParams::ArenaDtor(void* object) {
  HideOrShowNoVideoUserOnVideoWallParams* _this = reinterpret_cast< HideOrShowNoVideoUserOnVideoWallParams* >(object);
  (void)_this;
}
void HideOrShowNoVideoUserOnVideoWallParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideOrShowNoVideoUserOnVideoWallParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideOrShowNoVideoUserOnVideoWallParams& HideOrShowNoVideoUserOnVideoWallParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideOrShowNoVideoUserOnVideoWallParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideOrShowNoVideoUserOnVideoWallParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideOrShowNoVideoUserOnVideoWallParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideOrShowNoVideoUserOnVideoWallParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  return target;
}

size_t HideOrShowNoVideoUserOnVideoWallParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideOrShowNoVideoUserOnVideoWallParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideOrShowNoVideoUserOnVideoWallParams*>(
      &from));
}

void HideOrShowNoVideoUserOnVideoWallParams::MergeFrom(const HideOrShowNoVideoUserOnVideoWallParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideOrShowNoVideoUserOnVideoWallParams::CopyFrom(const HideOrShowNoVideoUserOnVideoWallParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideOrShowNoVideoUserOnVideoWallParams::IsInitialized() const {
  return true;
}

void HideOrShowNoVideoUserOnVideoWallParams::InternalSwap(HideOrShowNoVideoUserOnVideoWallParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideOrShowNoVideoUserOnVideoWallParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideOrShowNoVideoUserOnVideoWallParams";
}


// ===================================================================

void CreateRendererParams::InitAsDefaultInstance() {
}
class CreateRendererParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRendererParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateRendererParams::CreateRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.CreateRendererParams)
}
CreateRendererParams::CreateRendererParams(const CreateRendererParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.CreateRendererParams)
}

void CreateRendererParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

CreateRendererParams::~CreateRendererParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.CreateRendererParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateRendererParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateRendererParams::ArenaDtor(void* object) {
  CreateRendererParams* _this = reinterpret_cast< CreateRendererParams* >(object);
  (void)_this;
}
void CreateRendererParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRendererParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRendererParams& CreateRendererParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRendererParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void CreateRendererParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.CreateRendererParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateRendererParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRendererParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.CreateRendererParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.CreateRendererParams)
  return target;
}

size_t CreateRendererParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.CreateRendererParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRendererParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateRendererParams*>(
      &from));
}

void CreateRendererParams::MergeFrom(const CreateRendererParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.CreateRendererParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void CreateRendererParams::CopyFrom(const CreateRendererParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.CreateRendererParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRendererParams::IsInitialized() const {
  return true;
}

void CreateRendererParams::InternalSwap(CreateRendererParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string CreateRendererParams::GetTypeName() const {
  return "com.electron.sdk.proto.CreateRendererParams";
}


// ===================================================================

void DestroyRendererParams::InitAsDefaultInstance() {
}
class DestroyRendererParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyRendererParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestroyRendererParams::DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DestroyRendererParams)
}
DestroyRendererParams::DestroyRendererParams(const DestroyRendererParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DestroyRendererParams)
}

void DestroyRendererParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

DestroyRendererParams::~DestroyRendererParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DestroyRendererParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DestroyRendererParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DestroyRendererParams::ArenaDtor(void* object) {
  DestroyRendererParams* _this = reinterpret_cast< DestroyRendererParams* >(object);
  (void)_this;
}
void DestroyRendererParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroyRendererParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyRendererParams& DestroyRendererParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyRendererParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DestroyRendererParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DestroyRendererParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DestroyRendererParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyRendererParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DestroyRendererParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DestroyRendererParams)
  return target;
}

size_t DestroyRendererParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DestroyRendererParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyRendererParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DestroyRendererParams*>(
      &from));
}

void DestroyRendererParams::MergeFrom(const DestroyRendererParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DestroyRendererParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void DestroyRendererParams::CopyFrom(const DestroyRendererParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DestroyRendererParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRendererParams::IsInitialized() const {
  return true;
}

void DestroyRendererParams::InternalSwap(DestroyRendererParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string DestroyRendererParams::GetTypeName() const {
  return "com.electron.sdk.proto.DestroyRendererParams";
}


// ===================================================================

void SubscribeParams::InitAsDefaultInstance() {
}
class SubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeParams>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rawdatatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SubscribeParams::SubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SubscribeParams)
}
SubscribeParams::SubscribeParams(const SubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&recvhandle_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(recvhandle_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SubscribeParams)
}

void SubscribeParams::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recvhandle_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(recvhandle_));
}

SubscribeParams::~SubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SubscribeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SubscribeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeParams::ArenaDtor(void* object) {
  SubscribeParams* _this = reinterpret_cast< SubscribeParams* >(object);
  (void)_this;
}
void SubscribeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeParams& SubscribeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SubscribeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recvhandle_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(recvhandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscribeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rawDataType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rawdatatype(&has_bits);
          rawdatatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 recvHandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SubscribeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 userID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  // optional int32 rawDataType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rawdatatype(), target);
  }

  // optional uint64 recvHandle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SubscribeParams)
  return target;
}

size_t SubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SubscribeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 userID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userid());
    }

    // optional int32 rawDataType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rawdatatype());
    }

    // optional uint64 recvHandle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_recvhandle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubscribeParams*>(
      &from));
}

void SubscribeParams::MergeFrom(const SubscribeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SubscribeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rawdatatype_ = from.rawdatatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      recvhandle_ = from.recvhandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeParams::CopyFrom(const SubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeParams::IsInitialized() const {
  return true;
}

void SubscribeParams::InternalSwap(SubscribeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeParams, recvhandle_)
      + sizeof(SubscribeParams::recvhandle_)
      - PROTOBUF_FIELD_OFFSET(SubscribeParams, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

std::string SubscribeParams::GetTypeName() const {
  return "com.electron.sdk.proto.SubscribeParams";
}


// ===================================================================

void UnSubscribeParams::InitAsDefaultInstance() {
}
class UnSubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnSubscribeParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnSubscribeParams::UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.UnSubscribeParams)
}
UnSubscribeParams::UnSubscribeParams(const UnSubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.UnSubscribeParams)
}

void UnSubscribeParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

UnSubscribeParams::~UnSubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.UnSubscribeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnSubscribeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnSubscribeParams::ArenaDtor(void* object) {
  UnSubscribeParams* _this = reinterpret_cast< UnSubscribeParams* >(object);
  (void)_this;
}
void UnSubscribeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnSubscribeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnSubscribeParams& UnSubscribeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnSubscribeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void UnSubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.UnSubscribeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnSubscribeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnSubscribeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.UnSubscribeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.UnSubscribeParams)
  return target;
}

size_t UnSubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.UnSubscribeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnSubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnSubscribeParams*>(
      &from));
}

void UnSubscribeParams::MergeFrom(const UnSubscribeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.UnSubscribeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void UnSubscribeParams::CopyFrom(const UnSubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.UnSubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeParams::IsInitialized() const {
  return true;
}

void UnSubscribeParams::InternalSwap(UnSubscribeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string UnSubscribeParams::GetTypeName() const {
  return "com.electron.sdk.proto.UnSubscribeParams";
}


// ===================================================================

void SetRawDataResolutionParams::InitAsDefaultInstance() {
}
class SetRawDataResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRawDataResolutionParams>()._has_bits_);
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetRawDataResolutionParams::SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetRawDataResolutionParams)
}
SetRawDataResolutionParams::SetRawDataResolutionParams(const SetRawDataResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&recvhandle_, &from.recvhandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&recvhandle_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetRawDataResolutionParams)
}

void SetRawDataResolutionParams::SharedCtor() {
  ::memset(&recvhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&recvhandle_)) + sizeof(resolution_));
}

SetRawDataResolutionParams::~SetRawDataResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetRawDataResolutionParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetRawDataResolutionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRawDataResolutionParams::ArenaDtor(void* object) {
  SetRawDataResolutionParams* _this = reinterpret_cast< SetRawDataResolutionParams* >(object);
  (void)_this;
}
void SetRawDataResolutionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRawDataResolutionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRawDataResolutionParams& SetRawDataResolutionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRawDataResolutionParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetRawDataResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&recvhandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolution_) -
        reinterpret_cast<char*>(&recvhandle_)) + sizeof(resolution_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetRawDataResolutionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_resolution(&has_bits);
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 recvHandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRawDataResolutionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 resolution = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_resolution(), target);
  }

  // optional uint64 recvHandle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetRawDataResolutionParams)
  return target;
}

size_t SetRawDataResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 recvHandle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_recvhandle());
    }

    // optional int32 resolution = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_resolution());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRawDataResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetRawDataResolutionParams*>(
      &from));
}

void SetRawDataResolutionParams::MergeFrom(const SetRawDataResolutionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      recvhandle_ = from.recvhandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      resolution_ = from.resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetRawDataResolutionParams::CopyFrom(const SetRawDataResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetRawDataResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRawDataResolutionParams::IsInitialized() const {
  return true;
}

void SetRawDataResolutionParams::InternalSwap(SetRawDataResolutionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, resolution_)
      + sizeof(SetRawDataResolutionParams::resolution_)
      - PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, recvhandle_)>(
          reinterpret_cast<char*>(&recvhandle_),
          reinterpret_cast<char*>(&other->recvhandle_));
}

std::string SetRawDataResolutionParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetRawDataResolutionParams";
}


// ===================================================================

void GetResolutionParams::InitAsDefaultInstance() {
}
class GetResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResolutionParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetResolutionParams::GetResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetResolutionParams)
}
GetResolutionParams::GetResolutionParams(const GetResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetResolutionParams)
}

void GetResolutionParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

GetResolutionParams::~GetResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetResolutionParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResolutionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResolutionParams::ArenaDtor(void* object) {
  GetResolutionParams* _this = reinterpret_cast< GetResolutionParams* >(object);
  (void)_this;
}
void GetResolutionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResolutionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResolutionParams& GetResolutionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResolutionParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void GetResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetResolutionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetResolutionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResolutionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetResolutionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetResolutionParams)
  return target;
}

size_t GetResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetResolutionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResolutionParams*>(
      &from));
}

void GetResolutionParams::MergeFrom(const GetResolutionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetResolutionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void GetResolutionParams::CopyFrom(const GetResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResolutionParams::IsInitialized() const {
  return true;
}

void GetResolutionParams::InternalSwap(GetResolutionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string GetResolutionParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetResolutionParams";
}


// ===================================================================

void GetRawDataTypeParams::InitAsDefaultInstance() {
}
class GetRawDataTypeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRawDataTypeParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRawDataTypeParams::GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetRawDataTypeParams)
}
GetRawDataTypeParams::GetRawDataTypeParams(const GetRawDataTypeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetRawDataTypeParams)
}

void GetRawDataTypeParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

GetRawDataTypeParams::~GetRawDataTypeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetRawDataTypeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetRawDataTypeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRawDataTypeParams::ArenaDtor(void* object) {
  GetRawDataTypeParams* _this = reinterpret_cast< GetRawDataTypeParams* >(object);
  (void)_this;
}
void GetRawDataTypeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawDataTypeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawDataTypeParams& GetRawDataTypeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawDataTypeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void GetRawDataTypeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetRawDataTypeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawDataTypeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetRawDataTypeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetRawDataTypeParams)
  return target;
}

size_t GetRawDataTypeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetRawDataTypeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawDataTypeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetRawDataTypeParams*>(
      &from));
}

void GetRawDataTypeParams::MergeFrom(const GetRawDataTypeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetRawDataTypeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void GetRawDataTypeParams::CopyFrom(const GetRawDataTypeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetRawDataTypeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawDataTypeParams::IsInitialized() const {
  return true;
}

void GetRawDataTypeParams::InternalSwap(GetRawDataTypeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string GetRawDataTypeParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetRawDataTypeParams";
}


// ===================================================================

void GetUserIdParams::InitAsDefaultInstance() {
}
class GetUserIdParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserIdParams>()._has_bits_);
  static void set_has_recvhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetUserIdParams::GetUserIdParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GetUserIdParams)
}
GetUserIdParams::GetUserIdParams(const GetUserIdParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recvhandle_ = from.recvhandle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GetUserIdParams)
}

void GetUserIdParams::SharedCtor() {
  recvhandle_ = PROTOBUF_ULONGLONG(0);
}

GetUserIdParams::~GetUserIdParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GetUserIdParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetUserIdParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUserIdParams::ArenaDtor(void* object) {
  GetUserIdParams* _this = reinterpret_cast< GetUserIdParams* >(object);
  (void)_this;
}
void GetUserIdParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserIdParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserIdParams& GetUserIdParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserIdParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void GetUserIdParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GetUserIdParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvhandle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetUserIdParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recvHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recvhandle(&has_bits);
          recvhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserIdParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GetUserIdParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recvHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recvhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GetUserIdParams)
  return target;
}

size_t GetUserIdParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GetUserIdParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recvHandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recvhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUserIdParams*>(
      &from));
}

void GetUserIdParams::MergeFrom(const GetUserIdParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GetUserIdParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recvhandle()) {
    _internal_set_recvhandle(from._internal_recvhandle());
  }
}

void GetUserIdParams::CopyFrom(const GetUserIdParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GetUserIdParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdParams::IsInitialized() const {
  return true;
}

void GetUserIdParams::InternalSwap(GetUserIdParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recvhandle_, other->recvhandle_);
}

std::string GetUserIdParams::GetTypeName() const {
  return "com.electron.sdk.proto.GetUserIdParams";
}


// ===================================================================

void EnableZoomAuthRealNameMeetingUIShownParams::InitAsDefaultInstance() {
}
class EnableZoomAuthRealNameMeetingUIShownParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableZoomAuthRealNameMeetingUIShownParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableZoomAuthRealNameMeetingUIShownParams::EnableZoomAuthRealNameMeetingUIShownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
}
EnableZoomAuthRealNameMeetingUIShownParams::EnableZoomAuthRealNameMeetingUIShownParams(const EnableZoomAuthRealNameMeetingUIShownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
}

void EnableZoomAuthRealNameMeetingUIShownParams::SharedCtor() {
  benable_ = false;
}

EnableZoomAuthRealNameMeetingUIShownParams::~EnableZoomAuthRealNameMeetingUIShownParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableZoomAuthRealNameMeetingUIShownParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableZoomAuthRealNameMeetingUIShownParams::ArenaDtor(void* object) {
  EnableZoomAuthRealNameMeetingUIShownParams* _this = reinterpret_cast< EnableZoomAuthRealNameMeetingUIShownParams* >(object);
  (void)_this;
}
void EnableZoomAuthRealNameMeetingUIShownParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableZoomAuthRealNameMeetingUIShownParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableZoomAuthRealNameMeetingUIShownParams& EnableZoomAuthRealNameMeetingUIShownParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableZoomAuthRealNameMeetingUIShownParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableZoomAuthRealNameMeetingUIShownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableZoomAuthRealNameMeetingUIShownParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableZoomAuthRealNameMeetingUIShownParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  return target;
}

size_t EnableZoomAuthRealNameMeetingUIShownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableZoomAuthRealNameMeetingUIShownParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableZoomAuthRealNameMeetingUIShownParams*>(
      &from));
}

void EnableZoomAuthRealNameMeetingUIShownParams::MergeFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableZoomAuthRealNameMeetingUIShownParams::CopyFrom(const EnableZoomAuthRealNameMeetingUIShownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZoomAuthRealNameMeetingUIShownParams::IsInitialized() const {
  return true;
}

void EnableZoomAuthRealNameMeetingUIShownParams::InternalSwap(EnableZoomAuthRealNameMeetingUIShownParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableZoomAuthRealNameMeetingUIShownParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableZoomAuthRealNameMeetingUIShownParams";
}


// ===================================================================

void RetrieveParams::InitAsDefaultInstance() {
}
class RetrieveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RetrieveParams>()._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetrieveParams::RetrieveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.RetrieveParams)
}
RetrieveParams::RetrieveParams(const RetrieveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countrycode()) {
    countrycode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_countrycode(),
      GetArena());
  }
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phonenum()) {
    phonenum_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phonenum(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.RetrieveParams)
}

void RetrieveParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveParams_electron_5fsdk_2eproto.base);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RetrieveParams::~RetrieveParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.RetrieveParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RetrieveParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RetrieveParams::ArenaDtor(void* object) {
  RetrieveParams* _this = reinterpret_cast< RetrieveParams* >(object);
  (void)_this;
}
void RetrieveParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetrieveParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveParams& RetrieveParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void RetrieveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.RetrieveParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      phonenum_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RetrieveParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.RetrieveParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_countrycode(), target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phonenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.RetrieveParams)
  return target;
}

size_t RetrieveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.RetrieveParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phonenum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RetrieveParams*>(
      &from));
}

void RetrieveParams::MergeFrom(const RetrieveParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.RetrieveParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_phonenum(from._internal_phonenum());
    }
  }
}

void RetrieveParams::CopyFrom(const RetrieveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.RetrieveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveParams::IsInitialized() const {
  return true;
}

void RetrieveParams::InternalSwap(RetrieveParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phonenum_.Swap(&other->phonenum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string RetrieveParams::GetTypeName() const {
  return "com.electron.sdk.proto.RetrieveParams";
}


// ===================================================================

void VerifyParams::InitAsDefaultInstance() {
}
class VerifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyParams>()._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verificationcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VerifyParams::VerifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.VerifyParams)
}
VerifyParams::VerifyParams(const VerifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countrycode()) {
    countrycode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_countrycode(),
      GetArena());
  }
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phonenum()) {
    phonenum_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phonenum(),
      GetArena());
  }
  verificationcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verificationcode()) {
    verificationcode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_verificationcode(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.VerifyParams)
}

void VerifyParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyParams_electron_5fsdk_2eproto.base);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verificationcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerifyParams::~VerifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.VerifyParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void VerifyParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verificationcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyParams::ArenaDtor(void* object) {
  VerifyParams* _this = reinterpret_cast< VerifyParams* >(object);
  (void)_this;
}
void VerifyParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyParams& VerifyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void VerifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.VerifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      phonenum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      verificationcode_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VerifyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verificationCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_verificationcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.VerifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_countrycode(), target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phonenum(), target);
  }

  // optional string verificationCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verificationcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.VerifyParams)
  return target;
}

size_t VerifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.VerifyParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phonenum());
    }

    // optional string verificationCode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verificationcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VerifyParams*>(
      &from));
}

void VerifyParams::MergeFrom(const VerifyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.VerifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_phonenum(from._internal_phonenum());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_verificationcode(from._internal_verificationcode());
    }
  }
}

void VerifyParams::CopyFrom(const VerifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.VerifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyParams::IsInitialized() const {
  return true;
}

void VerifyParams::InternalSwap(VerifyParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phonenum_.Swap(&other->phonenum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verificationcode_.Swap(&other->verificationcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string VerifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.VerifyParams";
}


// ===================================================================

void SetDefaultCellPhoneInfoParams::InitAsDefaultInstance() {
}
class SetDefaultCellPhoneInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetDefaultCellPhoneInfoParams>()._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetDefaultCellPhoneInfoParams::SetDefaultCellPhoneInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
}
SetDefaultCellPhoneInfoParams::SetDefaultCellPhoneInfoParams(const SetDefaultCellPhoneInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countrycode()) {
    countrycode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_countrycode(),
      GetArena());
  }
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phonenum()) {
    phonenum_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phonenum(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
}

void SetDefaultCellPhoneInfoParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDefaultCellPhoneInfoParams_electron_5fsdk_2eproto.base);
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetDefaultCellPhoneInfoParams::~SetDefaultCellPhoneInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetDefaultCellPhoneInfoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDefaultCellPhoneInfoParams::ArenaDtor(void* object) {
  SetDefaultCellPhoneInfoParams* _this = reinterpret_cast< SetDefaultCellPhoneInfoParams* >(object);
  (void)_this;
}
void SetDefaultCellPhoneInfoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDefaultCellPhoneInfoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDefaultCellPhoneInfoParams& SetDefaultCellPhoneInfoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDefaultCellPhoneInfoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetDefaultCellPhoneInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      phonenum_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetDefaultCellPhoneInfoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phoneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phonenum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDefaultCellPhoneInfoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_countrycode(), target);
  }

  // optional string phoneNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phonenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  return target;
}

size_t SetDefaultCellPhoneInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countrycode());
    }

    // optional string phoneNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phonenum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDefaultCellPhoneInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetDefaultCellPhoneInfoParams*>(
      &from));
}

void SetDefaultCellPhoneInfoParams::MergeFrom(const SetDefaultCellPhoneInfoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_phonenum(from._internal_phonenum());
    }
  }
}

void SetDefaultCellPhoneInfoParams::CopyFrom(const SetDefaultCellPhoneInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetDefaultCellPhoneInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDefaultCellPhoneInfoParams::IsInitialized() const {
  return true;
}

void SetDefaultCellPhoneInfoParams::InternalSwap(SetDefaultCellPhoneInfoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phonenum_.Swap(&other->phonenum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SetDefaultCellPhoneInfoParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetDefaultCellPhoneInfoParams";
}


// ===================================================================

void EnableAlwaysShowMeetingControlsParams::InitAsDefaultInstance() {
}
class EnableAlwaysShowMeetingControlsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysShowMeetingControlsParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysShowMeetingControlsParams::EnableAlwaysShowMeetingControlsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
}
EnableAlwaysShowMeetingControlsParams::EnableAlwaysShowMeetingControlsParams(const EnableAlwaysShowMeetingControlsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
}

void EnableAlwaysShowMeetingControlsParams::SharedCtor() {
  benable_ = false;
}

EnableAlwaysShowMeetingControlsParams::~EnableAlwaysShowMeetingControlsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAlwaysShowMeetingControlsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAlwaysShowMeetingControlsParams::ArenaDtor(void* object) {
  EnableAlwaysShowMeetingControlsParams* _this = reinterpret_cast< EnableAlwaysShowMeetingControlsParams* >(object);
  (void)_this;
}
void EnableAlwaysShowMeetingControlsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAlwaysShowMeetingControlsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAlwaysShowMeetingControlsParams& EnableAlwaysShowMeetingControlsParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAlwaysShowMeetingControlsParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAlwaysShowMeetingControlsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysShowMeetingControlsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAlwaysShowMeetingControlsParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  return target;
}

size_t EnableAlwaysShowMeetingControlsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysShowMeetingControlsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAlwaysShowMeetingControlsParams*>(
      &from));
}

void EnableAlwaysShowMeetingControlsParams::MergeFrom(const EnableAlwaysShowMeetingControlsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAlwaysShowMeetingControlsParams::CopyFrom(const EnableAlwaysShowMeetingControlsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysShowMeetingControlsParams::IsInitialized() const {
  return true;
}

void EnableAlwaysShowMeetingControlsParams::InternalSwap(EnableAlwaysShowMeetingControlsParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAlwaysShowMeetingControlsParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysShowMeetingControlsParams";
}


// ===================================================================

void SelectMicParams::InitAsDefaultInstance() {
}
class SelectMicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectMicParams>()._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectMicParams::SelectMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectMicParams)
}
SelectMicParams::SelectMicParams(const SelectMicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deviceid()) {
    deviceid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_devicename()) {
    devicename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devicename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectMicParams)
}

void SelectMicParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectMicParams_electron_5fsdk_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectMicParams::~SelectMicParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectMicParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectMicParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectMicParams::ArenaDtor(void* object) {
  SelectMicParams* _this = reinterpret_cast< SelectMicParams* >(object);
  (void)_this;
}
void SelectMicParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectMicParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectMicParams& SelectMicParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectMicParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SelectMicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectMicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      devicename_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectMicParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectMicParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectMicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectMicParams)
  return target;
}

size_t SelectMicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectMicParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectMicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectMicParams*>(
      &from));
}

void SelectMicParams::MergeFrom(const SelectMicParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectMicParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_devicename(from._internal_devicename());
    }
  }
}

void SelectMicParams::CopyFrom(const SelectMicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectMicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectMicParams::IsInitialized() const {
  return true;
}

void SelectMicParams::InternalSwap(SelectMicParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devicename_.Swap(&other->devicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SelectMicParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectMicParams";
}


// ===================================================================

void SelectSpeakerParams::InitAsDefaultInstance() {
}
class SelectSpeakerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectSpeakerParams>()._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectSpeakerParams::SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectSpeakerParams)
}
SelectSpeakerParams::SelectSpeakerParams(const SelectSpeakerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deviceid()) {
    deviceid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_devicename()) {
    devicename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devicename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectSpeakerParams)
}

void SelectSpeakerParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectSpeakerParams_electron_5fsdk_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectSpeakerParams::~SelectSpeakerParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectSpeakerParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectSpeakerParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectSpeakerParams::ArenaDtor(void* object) {
  SelectSpeakerParams* _this = reinterpret_cast< SelectSpeakerParams* >(object);
  (void)_this;
}
void SelectSpeakerParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectSpeakerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectSpeakerParams& SelectSpeakerParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectSpeakerParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SelectSpeakerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectSpeakerParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      devicename_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectSpeakerParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectSpeakerParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectSpeakerParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectSpeakerParams)
  return target;
}

size_t SelectSpeakerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectSpeakerParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectSpeakerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectSpeakerParams*>(
      &from));
}

void SelectSpeakerParams::MergeFrom(const SelectSpeakerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectSpeakerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_devicename(from._internal_devicename());
    }
  }
}

void SelectSpeakerParams::CopyFrom(const SelectSpeakerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectSpeakerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSpeakerParams::IsInitialized() const {
  return true;
}

void SelectSpeakerParams::InternalSwap(SelectSpeakerParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devicename_.Swap(&other->devicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SelectSpeakerParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectSpeakerParams";
}


// ===================================================================

void EnableAutoJoinAudioParams::InitAsDefaultInstance() {
}
class EnableAutoJoinAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoJoinAudioParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoJoinAudioParams::EnableAutoJoinAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
}
EnableAutoJoinAudioParams::EnableAutoJoinAudioParams(const EnableAutoJoinAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
}

void EnableAutoJoinAudioParams::SharedCtor() {
  benable_ = false;
}

EnableAutoJoinAudioParams::~EnableAutoJoinAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoJoinAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoJoinAudioParams::ArenaDtor(void* object) {
  EnableAutoJoinAudioParams* _this = reinterpret_cast< EnableAutoJoinAudioParams* >(object);
  (void)_this;
}
void EnableAutoJoinAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoJoinAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoJoinAudioParams& EnableAutoJoinAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoJoinAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoJoinAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoJoinAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoJoinAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  return target;
}

size_t EnableAutoJoinAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoJoinAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoJoinAudioParams*>(
      &from));
}

void EnableAutoJoinAudioParams::MergeFrom(const EnableAutoJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoJoinAudioParams::CopyFrom(const EnableAutoJoinAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoJoinAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoJoinAudioParams::IsInitialized() const {
  return true;
}

void EnableAutoJoinAudioParams::InternalSwap(EnableAutoJoinAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoJoinAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoJoinAudioParams";
}


// ===================================================================

void EnableAutoAdjustMicParams::InitAsDefaultInstance() {
}
class EnableAutoAdjustMicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoAdjustMicParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoAdjustMicParams::EnableAutoAdjustMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
}
EnableAutoAdjustMicParams::EnableAutoAdjustMicParams(const EnableAutoAdjustMicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
}

void EnableAutoAdjustMicParams::SharedCtor() {
  benable_ = false;
}

EnableAutoAdjustMicParams::~EnableAutoAdjustMicParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoAdjustMicParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoAdjustMicParams::ArenaDtor(void* object) {
  EnableAutoAdjustMicParams* _this = reinterpret_cast< EnableAutoAdjustMicParams* >(object);
  (void)_this;
}
void EnableAutoAdjustMicParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoAdjustMicParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoAdjustMicParams& EnableAutoAdjustMicParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoAdjustMicParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoAdjustMicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoAdjustMicParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoAdjustMicParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  return target;
}

size_t EnableAutoAdjustMicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoAdjustMicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoAdjustMicParams*>(
      &from));
}

void EnableAutoAdjustMicParams::MergeFrom(const EnableAutoAdjustMicParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoAdjustMicParams::CopyFrom(const EnableAutoAdjustMicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoAdjustMicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoAdjustMicParams::IsInitialized() const {
  return true;
}

void EnableAutoAdjustMicParams::InternalSwap(EnableAutoAdjustMicParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoAdjustMicParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoAdjustMicParams";
}


// ===================================================================

void EnableStereoAudioParams::InitAsDefaultInstance() {
}
class EnableStereoAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableStereoAudioParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableStereoAudioParams::EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableStereoAudioParams)
}
EnableStereoAudioParams::EnableStereoAudioParams(const EnableStereoAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableStereoAudioParams)
}

void EnableStereoAudioParams::SharedCtor() {
  benable_ = false;
}

EnableStereoAudioParams::~EnableStereoAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableStereoAudioParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableStereoAudioParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableStereoAudioParams::ArenaDtor(void* object) {
  EnableStereoAudioParams* _this = reinterpret_cast< EnableStereoAudioParams* >(object);
  (void)_this;
}
void EnableStereoAudioParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableStereoAudioParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableStereoAudioParams& EnableStereoAudioParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableStereoAudioParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableStereoAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableStereoAudioParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableStereoAudioParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableStereoAudioParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableStereoAudioParams)
  return target;
}

size_t EnableStereoAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableStereoAudioParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableStereoAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableStereoAudioParams*>(
      &from));
}

void EnableStereoAudioParams::MergeFrom(const EnableStereoAudioParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableStereoAudioParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableStereoAudioParams::CopyFrom(const EnableStereoAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableStereoAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableStereoAudioParams::IsInitialized() const {
  return true;
}

void EnableStereoAudioParams::InternalSwap(EnableStereoAudioParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableStereoAudioParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableStereoAudioParams";
}


// ===================================================================

void EnableMicOriginalInputParams::InitAsDefaultInstance() {
}
class EnableMicOriginalInputParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMicOriginalInputParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMicOriginalInputParams::EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
}
EnableMicOriginalInputParams::EnableMicOriginalInputParams(const EnableMicOriginalInputParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
}

void EnableMicOriginalInputParams::SharedCtor() {
  benable_ = false;
}

EnableMicOriginalInputParams::~EnableMicOriginalInputParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableMicOriginalInputParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableMicOriginalInputParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableMicOriginalInputParams::ArenaDtor(void* object) {
  EnableMicOriginalInputParams* _this = reinterpret_cast< EnableMicOriginalInputParams* >(object);
  (void)_this;
}
void EnableMicOriginalInputParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableMicOriginalInputParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableMicOriginalInputParams& EnableMicOriginalInputParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableMicOriginalInputParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableMicOriginalInputParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMicOriginalInputParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableMicOriginalInputParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableMicOriginalInputParams)
  return target;
}

size_t EnableMicOriginalInputParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMicOriginalInputParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableMicOriginalInputParams*>(
      &from));
}

void EnableMicOriginalInputParams::MergeFrom(const EnableMicOriginalInputParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableMicOriginalInputParams::CopyFrom(const EnableMicOriginalInputParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableMicOriginalInputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMicOriginalInputParams::IsInitialized() const {
  return true;
}

void EnableMicOriginalInputParams::InternalSwap(EnableMicOriginalInputParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableMicOriginalInputParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableMicOriginalInputParams";
}


// ===================================================================

void EnableHoldSpaceKeyToSpeakParams::InitAsDefaultInstance() {
}
class EnableHoldSpaceKeyToSpeakParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHoldSpaceKeyToSpeakParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHoldSpaceKeyToSpeakParams::EnableHoldSpaceKeyToSpeakParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
}
EnableHoldSpaceKeyToSpeakParams::EnableHoldSpaceKeyToSpeakParams(const EnableHoldSpaceKeyToSpeakParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
}

void EnableHoldSpaceKeyToSpeakParams::SharedCtor() {
  benable_ = false;
}

EnableHoldSpaceKeyToSpeakParams::~EnableHoldSpaceKeyToSpeakParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableHoldSpaceKeyToSpeakParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableHoldSpaceKeyToSpeakParams::ArenaDtor(void* object) {
  EnableHoldSpaceKeyToSpeakParams* _this = reinterpret_cast< EnableHoldSpaceKeyToSpeakParams* >(object);
  (void)_this;
}
void EnableHoldSpaceKeyToSpeakParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableHoldSpaceKeyToSpeakParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableHoldSpaceKeyToSpeakParams& EnableHoldSpaceKeyToSpeakParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableHoldSpaceKeyToSpeakParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableHoldSpaceKeyToSpeakParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHoldSpaceKeyToSpeakParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableHoldSpaceKeyToSpeakParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  return target;
}

size_t EnableHoldSpaceKeyToSpeakParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHoldSpaceKeyToSpeakParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableHoldSpaceKeyToSpeakParams*>(
      &from));
}

void EnableHoldSpaceKeyToSpeakParams::MergeFrom(const EnableHoldSpaceKeyToSpeakParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableHoldSpaceKeyToSpeakParams::CopyFrom(const EnableHoldSpaceKeyToSpeakParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHoldSpaceKeyToSpeakParams::IsInitialized() const {
  return true;
}

void EnableHoldSpaceKeyToSpeakParams::InternalSwap(EnableHoldSpaceKeyToSpeakParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableHoldSpaceKeyToSpeakParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHoldSpaceKeyToSpeakParams";
}


// ===================================================================

void EnableAlwaysMuteMicWhenJoinVoipParams::InitAsDefaultInstance() {
}
class EnableAlwaysMuteMicWhenJoinVoipParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysMuteMicWhenJoinVoipParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysMuteMicWhenJoinVoipParams::EnableAlwaysMuteMicWhenJoinVoipParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
}
EnableAlwaysMuteMicWhenJoinVoipParams::EnableAlwaysMuteMicWhenJoinVoipParams(const EnableAlwaysMuteMicWhenJoinVoipParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
}

void EnableAlwaysMuteMicWhenJoinVoipParams::SharedCtor() {
  benable_ = false;
}

EnableAlwaysMuteMicWhenJoinVoipParams::~EnableAlwaysMuteMicWhenJoinVoipParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAlwaysMuteMicWhenJoinVoipParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAlwaysMuteMicWhenJoinVoipParams::ArenaDtor(void* object) {
  EnableAlwaysMuteMicWhenJoinVoipParams* _this = reinterpret_cast< EnableAlwaysMuteMicWhenJoinVoipParams* >(object);
  (void)_this;
}
void EnableAlwaysMuteMicWhenJoinVoipParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAlwaysMuteMicWhenJoinVoipParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAlwaysMuteMicWhenJoinVoipParams& EnableAlwaysMuteMicWhenJoinVoipParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAlwaysMuteMicWhenJoinVoipParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAlwaysMuteMicWhenJoinVoipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysMuteMicWhenJoinVoipParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAlwaysMuteMicWhenJoinVoipParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  return target;
}

size_t EnableAlwaysMuteMicWhenJoinVoipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysMuteMicWhenJoinVoipParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAlwaysMuteMicWhenJoinVoipParams*>(
      &from));
}

void EnableAlwaysMuteMicWhenJoinVoipParams::MergeFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAlwaysMuteMicWhenJoinVoipParams::CopyFrom(const EnableAlwaysMuteMicWhenJoinVoipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysMuteMicWhenJoinVoipParams::IsInitialized() const {
  return true;
}

void EnableAlwaysMuteMicWhenJoinVoipParams::InternalSwap(EnableAlwaysMuteMicWhenJoinVoipParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAlwaysMuteMicWhenJoinVoipParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysMuteMicWhenJoinVoipParams";
}


// ===================================================================

void EnableSuppressAudioNotifyParams::InitAsDefaultInstance() {
}
class EnableSuppressAudioNotifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSuppressAudioNotifyParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSuppressAudioNotifyParams::EnableSuppressAudioNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
}
EnableSuppressAudioNotifyParams::EnableSuppressAudioNotifyParams(const EnableSuppressAudioNotifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
}

void EnableSuppressAudioNotifyParams::SharedCtor() {
  benable_ = false;
}

EnableSuppressAudioNotifyParams::~EnableSuppressAudioNotifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableSuppressAudioNotifyParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableSuppressAudioNotifyParams::ArenaDtor(void* object) {
  EnableSuppressAudioNotifyParams* _this = reinterpret_cast< EnableSuppressAudioNotifyParams* >(object);
  (void)_this;
}
void EnableSuppressAudioNotifyParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableSuppressAudioNotifyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableSuppressAudioNotifyParams& EnableSuppressAudioNotifyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableSuppressAudioNotifyParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableSuppressAudioNotifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSuppressAudioNotifyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableSuppressAudioNotifyParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  return target;
}

size_t EnableSuppressAudioNotifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSuppressAudioNotifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableSuppressAudioNotifyParams*>(
      &from));
}

void EnableSuppressAudioNotifyParams::MergeFrom(const EnableSuppressAudioNotifyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableSuppressAudioNotifyParams::CopyFrom(const EnableSuppressAudioNotifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSuppressAudioNotifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSuppressAudioNotifyParams::IsInitialized() const {
  return true;
}

void EnableSuppressAudioNotifyParams::InternalSwap(EnableSuppressAudioNotifyParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableSuppressAudioNotifyParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSuppressAudioNotifyParams";
}


// ===================================================================

void SetEchoCancellationLevelParams::InitAsDefaultInstance() {
}
class SetEchoCancellationLevelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetEchoCancellationLevelParams>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
}
SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(const SetEchoCancellationLevelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
}

void SetEchoCancellationLevelParams::SharedCtor() {
  level_ = 0;
}

SetEchoCancellationLevelParams::~SetEchoCancellationLevelParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetEchoCancellationLevelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetEchoCancellationLevelParams::ArenaDtor(void* object) {
  SetEchoCancellationLevelParams* _this = reinterpret_cast< SetEchoCancellationLevelParams* >(object);
  (void)_this;
}
void SetEchoCancellationLevelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetEchoCancellationLevelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEchoCancellationLevelParams& SetEchoCancellationLevelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEchoCancellationLevelParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetEchoCancellationLevelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetEchoCancellationLevelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEchoCancellationLevelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  return target;
}

size_t SetEchoCancellationLevelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 level = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEchoCancellationLevelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetEchoCancellationLevelParams*>(
      &from));
}

void SetEchoCancellationLevelParams::MergeFrom(const SetEchoCancellationLevelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_level()) {
    _internal_set_level(from._internal_level());
  }
}

void SetEchoCancellationLevelParams::CopyFrom(const SetEchoCancellationLevelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetEchoCancellationLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEchoCancellationLevelParams::IsInitialized() const {
  return true;
}

void SetEchoCancellationLevelParams::InternalSwap(SetEchoCancellationLevelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(level_, other->level_);
}

std::string SetEchoCancellationLevelParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetEchoCancellationLevelParams";
}


// ===================================================================

void SetMicVolParams::InitAsDefaultInstance() {
}
class SetMicVolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMicVolParams>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetMicVolParams::SetMicVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetMicVolParams)
}
SetMicVolParams::SetMicVolParams(const SetMicVolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetMicVolParams)
}

void SetMicVolParams::SharedCtor() {
  value_ = 0;
}

SetMicVolParams::~SetMicVolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetMicVolParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMicVolParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetMicVolParams::ArenaDtor(void* object) {
  SetMicVolParams* _this = reinterpret_cast< SetMicVolParams* >(object);
  (void)_this;
}
void SetMicVolParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMicVolParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMicVolParams& SetMicVolParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMicVolParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetMicVolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetMicVolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetMicVolParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMicVolParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetMicVolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetMicVolParams)
  return target;
}

size_t SetMicVolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetMicVolParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMicVolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMicVolParams*>(
      &from));
}

void SetMicVolParams::MergeFrom(const SetMicVolParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetMicVolParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void SetMicVolParams::CopyFrom(const SetMicVolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetMicVolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMicVolParams::IsInitialized() const {
  return true;
}

void SetMicVolParams::InternalSwap(SetMicVolParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string SetMicVolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetMicVolParams";
}


// ===================================================================

void SetSpeakerVolParams::InitAsDefaultInstance() {
}
class SetSpeakerVolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSpeakerVolParams>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSpeakerVolParams::SetSpeakerVolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetSpeakerVolParams)
}
SetSpeakerVolParams::SetSpeakerVolParams(const SetSpeakerVolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetSpeakerVolParams)
}

void SetSpeakerVolParams::SharedCtor() {
  value_ = 0;
}

SetSpeakerVolParams::~SetSpeakerVolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetSpeakerVolParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetSpeakerVolParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetSpeakerVolParams::ArenaDtor(void* object) {
  SetSpeakerVolParams* _this = reinterpret_cast< SetSpeakerVolParams* >(object);
  (void)_this;
}
void SetSpeakerVolParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSpeakerVolParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSpeakerVolParams& SetSpeakerVolParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSpeakerVolParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetSpeakerVolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSpeakerVolParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSpeakerVolParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetSpeakerVolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetSpeakerVolParams)
  return target;
}

size_t SetSpeakerVolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetSpeakerVolParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpeakerVolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetSpeakerVolParams*>(
      &from));
}

void SetSpeakerVolParams::MergeFrom(const SetSpeakerVolParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetSpeakerVolParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void SetSpeakerVolParams::CopyFrom(const SetSpeakerVolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetSpeakerVolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpeakerVolParams::IsInitialized() const {
  return true;
}

void SetSpeakerVolParams::InternalSwap(SetSpeakerVolParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string SetSpeakerVolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetSpeakerVolParams";
}


// ===================================================================

void EnableDualScreenModeParams::InitAsDefaultInstance() {
}
class EnableDualScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDualScreenModeParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDualScreenModeParams::EnableDualScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDualScreenModeParams)
}
EnableDualScreenModeParams::EnableDualScreenModeParams(const EnableDualScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDualScreenModeParams)
}

void EnableDualScreenModeParams::SharedCtor() {
  benable_ = false;
}

EnableDualScreenModeParams::~EnableDualScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDualScreenModeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableDualScreenModeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableDualScreenModeParams::ArenaDtor(void* object) {
  EnableDualScreenModeParams* _this = reinterpret_cast< EnableDualScreenModeParams* >(object);
  (void)_this;
}
void EnableDualScreenModeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableDualScreenModeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableDualScreenModeParams& EnableDualScreenModeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableDualScreenModeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableDualScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDualScreenModeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableDualScreenModeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDualScreenModeParams)
  return target;
}

size_t EnableDualScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDualScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableDualScreenModeParams*>(
      &from));
}

void EnableDualScreenModeParams::MergeFrom(const EnableDualScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableDualScreenModeParams::CopyFrom(const EnableDualScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDualScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDualScreenModeParams::IsInitialized() const {
  return true;
}

void EnableDualScreenModeParams::InternalSwap(EnableDualScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableDualScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDualScreenModeParams";
}


// ===================================================================

void TurnOffAeroModeInSharingParams::InitAsDefaultInstance() {
}
class TurnOffAeroModeInSharingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TurnOffAeroModeInSharingParams>()._has_bits_);
  static void set_has_bturnoff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TurnOffAeroModeInSharingParams::TurnOffAeroModeInSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
}
TurnOffAeroModeInSharingParams::TurnOffAeroModeInSharingParams(const TurnOffAeroModeInSharingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bturnoff_ = from.bturnoff_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
}

void TurnOffAeroModeInSharingParams::SharedCtor() {
  bturnoff_ = false;
}

TurnOffAeroModeInSharingParams::~TurnOffAeroModeInSharingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TurnOffAeroModeInSharingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TurnOffAeroModeInSharingParams::ArenaDtor(void* object) {
  TurnOffAeroModeInSharingParams* _this = reinterpret_cast< TurnOffAeroModeInSharingParams* >(object);
  (void)_this;
}
void TurnOffAeroModeInSharingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TurnOffAeroModeInSharingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TurnOffAeroModeInSharingParams& TurnOffAeroModeInSharingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TurnOffAeroModeInSharingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void TurnOffAeroModeInSharingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bturnoff_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TurnOffAeroModeInSharingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bTurnOff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bturnoff(&has_bits);
          bturnoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TurnOffAeroModeInSharingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bTurnOff = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bturnoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  return target;
}

size_t TurnOffAeroModeInSharingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bTurnOff = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnOffAeroModeInSharingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TurnOffAeroModeInSharingParams*>(
      &from));
}

void TurnOffAeroModeInSharingParams::MergeFrom(const TurnOffAeroModeInSharingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bturnoff()) {
    _internal_set_bturnoff(from._internal_bturnoff());
  }
}

void TurnOffAeroModeInSharingParams::CopyFrom(const TurnOffAeroModeInSharingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.TurnOffAeroModeInSharingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnOffAeroModeInSharingParams::IsInitialized() const {
  return true;
}

void TurnOffAeroModeInSharingParams::InternalSwap(TurnOffAeroModeInSharingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bturnoff_, other->bturnoff_);
}

std::string TurnOffAeroModeInSharingParams::GetTypeName() const {
  return "com.electron.sdk.proto.TurnOffAeroModeInSharingParams";
}


// ===================================================================

void EnableAutoFitToWindowWhenViewSharingParams::InitAsDefaultInstance() {
}
class EnableAutoFitToWindowWhenViewSharingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFitToWindowWhenViewSharingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFitToWindowWhenViewSharingParams::EnableAutoFitToWindowWhenViewSharingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
}
EnableAutoFitToWindowWhenViewSharingParams::EnableAutoFitToWindowWhenViewSharingParams(const EnableAutoFitToWindowWhenViewSharingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
}

void EnableAutoFitToWindowWhenViewSharingParams::SharedCtor() {
  benable_ = false;
}

EnableAutoFitToWindowWhenViewSharingParams::~EnableAutoFitToWindowWhenViewSharingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoFitToWindowWhenViewSharingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoFitToWindowWhenViewSharingParams::ArenaDtor(void* object) {
  EnableAutoFitToWindowWhenViewSharingParams* _this = reinterpret_cast< EnableAutoFitToWindowWhenViewSharingParams* >(object);
  (void)_this;
}
void EnableAutoFitToWindowWhenViewSharingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoFitToWindowWhenViewSharingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoFitToWindowWhenViewSharingParams& EnableAutoFitToWindowWhenViewSharingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoFitToWindowWhenViewSharingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoFitToWindowWhenViewSharingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFitToWindowWhenViewSharingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoFitToWindowWhenViewSharingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  return target;
}

size_t EnableAutoFitToWindowWhenViewSharingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFitToWindowWhenViewSharingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoFitToWindowWhenViewSharingParams*>(
      &from));
}

void EnableAutoFitToWindowWhenViewSharingParams::MergeFrom(const EnableAutoFitToWindowWhenViewSharingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoFitToWindowWhenViewSharingParams::CopyFrom(const EnableAutoFitToWindowWhenViewSharingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFitToWindowWhenViewSharingParams::IsInitialized() const {
  return true;
}

void EnableAutoFitToWindowWhenViewSharingParams::InternalSwap(EnableAutoFitToWindowWhenViewSharingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoFitToWindowWhenViewSharingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFitToWindowWhenViewSharingParams";
}


// ===================================================================

void EnableAutoFullScreenVideoWhenJoinMeetingParams::InitAsDefaultInstance() {
}
class EnableAutoFullScreenVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFullScreenVideoWhenJoinMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFullScreenVideoWhenJoinMeetingParams::EnableAutoFullScreenVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
}
EnableAutoFullScreenVideoWhenJoinMeetingParams::EnableAutoFullScreenVideoWhenJoinMeetingParams(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableAutoFullScreenVideoWhenJoinMeetingParams::~EnableAutoFullScreenVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::ArenaDtor(void* object) {
  EnableAutoFullScreenVideoWhenJoinMeetingParams* _this = reinterpret_cast< EnableAutoFullScreenVideoWhenJoinMeetingParams* >(object);
  (void)_this;
}
void EnableAutoFullScreenVideoWhenJoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoFullScreenVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoFullScreenVideoWhenJoinMeetingParams& EnableAutoFullScreenVideoWhenJoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoFullScreenVideoWhenJoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoFullScreenVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFullScreenVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoFullScreenVideoWhenJoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  return target;
}

size_t EnableAutoFullScreenVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoFullScreenVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::MergeFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::CopyFrom(const EnableAutoFullScreenVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFullScreenVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoFullScreenVideoWhenJoinMeetingParams::InternalSwap(EnableAutoFullScreenVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoFullScreenVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenJoinMeetingParams";
}


// ===================================================================

void EnableSplitScreenModeParams::InitAsDefaultInstance() {
}
class EnableSplitScreenModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSplitScreenModeParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSplitScreenModeParams::EnableSplitScreenModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
}
EnableSplitScreenModeParams::EnableSplitScreenModeParams(const EnableSplitScreenModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
}

void EnableSplitScreenModeParams::SharedCtor() {
  benable_ = false;
}

EnableSplitScreenModeParams::~EnableSplitScreenModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSplitScreenModeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableSplitScreenModeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableSplitScreenModeParams::ArenaDtor(void* object) {
  EnableSplitScreenModeParams* _this = reinterpret_cast< EnableSplitScreenModeParams* >(object);
  (void)_this;
}
void EnableSplitScreenModeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableSplitScreenModeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableSplitScreenModeParams& EnableSplitScreenModeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableSplitScreenModeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableSplitScreenModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSplitScreenModeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableSplitScreenModeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSplitScreenModeParams)
  return target;
}

size_t EnableSplitScreenModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSplitScreenModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableSplitScreenModeParams*>(
      &from));
}

void EnableSplitScreenModeParams::MergeFrom(const EnableSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableSplitScreenModeParams::CopyFrom(const EnableSplitScreenModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSplitScreenModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSplitScreenModeParams::IsInitialized() const {
  return true;
}

void EnableSplitScreenModeParams::InternalSwap(EnableSplitScreenModeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableSplitScreenModeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSplitScreenModeParams";
}


// ===================================================================

void EnableAutoFullScreenVideoWhenViewShareParams::InitAsDefaultInstance() {
}
class EnableAutoFullScreenVideoWhenViewShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoFullScreenVideoWhenViewShareParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoFullScreenVideoWhenViewShareParams::EnableAutoFullScreenVideoWhenViewShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
}
EnableAutoFullScreenVideoWhenViewShareParams::EnableAutoFullScreenVideoWhenViewShareParams(const EnableAutoFullScreenVideoWhenViewShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
}

void EnableAutoFullScreenVideoWhenViewShareParams::SharedCtor() {
  benable_ = false;
}

EnableAutoFullScreenVideoWhenViewShareParams::~EnableAutoFullScreenVideoWhenViewShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoFullScreenVideoWhenViewShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoFullScreenVideoWhenViewShareParams::ArenaDtor(void* object) {
  EnableAutoFullScreenVideoWhenViewShareParams* _this = reinterpret_cast< EnableAutoFullScreenVideoWhenViewShareParams* >(object);
  (void)_this;
}
void EnableAutoFullScreenVideoWhenViewShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoFullScreenVideoWhenViewShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoFullScreenVideoWhenViewShareParams& EnableAutoFullScreenVideoWhenViewShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoFullScreenVideoWhenViewShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoFullScreenVideoWhenViewShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoFullScreenVideoWhenViewShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoFullScreenVideoWhenViewShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  return target;
}

size_t EnableAutoFullScreenVideoWhenViewShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoFullScreenVideoWhenViewShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoFullScreenVideoWhenViewShareParams*>(
      &from));
}

void EnableAutoFullScreenVideoWhenViewShareParams::MergeFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoFullScreenVideoWhenViewShareParams::CopyFrom(const EnableAutoFullScreenVideoWhenViewShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoFullScreenVideoWhenViewShareParams::IsInitialized() const {
  return true;
}

void EnableAutoFullScreenVideoWhenViewShareParams::InternalSwap(EnableAutoFullScreenVideoWhenViewShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoFullScreenVideoWhenViewShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoFullScreenVideoWhenViewShareParams";
}


// ===================================================================

void EnableDisplayReminderWindowWhenExitParams::InitAsDefaultInstance() {
}
class EnableDisplayReminderWindowWhenExitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableDisplayReminderWindowWhenExitParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableDisplayReminderWindowWhenExitParams::EnableDisplayReminderWindowWhenExitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
}
EnableDisplayReminderWindowWhenExitParams::EnableDisplayReminderWindowWhenExitParams(const EnableDisplayReminderWindowWhenExitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
}

void EnableDisplayReminderWindowWhenExitParams::SharedCtor() {
  benable_ = false;
}

EnableDisplayReminderWindowWhenExitParams::~EnableDisplayReminderWindowWhenExitParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableDisplayReminderWindowWhenExitParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableDisplayReminderWindowWhenExitParams::ArenaDtor(void* object) {
  EnableDisplayReminderWindowWhenExitParams* _this = reinterpret_cast< EnableDisplayReminderWindowWhenExitParams* >(object);
  (void)_this;
}
void EnableDisplayReminderWindowWhenExitParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableDisplayReminderWindowWhenExitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableDisplayReminderWindowWhenExitParams& EnableDisplayReminderWindowWhenExitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableDisplayReminderWindowWhenExitParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableDisplayReminderWindowWhenExitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableDisplayReminderWindowWhenExitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableDisplayReminderWindowWhenExitParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  return target;
}

size_t EnableDisplayReminderWindowWhenExitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableDisplayReminderWindowWhenExitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableDisplayReminderWindowWhenExitParams*>(
      &from));
}

void EnableDisplayReminderWindowWhenExitParams::MergeFrom(const EnableDisplayReminderWindowWhenExitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableDisplayReminderWindowWhenExitParams::CopyFrom(const EnableDisplayReminderWindowWhenExitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableDisplayReminderWindowWhenExitParams::IsInitialized() const {
  return true;
}

void EnableDisplayReminderWindowWhenExitParams::InternalSwap(EnableDisplayReminderWindowWhenExitParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableDisplayReminderWindowWhenExitParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableDisplayReminderWindowWhenExitParams";
}


// ===================================================================

void EnableShowMyMeetingElapseTimeParams::InitAsDefaultInstance() {
}
class EnableShowMyMeetingElapseTimeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowMyMeetingElapseTimeParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowMyMeetingElapseTimeParams::EnableShowMyMeetingElapseTimeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
}
EnableShowMyMeetingElapseTimeParams::EnableShowMyMeetingElapseTimeParams(const EnableShowMyMeetingElapseTimeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
}

void EnableShowMyMeetingElapseTimeParams::SharedCtor() {
  benable_ = false;
}

EnableShowMyMeetingElapseTimeParams::~EnableShowMyMeetingElapseTimeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableShowMyMeetingElapseTimeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableShowMyMeetingElapseTimeParams::ArenaDtor(void* object) {
  EnableShowMyMeetingElapseTimeParams* _this = reinterpret_cast< EnableShowMyMeetingElapseTimeParams* >(object);
  (void)_this;
}
void EnableShowMyMeetingElapseTimeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableShowMyMeetingElapseTimeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableShowMyMeetingElapseTimeParams& EnableShowMyMeetingElapseTimeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableShowMyMeetingElapseTimeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableShowMyMeetingElapseTimeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowMyMeetingElapseTimeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableShowMyMeetingElapseTimeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  return target;
}

size_t EnableShowMyMeetingElapseTimeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowMyMeetingElapseTimeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableShowMyMeetingElapseTimeParams*>(
      &from));
}

void EnableShowMyMeetingElapseTimeParams::MergeFrom(const EnableShowMyMeetingElapseTimeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableShowMyMeetingElapseTimeParams::CopyFrom(const EnableShowMyMeetingElapseTimeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowMyMeetingElapseTimeParams::IsInitialized() const {
  return true;
}

void EnableShowMyMeetingElapseTimeParams::InternalSwap(EnableShowMyMeetingElapseTimeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableShowMyMeetingElapseTimeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowMyMeetingElapseTimeParams";
}


// ===================================================================

void EnableAccelerateGPUWhenShareParams::InitAsDefaultInstance() {
}
class EnableAccelerateGPUWhenShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAccelerateGPUWhenShareParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAccelerateGPUWhenShareParams::EnableAccelerateGPUWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
}
EnableAccelerateGPUWhenShareParams::EnableAccelerateGPUWhenShareParams(const EnableAccelerateGPUWhenShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
}

void EnableAccelerateGPUWhenShareParams::SharedCtor() {
  benable_ = false;
}

EnableAccelerateGPUWhenShareParams::~EnableAccelerateGPUWhenShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAccelerateGPUWhenShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAccelerateGPUWhenShareParams::ArenaDtor(void* object) {
  EnableAccelerateGPUWhenShareParams* _this = reinterpret_cast< EnableAccelerateGPUWhenShareParams* >(object);
  (void)_this;
}
void EnableAccelerateGPUWhenShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAccelerateGPUWhenShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAccelerateGPUWhenShareParams& EnableAccelerateGPUWhenShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAccelerateGPUWhenShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAccelerateGPUWhenShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAccelerateGPUWhenShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAccelerateGPUWhenShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  return target;
}

size_t EnableAccelerateGPUWhenShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAccelerateGPUWhenShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAccelerateGPUWhenShareParams*>(
      &from));
}

void EnableAccelerateGPUWhenShareParams::MergeFrom(const EnableAccelerateGPUWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAccelerateGPUWhenShareParams::CopyFrom(const EnableAccelerateGPUWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAccelerateGPUWhenShareParams::IsInitialized() const {
  return true;
}

void EnableAccelerateGPUWhenShareParams::InternalSwap(EnableAccelerateGPUWhenShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAccelerateGPUWhenShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAccelerateGPUWhenShareParams";
}


// ===================================================================

void EnableRemoteControlAllApplicationsParams::InitAsDefaultInstance() {
}
class EnableRemoteControlAllApplicationsParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableRemoteControlAllApplicationsParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableRemoteControlAllApplicationsParams::EnableRemoteControlAllApplicationsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
}
EnableRemoteControlAllApplicationsParams::EnableRemoteControlAllApplicationsParams(const EnableRemoteControlAllApplicationsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
}

void EnableRemoteControlAllApplicationsParams::SharedCtor() {
  benable_ = false;
}

EnableRemoteControlAllApplicationsParams::~EnableRemoteControlAllApplicationsParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableRemoteControlAllApplicationsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableRemoteControlAllApplicationsParams::ArenaDtor(void* object) {
  EnableRemoteControlAllApplicationsParams* _this = reinterpret_cast< EnableRemoteControlAllApplicationsParams* >(object);
  (void)_this;
}
void EnableRemoteControlAllApplicationsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableRemoteControlAllApplicationsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableRemoteControlAllApplicationsParams& EnableRemoteControlAllApplicationsParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableRemoteControlAllApplicationsParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableRemoteControlAllApplicationsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableRemoteControlAllApplicationsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableRemoteControlAllApplicationsParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  return target;
}

size_t EnableRemoteControlAllApplicationsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableRemoteControlAllApplicationsParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableRemoteControlAllApplicationsParams*>(
      &from));
}

void EnableRemoteControlAllApplicationsParams::MergeFrom(const EnableRemoteControlAllApplicationsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableRemoteControlAllApplicationsParams::CopyFrom(const EnableRemoteControlAllApplicationsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRemoteControlAllApplicationsParams::IsInitialized() const {
  return true;
}

void EnableRemoteControlAllApplicationsParams::InternalSwap(EnableRemoteControlAllApplicationsParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableRemoteControlAllApplicationsParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableRemoteControlAllApplicationsParams";
}


// ===================================================================

void SetRecordingPathParams::InitAsDefaultInstance() {
}
class SetRecordingPathParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRecordingPathParams>()._has_bits_);
  static void set_has_recpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetRecordingPathParams::SetRecordingPathParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SetRecordingPathParams)
}
SetRecordingPathParams::SetRecordingPathParams(const SetRecordingPathParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recpath()) {
    recpath_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recpath(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SetRecordingPathParams)
}

void SetRecordingPathParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRecordingPathParams_electron_5fsdk_2eproto.base);
  recpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetRecordingPathParams::~SetRecordingPathParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SetRecordingPathParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetRecordingPathParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetRecordingPathParams::ArenaDtor(void* object) {
  SetRecordingPathParams* _this = reinterpret_cast< SetRecordingPathParams* >(object);
  (void)_this;
}
void SetRecordingPathParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRecordingPathParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRecordingPathParams& SetRecordingPathParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRecordingPathParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SetRecordingPathParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SetRecordingPathParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    recpath_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetRecordingPathParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string recPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRecordingPathParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SetRecordingPathParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string recPath = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SetRecordingPathParams)
  return target;
}

size_t SetRecordingPathParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SetRecordingPathParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string recPath = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRecordingPathParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetRecordingPathParams*>(
      &from));
}

void SetRecordingPathParams::MergeFrom(const SetRecordingPathParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SetRecordingPathParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recpath()) {
    _internal_set_recpath(from._internal_recpath());
  }
}

void SetRecordingPathParams::CopyFrom(const SetRecordingPathParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SetRecordingPathParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordingPathParams::IsInitialized() const {
  return true;
}

void SetRecordingPathParams::InternalSwap(SetRecordingPathParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recpath_.Swap(&other->recpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SetRecordingPathParams::GetTypeName() const {
  return "com.electron.sdk.proto.SetRecordingPathParams";
}


// ===================================================================

void EnableSelectRecordFileLocationAfterMeetingParams::InitAsDefaultInstance() {
}
class EnableSelectRecordFileLocationAfterMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSelectRecordFileLocationAfterMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSelectRecordFileLocationAfterMeetingParams::EnableSelectRecordFileLocationAfterMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
}
EnableSelectRecordFileLocationAfterMeetingParams::EnableSelectRecordFileLocationAfterMeetingParams(const EnableSelectRecordFileLocationAfterMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
}

void EnableSelectRecordFileLocationAfterMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableSelectRecordFileLocationAfterMeetingParams::~EnableSelectRecordFileLocationAfterMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableSelectRecordFileLocationAfterMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableSelectRecordFileLocationAfterMeetingParams::ArenaDtor(void* object) {
  EnableSelectRecordFileLocationAfterMeetingParams* _this = reinterpret_cast< EnableSelectRecordFileLocationAfterMeetingParams* >(object);
  (void)_this;
}
void EnableSelectRecordFileLocationAfterMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableSelectRecordFileLocationAfterMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableSelectRecordFileLocationAfterMeetingParams& EnableSelectRecordFileLocationAfterMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableSelectRecordFileLocationAfterMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableSelectRecordFileLocationAfterMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSelectRecordFileLocationAfterMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableSelectRecordFileLocationAfterMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  return target;
}

size_t EnableSelectRecordFileLocationAfterMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSelectRecordFileLocationAfterMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableSelectRecordFileLocationAfterMeetingParams*>(
      &from));
}

void EnableSelectRecordFileLocationAfterMeetingParams::MergeFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableSelectRecordFileLocationAfterMeetingParams::CopyFrom(const EnableSelectRecordFileLocationAfterMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSelectRecordFileLocationAfterMeetingParams::IsInitialized() const {
  return true;
}

void EnableSelectRecordFileLocationAfterMeetingParams::InternalSwap(EnableSelectRecordFileLocationAfterMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableSelectRecordFileLocationAfterMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSelectRecordFileLocationAfterMeetingParams";
}


// ===================================================================

void EnableMultiAudioStreamRecordParams::InitAsDefaultInstance() {
}
class EnableMultiAudioStreamRecordParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMultiAudioStreamRecordParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMultiAudioStreamRecordParams::EnableMultiAudioStreamRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
}
EnableMultiAudioStreamRecordParams::EnableMultiAudioStreamRecordParams(const EnableMultiAudioStreamRecordParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
}

void EnableMultiAudioStreamRecordParams::SharedCtor() {
  benable_ = false;
}

EnableMultiAudioStreamRecordParams::~EnableMultiAudioStreamRecordParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableMultiAudioStreamRecordParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableMultiAudioStreamRecordParams::ArenaDtor(void* object) {
  EnableMultiAudioStreamRecordParams* _this = reinterpret_cast< EnableMultiAudioStreamRecordParams* >(object);
  (void)_this;
}
void EnableMultiAudioStreamRecordParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableMultiAudioStreamRecordParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableMultiAudioStreamRecordParams& EnableMultiAudioStreamRecordParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableMultiAudioStreamRecordParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableMultiAudioStreamRecordParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMultiAudioStreamRecordParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableMultiAudioStreamRecordParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  return target;
}

size_t EnableMultiAudioStreamRecordParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMultiAudioStreamRecordParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableMultiAudioStreamRecordParams*>(
      &from));
}

void EnableMultiAudioStreamRecordParams::MergeFrom(const EnableMultiAudioStreamRecordParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableMultiAudioStreamRecordParams::CopyFrom(const EnableMultiAudioStreamRecordParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableMultiAudioStreamRecordParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMultiAudioStreamRecordParams::IsInitialized() const {
  return true;
}

void EnableMultiAudioStreamRecordParams::InternalSwap(EnableMultiAudioStreamRecordParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableMultiAudioStreamRecordParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableMultiAudioStreamRecordParams";
}


// ===================================================================

void EnableAddTimestampWatermarkParams::InitAsDefaultInstance() {
}
class EnableAddTimestampWatermarkParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAddTimestampWatermarkParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAddTimestampWatermarkParams::EnableAddTimestampWatermarkParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
}
EnableAddTimestampWatermarkParams::EnableAddTimestampWatermarkParams(const EnableAddTimestampWatermarkParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
}

void EnableAddTimestampWatermarkParams::SharedCtor() {
  benable_ = false;
}

EnableAddTimestampWatermarkParams::~EnableAddTimestampWatermarkParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAddTimestampWatermarkParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAddTimestampWatermarkParams::ArenaDtor(void* object) {
  EnableAddTimestampWatermarkParams* _this = reinterpret_cast< EnableAddTimestampWatermarkParams* >(object);
  (void)_this;
}
void EnableAddTimestampWatermarkParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAddTimestampWatermarkParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAddTimestampWatermarkParams& EnableAddTimestampWatermarkParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAddTimestampWatermarkParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAddTimestampWatermarkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAddTimestampWatermarkParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAddTimestampWatermarkParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  return target;
}

size_t EnableAddTimestampWatermarkParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAddTimestampWatermarkParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAddTimestampWatermarkParams*>(
      &from));
}

void EnableAddTimestampWatermarkParams::MergeFrom(const EnableAddTimestampWatermarkParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAddTimestampWatermarkParams::CopyFrom(const EnableAddTimestampWatermarkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAddTimestampWatermarkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAddTimestampWatermarkParams::IsInitialized() const {
  return true;
}

void EnableAddTimestampWatermarkParams::InternalSwap(EnableAddTimestampWatermarkParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAddTimestampWatermarkParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAddTimestampWatermarkParams";
}


// ===================================================================

void EnableOptimizeFor3rdPartyVideoEditorParams::InitAsDefaultInstance() {
}
class EnableOptimizeFor3rdPartyVideoEditorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableOptimizeFor3rdPartyVideoEditorParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableOptimizeFor3rdPartyVideoEditorParams::EnableOptimizeFor3rdPartyVideoEditorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
}
EnableOptimizeFor3rdPartyVideoEditorParams::EnableOptimizeFor3rdPartyVideoEditorParams(const EnableOptimizeFor3rdPartyVideoEditorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
}

void EnableOptimizeFor3rdPartyVideoEditorParams::SharedCtor() {
  benable_ = false;
}

EnableOptimizeFor3rdPartyVideoEditorParams::~EnableOptimizeFor3rdPartyVideoEditorParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableOptimizeFor3rdPartyVideoEditorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableOptimizeFor3rdPartyVideoEditorParams::ArenaDtor(void* object) {
  EnableOptimizeFor3rdPartyVideoEditorParams* _this = reinterpret_cast< EnableOptimizeFor3rdPartyVideoEditorParams* >(object);
  (void)_this;
}
void EnableOptimizeFor3rdPartyVideoEditorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableOptimizeFor3rdPartyVideoEditorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableOptimizeFor3rdPartyVideoEditorParams& EnableOptimizeFor3rdPartyVideoEditorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableOptimizeFor3rdPartyVideoEditorParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableOptimizeFor3rdPartyVideoEditorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableOptimizeFor3rdPartyVideoEditorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableOptimizeFor3rdPartyVideoEditorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  return target;
}

size_t EnableOptimizeFor3rdPartyVideoEditorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableOptimizeFor3rdPartyVideoEditorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableOptimizeFor3rdPartyVideoEditorParams*>(
      &from));
}

void EnableOptimizeFor3rdPartyVideoEditorParams::MergeFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableOptimizeFor3rdPartyVideoEditorParams::CopyFrom(const EnableOptimizeFor3rdPartyVideoEditorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableOptimizeFor3rdPartyVideoEditorParams::IsInitialized() const {
  return true;
}

void EnableOptimizeFor3rdPartyVideoEditorParams::InternalSwap(EnableOptimizeFor3rdPartyVideoEditorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableOptimizeFor3rdPartyVideoEditorParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableOptimizeFor3rdPartyVideoEditorParams";
}


// ===================================================================

void EnableShowVideoThumbnailWhenShareParams::InitAsDefaultInstance() {
}
class EnableShowVideoThumbnailWhenShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShowVideoThumbnailWhenShareParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShowVideoThumbnailWhenShareParams::EnableShowVideoThumbnailWhenShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
}
EnableShowVideoThumbnailWhenShareParams::EnableShowVideoThumbnailWhenShareParams(const EnableShowVideoThumbnailWhenShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
}

void EnableShowVideoThumbnailWhenShareParams::SharedCtor() {
  benable_ = false;
}

EnableShowVideoThumbnailWhenShareParams::~EnableShowVideoThumbnailWhenShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableShowVideoThumbnailWhenShareParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableShowVideoThumbnailWhenShareParams::ArenaDtor(void* object) {
  EnableShowVideoThumbnailWhenShareParams* _this = reinterpret_cast< EnableShowVideoThumbnailWhenShareParams* >(object);
  (void)_this;
}
void EnableShowVideoThumbnailWhenShareParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableShowVideoThumbnailWhenShareParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableShowVideoThumbnailWhenShareParams& EnableShowVideoThumbnailWhenShareParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableShowVideoThumbnailWhenShareParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableShowVideoThumbnailWhenShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShowVideoThumbnailWhenShareParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableShowVideoThumbnailWhenShareParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  return target;
}

size_t EnableShowVideoThumbnailWhenShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShowVideoThumbnailWhenShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableShowVideoThumbnailWhenShareParams*>(
      &from));
}

void EnableShowVideoThumbnailWhenShareParams::MergeFrom(const EnableShowVideoThumbnailWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableShowVideoThumbnailWhenShareParams::CopyFrom(const EnableShowVideoThumbnailWhenShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShowVideoThumbnailWhenShareParams::IsInitialized() const {
  return true;
}

void EnableShowVideoThumbnailWhenShareParams::InternalSwap(EnableShowVideoThumbnailWhenShareParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableShowVideoThumbnailWhenShareParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableShowVideoThumbnailWhenShareParams";
}


// ===================================================================

void EnablePlaceVideoNextToShareInRecordParams::InitAsDefaultInstance() {
}
class EnablePlaceVideoNextToShareInRecordParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnablePlaceVideoNextToShareInRecordParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnablePlaceVideoNextToShareInRecordParams::EnablePlaceVideoNextToShareInRecordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
}
EnablePlaceVideoNextToShareInRecordParams::EnablePlaceVideoNextToShareInRecordParams(const EnablePlaceVideoNextToShareInRecordParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
}

void EnablePlaceVideoNextToShareInRecordParams::SharedCtor() {
  benable_ = false;
}

EnablePlaceVideoNextToShareInRecordParams::~EnablePlaceVideoNextToShareInRecordParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnablePlaceVideoNextToShareInRecordParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnablePlaceVideoNextToShareInRecordParams::ArenaDtor(void* object) {
  EnablePlaceVideoNextToShareInRecordParams* _this = reinterpret_cast< EnablePlaceVideoNextToShareInRecordParams* >(object);
  (void)_this;
}
void EnablePlaceVideoNextToShareInRecordParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnablePlaceVideoNextToShareInRecordParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnablePlaceVideoNextToShareInRecordParams& EnablePlaceVideoNextToShareInRecordParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnablePlaceVideoNextToShareInRecordParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnablePlaceVideoNextToShareInRecordParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnablePlaceVideoNextToShareInRecordParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnablePlaceVideoNextToShareInRecordParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  return target;
}

size_t EnablePlaceVideoNextToShareInRecordParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePlaceVideoNextToShareInRecordParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnablePlaceVideoNextToShareInRecordParams*>(
      &from));
}

void EnablePlaceVideoNextToShareInRecordParams::MergeFrom(const EnablePlaceVideoNextToShareInRecordParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnablePlaceVideoNextToShareInRecordParams::CopyFrom(const EnablePlaceVideoNextToShareInRecordParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePlaceVideoNextToShareInRecordParams::IsInitialized() const {
  return true;
}

void EnablePlaceVideoNextToShareInRecordParams::InternalSwap(EnablePlaceVideoNextToShareInRecordParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnablePlaceVideoNextToShareInRecordParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnablePlaceVideoNextToShareInRecordParams";
}


// ===================================================================

void DisableAdvancedFeatures4GeneralSettingParams::InitAsDefaultInstance() {
}
class DisableAdvancedFeatures4GeneralSettingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAdvancedFeatures4GeneralSettingParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAdvancedFeatures4GeneralSettingParams::DisableAdvancedFeatures4GeneralSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
}
DisableAdvancedFeatures4GeneralSettingParams::DisableAdvancedFeatures4GeneralSettingParams(const DisableAdvancedFeatures4GeneralSettingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
}

void DisableAdvancedFeatures4GeneralSettingParams::SharedCtor() {
  bdisable_ = false;
}

DisableAdvancedFeatures4GeneralSettingParams::~DisableAdvancedFeatures4GeneralSettingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableAdvancedFeatures4GeneralSettingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableAdvancedFeatures4GeneralSettingParams::ArenaDtor(void* object) {
  DisableAdvancedFeatures4GeneralSettingParams* _this = reinterpret_cast< DisableAdvancedFeatures4GeneralSettingParams* >(object);
  (void)_this;
}
void DisableAdvancedFeatures4GeneralSettingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableAdvancedFeatures4GeneralSettingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableAdvancedFeatures4GeneralSettingParams& DisableAdvancedFeatures4GeneralSettingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableAdvancedFeatures4GeneralSettingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableAdvancedFeatures4GeneralSettingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAdvancedFeatures4GeneralSettingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableAdvancedFeatures4GeneralSettingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  return target;
}

size_t DisableAdvancedFeatures4GeneralSettingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAdvancedFeatures4GeneralSettingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableAdvancedFeatures4GeneralSettingParams*>(
      &from));
}

void DisableAdvancedFeatures4GeneralSettingParams::MergeFrom(const DisableAdvancedFeatures4GeneralSettingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableAdvancedFeatures4GeneralSettingParams::CopyFrom(const DisableAdvancedFeatures4GeneralSettingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAdvancedFeatures4GeneralSettingParams::IsInitialized() const {
  return true;
}

void DisableAdvancedFeatures4GeneralSettingParams::InternalSwap(DisableAdvancedFeatures4GeneralSettingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableAdvancedFeatures4GeneralSettingParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAdvancedFeatures4GeneralSettingParams";
}


// ===================================================================

void DisableAccountSettingTabPageParams::InitAsDefaultInstance() {
}
class DisableAccountSettingTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableAccountSettingTabPageParams>()._has_bits_);
  static void set_has_bdisable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableAccountSettingTabPageParams::DisableAccountSettingTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
}
DisableAccountSettingTabPageParams::DisableAccountSettingTabPageParams(const DisableAccountSettingTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bdisable_ = from.bdisable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
}

void DisableAccountSettingTabPageParams::SharedCtor() {
  bdisable_ = false;
}

DisableAccountSettingTabPageParams::~DisableAccountSettingTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisableAccountSettingTabPageParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableAccountSettingTabPageParams::ArenaDtor(void* object) {
  DisableAccountSettingTabPageParams* _this = reinterpret_cast< DisableAccountSettingTabPageParams* >(object);
  (void)_this;
}
void DisableAccountSettingTabPageParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableAccountSettingTabPageParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableAccountSettingTabPageParams& DisableAccountSettingTabPageParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableAccountSettingTabPageParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void DisableAccountSettingTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bdisable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableAccountSettingTabPageParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bDisable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bdisable(&has_bits);
          bdisable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableAccountSettingTabPageParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bDisable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bdisable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  return target;
}

size_t DisableAccountSettingTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bDisable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableAccountSettingTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisableAccountSettingTabPageParams*>(
      &from));
}

void DisableAccountSettingTabPageParams::MergeFrom(const DisableAccountSettingTabPageParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bdisable()) {
    _internal_set_bdisable(from._internal_bdisable());
  }
}

void DisableAccountSettingTabPageParams::CopyFrom(const DisableAccountSettingTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.DisableAccountSettingTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableAccountSettingTabPageParams::IsInitialized() const {
  return true;
}

void DisableAccountSettingTabPageParams::InternalSwap(DisableAccountSettingTabPageParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bdisable_, other->bdisable_);
}

std::string DisableAccountSettingTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.DisableAccountSettingTabPageParams";
}


// ===================================================================

void HideAutoCopyInviteLinkCheckBoxParams::InitAsDefaultInstance() {
}
class HideAutoCopyInviteLinkCheckBoxParams::_Internal {
 public:
  using HasBits = decltype(std::declval<HideAutoCopyInviteLinkCheckBoxParams>()._has_bits_);
  static void set_has_bhide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HideAutoCopyInviteLinkCheckBoxParams::HideAutoCopyInviteLinkCheckBoxParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
}
HideAutoCopyInviteLinkCheckBoxParams::HideAutoCopyInviteLinkCheckBoxParams(const HideAutoCopyInviteLinkCheckBoxParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bhide_ = from.bhide_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
}

void HideAutoCopyInviteLinkCheckBoxParams::SharedCtor() {
  bhide_ = false;
}

HideAutoCopyInviteLinkCheckBoxParams::~HideAutoCopyInviteLinkCheckBoxParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HideAutoCopyInviteLinkCheckBoxParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HideAutoCopyInviteLinkCheckBoxParams::ArenaDtor(void* object) {
  HideAutoCopyInviteLinkCheckBoxParams* _this = reinterpret_cast< HideAutoCopyInviteLinkCheckBoxParams* >(object);
  (void)_this;
}
void HideAutoCopyInviteLinkCheckBoxParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HideAutoCopyInviteLinkCheckBoxParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HideAutoCopyInviteLinkCheckBoxParams& HideAutoCopyInviteLinkCheckBoxParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HideAutoCopyInviteLinkCheckBoxParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void HideAutoCopyInviteLinkCheckBoxParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HideAutoCopyInviteLinkCheckBoxParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bHide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bhide(&has_bits);
          bhide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HideAutoCopyInviteLinkCheckBoxParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bHide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bhide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  return target;
}

size_t HideAutoCopyInviteLinkCheckBoxParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bHide = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HideAutoCopyInviteLinkCheckBoxParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HideAutoCopyInviteLinkCheckBoxParams*>(
      &from));
}

void HideAutoCopyInviteLinkCheckBoxParams::MergeFrom(const HideAutoCopyInviteLinkCheckBoxParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bhide()) {
    _internal_set_bhide(from._internal_bhide());
  }
}

void HideAutoCopyInviteLinkCheckBoxParams::CopyFrom(const HideAutoCopyInviteLinkCheckBoxParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAutoCopyInviteLinkCheckBoxParams::IsInitialized() const {
  return true;
}

void HideAutoCopyInviteLinkCheckBoxParams::InternalSwap(HideAutoCopyInviteLinkCheckBoxParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bhide_, other->bhide_);
}

std::string HideAutoCopyInviteLinkCheckBoxParams::GetTypeName() const {
  return "com.electron.sdk.proto.HideAutoCopyInviteLinkCheckBoxParams";
}


// ===================================================================

void ConfigToShowUrlLinksInSettingParams::InitAsDefaultInstance() {
}
class ConfigToShowUrlLinksInSettingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigToShowUrlLinksInSettingParams>()._has_bits_);
  static void set_has_showoption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConfigToShowUrlLinksInSettingParams::ConfigToShowUrlLinksInSettingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
}
ConfigToShowUrlLinksInSettingParams::ConfigToShowUrlLinksInSettingParams(const ConfigToShowUrlLinksInSettingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  showoption_ = from.showoption_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
}

void ConfigToShowUrlLinksInSettingParams::SharedCtor() {
  showoption_ = PROTOBUF_ULONGLONG(0);
}

ConfigToShowUrlLinksInSettingParams::~ConfigToShowUrlLinksInSettingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ConfigToShowUrlLinksInSettingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfigToShowUrlLinksInSettingParams::ArenaDtor(void* object) {
  ConfigToShowUrlLinksInSettingParams* _this = reinterpret_cast< ConfigToShowUrlLinksInSettingParams* >(object);
  (void)_this;
}
void ConfigToShowUrlLinksInSettingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigToShowUrlLinksInSettingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigToShowUrlLinksInSettingParams& ConfigToShowUrlLinksInSettingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigToShowUrlLinksInSettingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ConfigToShowUrlLinksInSettingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  showoption_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfigToShowUrlLinksInSettingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 showOption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_showoption(&has_bits);
          showoption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigToShowUrlLinksInSettingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 showOption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_showoption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  return target;
}

size_t ConfigToShowUrlLinksInSettingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 showOption = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_showoption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigToShowUrlLinksInSettingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConfigToShowUrlLinksInSettingParams*>(
      &from));
}

void ConfigToShowUrlLinksInSettingParams::MergeFrom(const ConfigToShowUrlLinksInSettingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_showoption()) {
    _internal_set_showoption(from._internal_showoption());
  }
}

void ConfigToShowUrlLinksInSettingParams::CopyFrom(const ConfigToShowUrlLinksInSettingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigToShowUrlLinksInSettingParams::IsInitialized() const {
  return true;
}

void ConfigToShowUrlLinksInSettingParams::InternalSwap(ConfigToShowUrlLinksInSettingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(showoption_, other->showoption_);
}

std::string ConfigToShowUrlLinksInSettingParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfigToShowUrlLinksInSettingParams";
}


// ===================================================================

void ConfSettingDialogShownTabPageParams::InitAsDefaultInstance() {
}
class ConfSettingDialogShownTabPageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfSettingDialogShownTabPageParams>()._has_bits_);
  static void set_has_showoption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConfSettingDialogShownTabPageParams::ConfSettingDialogShownTabPageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
}
ConfSettingDialogShownTabPageParams::ConfSettingDialogShownTabPageParams(const ConfSettingDialogShownTabPageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  showoption_ = from.showoption_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
}

void ConfSettingDialogShownTabPageParams::SharedCtor() {
  showoption_ = PROTOBUF_ULONGLONG(0);
}

ConfSettingDialogShownTabPageParams::~ConfSettingDialogShownTabPageParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ConfSettingDialogShownTabPageParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfSettingDialogShownTabPageParams::ArenaDtor(void* object) {
  ConfSettingDialogShownTabPageParams* _this = reinterpret_cast< ConfSettingDialogShownTabPageParams* >(object);
  (void)_this;
}
void ConfSettingDialogShownTabPageParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfSettingDialogShownTabPageParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfSettingDialogShownTabPageParams& ConfSettingDialogShownTabPageParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfSettingDialogShownTabPageParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ConfSettingDialogShownTabPageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  showoption_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfSettingDialogShownTabPageParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 showOption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_showoption(&has_bits);
          showoption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfSettingDialogShownTabPageParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 showOption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_showoption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  return target;
}

size_t ConfSettingDialogShownTabPageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 showOption = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_showoption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfSettingDialogShownTabPageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConfSettingDialogShownTabPageParams*>(
      &from));
}

void ConfSettingDialogShownTabPageParams::MergeFrom(const ConfSettingDialogShownTabPageParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_showoption()) {
    _internal_set_showoption(from._internal_showoption());
  }
}

void ConfSettingDialogShownTabPageParams::CopyFrom(const ConfSettingDialogShownTabPageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ConfSettingDialogShownTabPageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfSettingDialogShownTabPageParams::IsInitialized() const {
  return true;
}

void ConfSettingDialogShownTabPageParams::InternalSwap(ConfSettingDialogShownTabPageParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(showoption_, other->showoption_);
}

std::string ConfSettingDialogShownTabPageParams::GetTypeName() const {
  return "com.electron.sdk.proto.ConfSettingDialogShownTabPageParams";
}


// ===================================================================

void SelectVideoCameraParams::InitAsDefaultInstance() {
}
class SelectVideoCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectVideoCameraParams>()._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelectVideoCameraParams::SelectVideoCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SelectVideoCameraParams)
}
SelectVideoCameraParams::SelectVideoCameraParams(const SelectVideoCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deviceid()) {
    deviceid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SelectVideoCameraParams)
}

void SelectVideoCameraParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectVideoCameraParams_electron_5fsdk_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectVideoCameraParams::~SelectVideoCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SelectVideoCameraParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectVideoCameraParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectVideoCameraParams::ArenaDtor(void* object) {
  SelectVideoCameraParams* _this = reinterpret_cast< SelectVideoCameraParams* >(object);
  (void)_this;
}
void SelectVideoCameraParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectVideoCameraParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectVideoCameraParams& SelectVideoCameraParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectVideoCameraParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SelectVideoCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deviceid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectVideoCameraParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectVideoCameraParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SelectVideoCameraParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SelectVideoCameraParams)
  return target;
}

size_t SelectVideoCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SelectVideoCameraParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectVideoCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectVideoCameraParams*>(
      &from));
}

void SelectVideoCameraParams::MergeFrom(const SelectVideoCameraParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SelectVideoCameraParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deviceid()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
}

void SelectVideoCameraParams::CopyFrom(const SelectVideoCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SelectVideoCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectVideoCameraParams::IsInitialized() const {
  return true;
}

void SelectVideoCameraParams::InternalSwap(SelectVideoCameraParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SelectVideoCameraParams::GetTypeName() const {
  return "com.electron.sdk.proto.SelectVideoCameraParams";
}


// ===================================================================

void EnableVideoMirrorEffectParams::InitAsDefaultInstance() {
}
class EnableVideoMirrorEffectParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoMirrorEffectParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoMirrorEffectParams::EnableVideoMirrorEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
}
EnableVideoMirrorEffectParams::EnableVideoMirrorEffectParams(const EnableVideoMirrorEffectParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
}

void EnableVideoMirrorEffectParams::SharedCtor() {
  benable_ = false;
}

EnableVideoMirrorEffectParams::~EnableVideoMirrorEffectParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableVideoMirrorEffectParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableVideoMirrorEffectParams::ArenaDtor(void* object) {
  EnableVideoMirrorEffectParams* _this = reinterpret_cast< EnableVideoMirrorEffectParams* >(object);
  (void)_this;
}
void EnableVideoMirrorEffectParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableVideoMirrorEffectParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableVideoMirrorEffectParams& EnableVideoMirrorEffectParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableVideoMirrorEffectParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableVideoMirrorEffectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoMirrorEffectParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableVideoMirrorEffectParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  return target;
}

size_t EnableVideoMirrorEffectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoMirrorEffectParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableVideoMirrorEffectParams*>(
      &from));
}

void EnableVideoMirrorEffectParams::MergeFrom(const EnableVideoMirrorEffectParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableVideoMirrorEffectParams::CopyFrom(const EnableVideoMirrorEffectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoMirrorEffectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoMirrorEffectParams::IsInitialized() const {
  return true;
}

void EnableVideoMirrorEffectParams::InternalSwap(EnableVideoMirrorEffectParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableVideoMirrorEffectParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoMirrorEffectParams";
}


// ===================================================================

void EnableFaceBeautyEffectParams::InitAsDefaultInstance() {
}
class EnableFaceBeautyEffectParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableFaceBeautyEffectParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableFaceBeautyEffectParams::EnableFaceBeautyEffectParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
}
EnableFaceBeautyEffectParams::EnableFaceBeautyEffectParams(const EnableFaceBeautyEffectParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
}

void EnableFaceBeautyEffectParams::SharedCtor() {
  benable_ = false;
}

EnableFaceBeautyEffectParams::~EnableFaceBeautyEffectParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableFaceBeautyEffectParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableFaceBeautyEffectParams::ArenaDtor(void* object) {
  EnableFaceBeautyEffectParams* _this = reinterpret_cast< EnableFaceBeautyEffectParams* >(object);
  (void)_this;
}
void EnableFaceBeautyEffectParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableFaceBeautyEffectParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableFaceBeautyEffectParams& EnableFaceBeautyEffectParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableFaceBeautyEffectParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableFaceBeautyEffectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableFaceBeautyEffectParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableFaceBeautyEffectParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  return target;
}

size_t EnableFaceBeautyEffectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableFaceBeautyEffectParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableFaceBeautyEffectParams*>(
      &from));
}

void EnableFaceBeautyEffectParams::MergeFrom(const EnableFaceBeautyEffectParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableFaceBeautyEffectParams::CopyFrom(const EnableFaceBeautyEffectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableFaceBeautyEffectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableFaceBeautyEffectParams::IsInitialized() const {
  return true;
}

void EnableFaceBeautyEffectParams::InternalSwap(EnableFaceBeautyEffectParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableFaceBeautyEffectParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableFaceBeautyEffectParams";
}


// ===================================================================

void EnableHDVideoParams::InitAsDefaultInstance() {
}
class EnableHDVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHDVideoParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHDVideoParams::EnableHDVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHDVideoParams)
}
EnableHDVideoParams::EnableHDVideoParams(const EnableHDVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHDVideoParams)
}

void EnableHDVideoParams::SharedCtor() {
  benable_ = false;
}

EnableHDVideoParams::~EnableHDVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHDVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableHDVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableHDVideoParams::ArenaDtor(void* object) {
  EnableHDVideoParams* _this = reinterpret_cast< EnableHDVideoParams* >(object);
  (void)_this;
}
void EnableHDVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableHDVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableHDVideoParams& EnableHDVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableHDVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableHDVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHDVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHDVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableHDVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHDVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHDVideoParams)
  return target;
}

size_t EnableHDVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHDVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHDVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableHDVideoParams*>(
      &from));
}

void EnableHDVideoParams::MergeFrom(const EnableHDVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHDVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableHDVideoParams::CopyFrom(const EnableHDVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHDVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHDVideoParams::IsInitialized() const {
  return true;
}

void EnableHDVideoParams::InternalSwap(EnableHDVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableHDVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHDVideoParams";
}


// ===================================================================

void EnableAlwaysShowNameOnVideoParams::InitAsDefaultInstance() {
}
class EnableAlwaysShowNameOnVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysShowNameOnVideoParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysShowNameOnVideoParams::EnableAlwaysShowNameOnVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
}
EnableAlwaysShowNameOnVideoParams::EnableAlwaysShowNameOnVideoParams(const EnableAlwaysShowNameOnVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
}

void EnableAlwaysShowNameOnVideoParams::SharedCtor() {
  benable_ = false;
}

EnableAlwaysShowNameOnVideoParams::~EnableAlwaysShowNameOnVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAlwaysShowNameOnVideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAlwaysShowNameOnVideoParams::ArenaDtor(void* object) {
  EnableAlwaysShowNameOnVideoParams* _this = reinterpret_cast< EnableAlwaysShowNameOnVideoParams* >(object);
  (void)_this;
}
void EnableAlwaysShowNameOnVideoParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAlwaysShowNameOnVideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAlwaysShowNameOnVideoParams& EnableAlwaysShowNameOnVideoParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAlwaysShowNameOnVideoParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAlwaysShowNameOnVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysShowNameOnVideoParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAlwaysShowNameOnVideoParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  return target;
}

size_t EnableAlwaysShowNameOnVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysShowNameOnVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAlwaysShowNameOnVideoParams*>(
      &from));
}

void EnableAlwaysShowNameOnVideoParams::MergeFrom(const EnableAlwaysShowNameOnVideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAlwaysShowNameOnVideoParams::CopyFrom(const EnableAlwaysShowNameOnVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysShowNameOnVideoParams::IsInitialized() const {
  return true;
}

void EnableAlwaysShowNameOnVideoParams::InternalSwap(EnableAlwaysShowNameOnVideoParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAlwaysShowNameOnVideoParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysShowNameOnVideoParams";
}


// ===================================================================

void EnableVideoPreviewDialogParams::InitAsDefaultInstance() {
}
class EnableVideoPreviewDialogParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableVideoPreviewDialogParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableVideoPreviewDialogParams::EnableVideoPreviewDialogParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
}
EnableVideoPreviewDialogParams::EnableVideoPreviewDialogParams(const EnableVideoPreviewDialogParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
}

void EnableVideoPreviewDialogParams::SharedCtor() {
  benable_ = false;
}

EnableVideoPreviewDialogParams::~EnableVideoPreviewDialogParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableVideoPreviewDialogParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableVideoPreviewDialogParams::ArenaDtor(void* object) {
  EnableVideoPreviewDialogParams* _this = reinterpret_cast< EnableVideoPreviewDialogParams* >(object);
  (void)_this;
}
void EnableVideoPreviewDialogParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableVideoPreviewDialogParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableVideoPreviewDialogParams& EnableVideoPreviewDialogParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableVideoPreviewDialogParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableVideoPreviewDialogParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableVideoPreviewDialogParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableVideoPreviewDialogParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  return target;
}

size_t EnableVideoPreviewDialogParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableVideoPreviewDialogParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableVideoPreviewDialogParams*>(
      &from));
}

void EnableVideoPreviewDialogParams::MergeFrom(const EnableVideoPreviewDialogParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableVideoPreviewDialogParams::CopyFrom(const EnableVideoPreviewDialogParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableVideoPreviewDialogParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableVideoPreviewDialogParams::IsInitialized() const {
  return true;
}

void EnableVideoPreviewDialogParams::InternalSwap(EnableVideoPreviewDialogParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableVideoPreviewDialogParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableVideoPreviewDialogParams";
}


// ===================================================================

void EnableAutoTurnOffVideoWhenJoinMeetingParams::InitAsDefaultInstance() {
}
class EnableAutoTurnOffVideoWhenJoinMeetingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAutoTurnOffVideoWhenJoinMeetingParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAutoTurnOffVideoWhenJoinMeetingParams::EnableAutoTurnOffVideoWhenJoinMeetingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
}
EnableAutoTurnOffVideoWhenJoinMeetingParams::EnableAutoTurnOffVideoWhenJoinMeetingParams(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::SharedCtor() {
  benable_ = false;
}

EnableAutoTurnOffVideoWhenJoinMeetingParams::~EnableAutoTurnOffVideoWhenJoinMeetingParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::ArenaDtor(void* object) {
  EnableAutoTurnOffVideoWhenJoinMeetingParams* _this = reinterpret_cast< EnableAutoTurnOffVideoWhenJoinMeetingParams* >(object);
  (void)_this;
}
void EnableAutoTurnOffVideoWhenJoinMeetingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAutoTurnOffVideoWhenJoinMeetingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAutoTurnOffVideoWhenJoinMeetingParams& EnableAutoTurnOffVideoWhenJoinMeetingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAutoTurnOffVideoWhenJoinMeetingParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAutoTurnOffVideoWhenJoinMeetingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAutoTurnOffVideoWhenJoinMeetingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAutoTurnOffVideoWhenJoinMeetingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  return target;
}

size_t EnableAutoTurnOffVideoWhenJoinMeetingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAutoTurnOffVideoWhenJoinMeetingParams*>(
      &from));
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::MergeFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::CopyFrom(const EnableAutoTurnOffVideoWhenJoinMeetingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAutoTurnOffVideoWhenJoinMeetingParams::IsInitialized() const {
  return true;
}

void EnableAutoTurnOffVideoWhenJoinMeetingParams::InternalSwap(EnableAutoTurnOffVideoWhenJoinMeetingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAutoTurnOffVideoWhenJoinMeetingParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAutoTurnOffVideoWhenJoinMeetingParams";
}


// ===================================================================

void EnableAlwaysUse16v9Params::InitAsDefaultInstance() {
}
class EnableAlwaysUse16v9Params::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAlwaysUse16v9Params>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAlwaysUse16v9Params::EnableAlwaysUse16v9Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
}
EnableAlwaysUse16v9Params::EnableAlwaysUse16v9Params(const EnableAlwaysUse16v9Params& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
}

void EnableAlwaysUse16v9Params::SharedCtor() {
  benable_ = false;
}

EnableAlwaysUse16v9Params::~EnableAlwaysUse16v9Params() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableAlwaysUse16v9Params::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableAlwaysUse16v9Params::ArenaDtor(void* object) {
  EnableAlwaysUse16v9Params* _this = reinterpret_cast< EnableAlwaysUse16v9Params* >(object);
  (void)_this;
}
void EnableAlwaysUse16v9Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableAlwaysUse16v9Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableAlwaysUse16v9Params& EnableAlwaysUse16v9Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableAlwaysUse16v9Params_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableAlwaysUse16v9Params::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAlwaysUse16v9Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableAlwaysUse16v9Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  return target;
}

size_t EnableAlwaysUse16v9Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAlwaysUse16v9Params::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableAlwaysUse16v9Params*>(
      &from));
}

void EnableAlwaysUse16v9Params::MergeFrom(const EnableAlwaysUse16v9Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableAlwaysUse16v9Params::CopyFrom(const EnableAlwaysUse16v9Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableAlwaysUse16v9Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAlwaysUse16v9Params::IsInitialized() const {
  return true;
}

void EnableAlwaysUse16v9Params::InternalSwap(EnableAlwaysUse16v9Params* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableAlwaysUse16v9Params::GetTypeName() const {
  return "com.electron.sdk.proto.EnableAlwaysUse16v9Params";
}


// ===================================================================

void EnableSpotlightSelfParams::InitAsDefaultInstance() {
}
class EnableSpotlightSelfParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableSpotlightSelfParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableSpotlightSelfParams::EnableSpotlightSelfParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
}
EnableSpotlightSelfParams::EnableSpotlightSelfParams(const EnableSpotlightSelfParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
}

void EnableSpotlightSelfParams::SharedCtor() {
  benable_ = false;
}

EnableSpotlightSelfParams::~EnableSpotlightSelfParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableSpotlightSelfParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableSpotlightSelfParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableSpotlightSelfParams::ArenaDtor(void* object) {
  EnableSpotlightSelfParams* _this = reinterpret_cast< EnableSpotlightSelfParams* >(object);
  (void)_this;
}
void EnableSpotlightSelfParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableSpotlightSelfParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableSpotlightSelfParams& EnableSpotlightSelfParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableSpotlightSelfParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableSpotlightSelfParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableSpotlightSelfParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableSpotlightSelfParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableSpotlightSelfParams)
  return target;
}

size_t EnableSpotlightSelfParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableSpotlightSelfParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableSpotlightSelfParams*>(
      &from));
}

void EnableSpotlightSelfParams::MergeFrom(const EnableSpotlightSelfParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableSpotlightSelfParams::CopyFrom(const EnableSpotlightSelfParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableSpotlightSelfParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableSpotlightSelfParams::IsInitialized() const {
  return true;
}

void EnableSpotlightSelfParams::InternalSwap(EnableSpotlightSelfParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableSpotlightSelfParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableSpotlightSelfParams";
}


// ===================================================================

void EnableHardwareEncodeParams::InitAsDefaultInstance() {
}
class EnableHardwareEncodeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHardwareEncodeParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encodetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnableHardwareEncodeParams::EnableHardwareEncodeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
}
EnableHardwareEncodeParams::EnableHardwareEncodeParams(const EnableHardwareEncodeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&benable_, &from.benable_,
    static_cast<size_t>(reinterpret_cast<char*>(&encodetype_) -
    reinterpret_cast<char*>(&benable_)) + sizeof(encodetype_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
}

void EnableHardwareEncodeParams::SharedCtor() {
  ::memset(&benable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encodetype_) -
      reinterpret_cast<char*>(&benable_)) + sizeof(encodetype_));
}

EnableHardwareEncodeParams::~EnableHardwareEncodeParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHardwareEncodeParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableHardwareEncodeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableHardwareEncodeParams::ArenaDtor(void* object) {
  EnableHardwareEncodeParams* _this = reinterpret_cast< EnableHardwareEncodeParams* >(object);
  (void)_this;
}
void EnableHardwareEncodeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableHardwareEncodeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableHardwareEncodeParams& EnableHardwareEncodeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableHardwareEncodeParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableHardwareEncodeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&benable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encodetype_) -
        reinterpret_cast<char*>(&benable_)) + sizeof(encodetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHardwareEncodeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 encodeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_encodetype(&has_bits);
          encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableHardwareEncodeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  // optional int32 encodeType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_encodetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHardwareEncodeParams)
  return target;
}

size_t EnableHardwareEncodeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bEnable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 encodeType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encodetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHardwareEncodeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableHardwareEncodeParams*>(
      &from));
}

void EnableHardwareEncodeParams::MergeFrom(const EnableHardwareEncodeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      benable_ = from.benable_;
    }
    if (cached_has_bits & 0x00000002u) {
      encodetype_ = from.encodetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnableHardwareEncodeParams::CopyFrom(const EnableHardwareEncodeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHardwareEncodeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHardwareEncodeParams::IsInitialized() const {
  return true;
}

void EnableHardwareEncodeParams::InternalSwap(EnableHardwareEncodeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableHardwareEncodeParams, encodetype_)
      + sizeof(EnableHardwareEncodeParams::encodetype_)
      - PROTOBUF_FIELD_OFFSET(EnableHardwareEncodeParams, benable_)>(
          reinterpret_cast<char*>(&benable_),
          reinterpret_cast<char*>(&other->benable_));
}

std::string EnableHardwareEncodeParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHardwareEncodeParams";
}


// ===================================================================

void IsHardwareEncodeEnabledParams::InitAsDefaultInstance() {
}
class IsHardwareEncodeEnabledParams::_Internal {
 public:
  using HasBits = decltype(std::declval<IsHardwareEncodeEnabledParams>()._has_bits_);
  static void set_has_encodetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsHardwareEncodeEnabledParams::IsHardwareEncodeEnabledParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
}
IsHardwareEncodeEnabledParams::IsHardwareEncodeEnabledParams(const IsHardwareEncodeEnabledParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encodetype_ = from.encodetype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
}

void IsHardwareEncodeEnabledParams::SharedCtor() {
  encodetype_ = 0;
}

IsHardwareEncodeEnabledParams::~IsHardwareEncodeEnabledParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsHardwareEncodeEnabledParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsHardwareEncodeEnabledParams::ArenaDtor(void* object) {
  IsHardwareEncodeEnabledParams* _this = reinterpret_cast< IsHardwareEncodeEnabledParams* >(object);
  (void)_this;
}
void IsHardwareEncodeEnabledParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsHardwareEncodeEnabledParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsHardwareEncodeEnabledParams& IsHardwareEncodeEnabledParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsHardwareEncodeEnabledParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void IsHardwareEncodeEnabledParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encodetype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IsHardwareEncodeEnabledParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 encodeType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encodetype(&has_bits);
          encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsHardwareEncodeEnabledParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encodeType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encodetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  return target;
}

size_t IsHardwareEncodeEnabledParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 encodeType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_encodetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsHardwareEncodeEnabledParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsHardwareEncodeEnabledParams*>(
      &from));
}

void IsHardwareEncodeEnabledParams::MergeFrom(const IsHardwareEncodeEnabledParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encodetype()) {
    _internal_set_encodetype(from._internal_encodetype());
  }
}

void IsHardwareEncodeEnabledParams::CopyFrom(const IsHardwareEncodeEnabledParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.IsHardwareEncodeEnabledParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsHardwareEncodeEnabledParams::IsInitialized() const {
  return true;
}

void IsHardwareEncodeEnabledParams::InternalSwap(IsHardwareEncodeEnabledParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encodetype_, other->encodetype_);
}

std::string IsHardwareEncodeEnabledParams::GetTypeName() const {
  return "com.electron.sdk.proto.IsHardwareEncodeEnabledParams";
}


// ===================================================================

void Enable49VideoesInGallaryViewParams::InitAsDefaultInstance() {
}
class Enable49VideoesInGallaryViewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<Enable49VideoesInGallaryViewParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Enable49VideoesInGallaryViewParams::Enable49VideoesInGallaryViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
}
Enable49VideoesInGallaryViewParams::Enable49VideoesInGallaryViewParams(const Enable49VideoesInGallaryViewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
}

void Enable49VideoesInGallaryViewParams::SharedCtor() {
  benable_ = false;
}

Enable49VideoesInGallaryViewParams::~Enable49VideoesInGallaryViewParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Enable49VideoesInGallaryViewParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Enable49VideoesInGallaryViewParams::ArenaDtor(void* object) {
  Enable49VideoesInGallaryViewParams* _this = reinterpret_cast< Enable49VideoesInGallaryViewParams* >(object);
  (void)_this;
}
void Enable49VideoesInGallaryViewParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Enable49VideoesInGallaryViewParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Enable49VideoesInGallaryViewParams& Enable49VideoesInGallaryViewParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Enable49VideoesInGallaryViewParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void Enable49VideoesInGallaryViewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Enable49VideoesInGallaryViewParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Enable49VideoesInGallaryViewParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  return target;
}

size_t Enable49VideoesInGallaryViewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Enable49VideoesInGallaryViewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Enable49VideoesInGallaryViewParams*>(
      &from));
}

void Enable49VideoesInGallaryViewParams::MergeFrom(const Enable49VideoesInGallaryViewParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void Enable49VideoesInGallaryViewParams::CopyFrom(const Enable49VideoesInGallaryViewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.Enable49VideoesInGallaryViewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enable49VideoesInGallaryViewParams::IsInitialized() const {
  return true;
}

void Enable49VideoesInGallaryViewParams::InternalSwap(Enable49VideoesInGallaryViewParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string Enable49VideoesInGallaryViewParams::GetTypeName() const {
  return "com.electron.sdk.proto.Enable49VideoesInGallaryViewParams";
}


// ===================================================================

void EnableHideNoVideoUsersOnWallViewParams::InitAsDefaultInstance() {
}
class EnableHideNoVideoUsersOnWallViewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHideNoVideoUsersOnWallViewParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHideNoVideoUsersOnWallViewParams::EnableHideNoVideoUsersOnWallViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
}
EnableHideNoVideoUsersOnWallViewParams::EnableHideNoVideoUsersOnWallViewParams(const EnableHideNoVideoUsersOnWallViewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
}

void EnableHideNoVideoUsersOnWallViewParams::SharedCtor() {
  benable_ = false;
}

EnableHideNoVideoUsersOnWallViewParams::~EnableHideNoVideoUsersOnWallViewParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableHideNoVideoUsersOnWallViewParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableHideNoVideoUsersOnWallViewParams::ArenaDtor(void* object) {
  EnableHideNoVideoUsersOnWallViewParams* _this = reinterpret_cast< EnableHideNoVideoUsersOnWallViewParams* >(object);
  (void)_this;
}
void EnableHideNoVideoUsersOnWallViewParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableHideNoVideoUsersOnWallViewParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableHideNoVideoUsersOnWallViewParams& EnableHideNoVideoUsersOnWallViewParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableHideNoVideoUsersOnWallViewParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableHideNoVideoUsersOnWallViewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHideNoVideoUsersOnWallViewParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableHideNoVideoUsersOnWallViewParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  return target;
}

size_t EnableHideNoVideoUsersOnWallViewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHideNoVideoUsersOnWallViewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableHideNoVideoUsersOnWallViewParams*>(
      &from));
}

void EnableHideNoVideoUsersOnWallViewParams::MergeFrom(const EnableHideNoVideoUsersOnWallViewParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableHideNoVideoUsersOnWallViewParams::CopyFrom(const EnableHideNoVideoUsersOnWallViewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHideNoVideoUsersOnWallViewParams::IsInitialized() const {
  return true;
}

void EnableHideNoVideoUsersOnWallViewParams::InternalSwap(EnableHideNoVideoUsersOnWallViewParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableHideNoVideoUsersOnWallViewParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableHideNoVideoUsersOnWallViewParams";
}


// ===================================================================

void GenerateSSOLoginWebURLParams::InitAsDefaultInstance() {
}
class GenerateSSOLoginWebURLParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GenerateSSOLoginWebURLParams>()._has_bits_);
  static void set_has_prefixofvanityurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GenerateSSOLoginWebURLParams::GenerateSSOLoginWebURLParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
}
GenerateSSOLoginWebURLParams::GenerateSSOLoginWebURLParams(const GenerateSSOLoginWebURLParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  prefixofvanityurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefixofvanityurl()) {
    prefixofvanityurl_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefixofvanityurl(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
}

void GenerateSSOLoginWebURLParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateSSOLoginWebURLParams_electron_5fsdk_2eproto.base);
  prefixofvanityurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateSSOLoginWebURLParams::~GenerateSSOLoginWebURLParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GenerateSSOLoginWebURLParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefixofvanityurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateSSOLoginWebURLParams::ArenaDtor(void* object) {
  GenerateSSOLoginWebURLParams* _this = reinterpret_cast< GenerateSSOLoginWebURLParams* >(object);
  (void)_this;
}
void GenerateSSOLoginWebURLParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateSSOLoginWebURLParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateSSOLoginWebURLParams& GenerateSSOLoginWebURLParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateSSOLoginWebURLParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void GenerateSSOLoginWebURLParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prefixofvanityurl_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenerateSSOLoginWebURLParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string prefixOfVanityUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefixofvanityurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateSSOLoginWebURLParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string prefixOfVanityUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefixofvanityurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  return target;
}

size_t GenerateSSOLoginWebURLParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string prefixOfVanityUrl = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefixofvanityurl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateSSOLoginWebURLParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenerateSSOLoginWebURLParams*>(
      &from));
}

void GenerateSSOLoginWebURLParams::MergeFrom(const GenerateSSOLoginWebURLParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prefixofvanityurl()) {
    _internal_set_prefixofvanityurl(from._internal_prefixofvanityurl());
  }
}

void GenerateSSOLoginWebURLParams::CopyFrom(const GenerateSSOLoginWebURLParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.GenerateSSOLoginWebURLParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateSSOLoginWebURLParams::IsInitialized() const {
  return true;
}

void GenerateSSOLoginWebURLParams::InternalSwap(GenerateSSOLoginWebURLParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefixofvanityurl_.Swap(&other->prefixofvanityurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GenerateSSOLoginWebURLParams::GetTypeName() const {
  return "com.electron.sdk.proto.GenerateSSOLoginWebURLParams";
}


// ===================================================================

void SSOLoginWithWebUriProtocolParams::InitAsDefaultInstance() {
}
class SSOLoginWithWebUriProtocolParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SSOLoginWithWebUriProtocolParams>()._has_bits_);
  static void set_has_uriprotocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSOLoginWithWebUriProtocolParams::SSOLoginWithWebUriProtocolParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
}
SSOLoginWithWebUriProtocolParams::SSOLoginWithWebUriProtocolParams(const SSOLoginWithWebUriProtocolParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uriprotocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uriprotocol()) {
    uriprotocol_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uriprotocol(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
}

void SSOLoginWithWebUriProtocolParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSOLoginWithWebUriProtocolParams_electron_5fsdk_2eproto.base);
  uriprotocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SSOLoginWithWebUriProtocolParams::~SSOLoginWithWebUriProtocolParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SSOLoginWithWebUriProtocolParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uriprotocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSOLoginWithWebUriProtocolParams::ArenaDtor(void* object) {
  SSOLoginWithWebUriProtocolParams* _this = reinterpret_cast< SSOLoginWithWebUriProtocolParams* >(object);
  (void)_this;
}
void SSOLoginWithWebUriProtocolParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSOLoginWithWebUriProtocolParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSOLoginWithWebUriProtocolParams& SSOLoginWithWebUriProtocolParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSOLoginWithWebUriProtocolParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void SSOLoginWithWebUriProtocolParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uriprotocol_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SSOLoginWithWebUriProtocolParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string uriProtocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uriprotocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSOLoginWithWebUriProtocolParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uriProtocol = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uriprotocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  return target;
}

size_t SSOLoginWithWebUriProtocolParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string uriProtocol = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uriprotocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSOLoginWithWebUriProtocolParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SSOLoginWithWebUriProtocolParams*>(
      &from));
}

void SSOLoginWithWebUriProtocolParams::MergeFrom(const SSOLoginWithWebUriProtocolParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uriprotocol()) {
    _internal_set_uriprotocol(from._internal_uriprotocol());
  }
}

void SSOLoginWithWebUriProtocolParams::CopyFrom(const SSOLoginWithWebUriProtocolParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSOLoginWithWebUriProtocolParams::IsInitialized() const {
  return true;
}

void SSOLoginWithWebUriProtocolParams::InternalSwap(SSOLoginWithWebUriProtocolParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uriprotocol_.Swap(&other->uriprotocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SSOLoginWithWebUriProtocolParams::GetTypeName() const {
  return "com.electron.sdk.proto.SSOLoginWithWebUriProtocolParams";
}


// ===================================================================

void ShowAANPanelParams::InitAsDefaultInstance() {
}
class ShowAANPanelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowAANPanelParams>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_windowid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShowAANPanelParams::ShowAANPanelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.ShowAANPanelParams)
}
ShowAANPanelParams::ShowAANPanelParams(const ShowAANPanelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&windowid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(windowid_));
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.ShowAANPanelParams)
}

void ShowAANPanelParams::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&windowid_) -
      reinterpret_cast<char*>(&x_)) + sizeof(windowid_));
}

ShowAANPanelParams::~ShowAANPanelParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.ShowAANPanelParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowAANPanelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowAANPanelParams::ArenaDtor(void* object) {
  ShowAANPanelParams* _this = reinterpret_cast< ShowAANPanelParams* >(object);
  (void)_this;
}
void ShowAANPanelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowAANPanelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowAANPanelParams& ShowAANPanelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowAANPanelParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void ShowAANPanelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.ShowAANPanelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&windowid_) -
        reinterpret_cast<char*>(&x_)) + sizeof(windowid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowAANPanelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 WindowID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_windowid(&has_bits);
          windowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowAANPanelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.ShowAANPanelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional uint64 WindowID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_windowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.ShowAANPanelParams)
  return target;
}

size_t ShowAANPanelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.ShowAANPanelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional uint64 WindowID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_windowid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowAANPanelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowAANPanelParams*>(
      &from));
}

void ShowAANPanelParams::MergeFrom(const ShowAANPanelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.ShowAANPanelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      windowid_ = from.windowid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShowAANPanelParams::CopyFrom(const ShowAANPanelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.ShowAANPanelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowAANPanelParams::IsInitialized() const {
  return true;
}

void ShowAANPanelParams::InternalSwap(ShowAANPanelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowAANPanelParams, windowid_)
      + sizeof(ShowAANPanelParams::windowid_)
      - PROTOBUF_FIELD_OFFSET(ShowAANPanelParams, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

std::string ShowAANPanelParams::GetTypeName() const {
  return "com.electron.sdk.proto.ShowAANPanelParams";
}


// ===================================================================

void EnableInviteLinkOnMeetingUIParams::InitAsDefaultInstance() {
}
class EnableInviteLinkOnMeetingUIParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableInviteLinkOnMeetingUIParams>()._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableInviteLinkOnMeetingUIParams::EnableInviteLinkOnMeetingUIParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
}
EnableInviteLinkOnMeetingUIParams::EnableInviteLinkOnMeetingUIParams(const EnableInviteLinkOnMeetingUIParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benable_ = from.benable_;
  // @@protoc_insertion_point(copy_constructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
}

void EnableInviteLinkOnMeetingUIParams::SharedCtor() {
  benable_ = false;
}

EnableInviteLinkOnMeetingUIParams::~EnableInviteLinkOnMeetingUIParams() {
  // @@protoc_insertion_point(destructor:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EnableInviteLinkOnMeetingUIParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableInviteLinkOnMeetingUIParams::ArenaDtor(void* object) {
  EnableInviteLinkOnMeetingUIParams* _this = reinterpret_cast< EnableInviteLinkOnMeetingUIParams* >(object);
  (void)_this;
}
void EnableInviteLinkOnMeetingUIParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableInviteLinkOnMeetingUIParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableInviteLinkOnMeetingUIParams& EnableInviteLinkOnMeetingUIParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableInviteLinkOnMeetingUIParams_electron_5fsdk_2eproto.base);
  return *internal_default_instance();
}


void EnableInviteLinkOnMeetingUIParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableInviteLinkOnMeetingUIParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableInviteLinkOnMeetingUIParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  return target;
}

size_t EnableInviteLinkOnMeetingUIParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableInviteLinkOnMeetingUIParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnableInviteLinkOnMeetingUIParams*>(
      &from));
}

void EnableInviteLinkOnMeetingUIParams::MergeFrom(const EnableInviteLinkOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_benable()) {
    _internal_set_benable(from._internal_benable());
  }
}

void EnableInviteLinkOnMeetingUIParams::CopyFrom(const EnableInviteLinkOnMeetingUIParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableInviteLinkOnMeetingUIParams::IsInitialized() const {
  return true;
}

void EnableInviteLinkOnMeetingUIParams::InternalSwap(EnableInviteLinkOnMeetingUIParams* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benable_, other->benable_);
}

std::string EnableInviteLinkOnMeetingUIParams::GetTypeName() const {
  return "com.electron.sdk.proto.EnableInviteLinkOnMeetingUIParams";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sdk
}  // namespace electron
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InitSDKParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InitSDKParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InitSDKParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AuthParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AuthParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AuthParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AuthWithJwtTokenParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AuthWithJwtTokenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AuthWithJwtTokenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::LoginParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::LoginParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::LoginParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::LoginWithSSOTokenParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::LoginWithSSOTokenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::LoginWithSSOTokenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartWithoutLoginParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartWithoutLoginParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartWithoutLoginParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::JoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::JoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::JoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::JoinWithoutLoginParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::JoinWithoutLoginParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::JoinWithoutLoginParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::LeaveMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::LeaveMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::LeaveMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HandleZoomWebUriProtocolActionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowChatDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowChatDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowChatDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnterFullScreenParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnterFullScreenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnterFullScreenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ExitFullScreenParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ExitFullScreenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ExitFullScreenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MoveFloatVideoWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MoveFloatVideoWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MoveFloatVideoWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSharingToolbarParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSharingToolbarParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSharingToolbarParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ChangeFloatoActiveSpkVideoSizeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowParticipantsListWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowParticipantsListWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowParticipantsListWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowBottomFloatToolbarWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowPreOrNextPageVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSharingFrameWindowsParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSharingFrameWindowsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSharingFrameWindowsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwitchSplitScreenModeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwitchSplitScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwitchSplitScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwitchMinimizeUIMode4FirstScreenMeetingUIWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SwapToShowShareViewOrVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowSettingDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowSettingDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowSettingDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ScheduleMeetingWithWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ScheduleMeetingWithWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ScheduleMeetingWithWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EditMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EditMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EditMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EditMeetingWithWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EditMeetingWithWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EditMeetingWithWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DeleteMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DeleteMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DeleteMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedPictureResourceParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedPictureResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedPictureResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedStringResourceParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedStringResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedStringResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AddCustomizedURLResourceParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AddCustomizedURLResourceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AddCustomizedURLResourceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TryWithMeetingNumberParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TryWithMeetingNumberParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TryWithMeetingNumberParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TryWithPairingCodeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TryWithPairingCodeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TryWithPairingCodeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartAnnotationParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StopAnnotationParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StopAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StopAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetToolParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetToolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetToolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ClearAnnotationParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ClearAnnotationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ClearAnnotationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetColorParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetColorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetColorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetLineWidthParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetLineWidthParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetLineWidthParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UndoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UndoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UndoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MuteAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnmuteAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnmuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnmuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnablePlayChimeWhenEnterOrExitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInviteButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetFloatVideoPosParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetFloatVideoPosParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetFloatVideoPosParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetBottomFloatToolBarWndVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetSharingToolBarVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetDirectShareMonitorIDParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetDirectShareMonitorIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetDirectShareMonitorIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMeetingUIPosParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMeetingUIPosParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMeetingUIPosParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableWaitingForHostDialogParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableWaitingForHostDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableWaitingForHostDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisablePopupMeetingWrongPSWDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoEndOtherMeetingWhenStartMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLButtonDBClick4SwitchFullScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetFloatVideoWndVisibilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::PrePopulateWebinarRegistrationInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustSpeakerVolumeWhenJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustMicVolumeWhenJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfigDSCPParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfigDSCPParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfigDSCPParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHIdeFullPhoneNumber4PureCallinUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShareIOSDeviceParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShareIOSDeviceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShareIOSDeviceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShareWhiteBoardParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShareWhiteBoardParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShareWhiteBoardParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLengthLimitationOfMeetingNumberParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ForceDisableMultiShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ForceDisableMultiShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ForceDisableMultiShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLocalRecordingConverProgressBarDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMaxDurationForOnlyHostInMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableApproveRemoteControlDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDeclineRemoteControlResponseDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableLeaveMeetingOptionForHostParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAudioButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableEnterAndExitFullScreenButtonOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickShareBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickShareBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickShareBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickEndMeetingBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectFreeMeetingEndingReminderDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickCustomLiveStreamMenuEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickParticipantListBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickCCBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickCCBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickCCBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickAudioBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectClickAudioMenuBTNEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectMeetingWarningMsgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableToolTipsShowParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableToolTipsShowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableToolTipsShowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAirplayInstructionWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableClaimHostFeatureParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableClaimHostFeatureParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableClaimHostFeatureParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoHideJoinAudioDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AlwaysShowIconOnTaskBarParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableSplitScreenModeUIElementsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowAudioUseComputerSoundChkboxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowCallInTabParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowCallInTabParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowCallInTabParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowCallMeTabParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowCallMeTabParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowCallMeTabParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableTopMostAttr4SettingDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableGrabShareWithoutReminderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowShareSwitchMultiToSingleConfirmDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableFreeMeetingRemainTimeNotifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideChatItemOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideRecordItemOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideUpgradeFreeMeetingButtonParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowInviteDlgTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowH323SubTabPageParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowH323SubTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowH323SubTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideSwitchCameraButtonParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideSwitchCameraButtonParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideSwitchCameraButtonParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideCopyUrlOnInviteWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideCopyInvitationOnInviteWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideKeypadButtonOnMeetingWindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideRemoteControlOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideQAOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideQAOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideQAOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HidePollOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HidePollOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HidePollOnMeetingUIParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInputMeetingPasswordDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInputMeetingScreenNameDlgParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectWebinarNeedRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RedirectEndOtherMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RedirectEndOtherMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RedirectEndOtherMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableForceAutoStartMyVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableForceAutoStopMyVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAutoShowSelectJoinAudioDlgWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableShowJoinMeetingWndParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableConfidentialWatermarkParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableConfidentialWatermarkParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableConfidentialWatermarkParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableToolbarInviteButtonClickOriginActionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetShowVideoOptimizeChkboxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingPasswordAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingIDAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputMeetingScreenNameParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputMeetingScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputMeetingScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::InputWebinarRegisterEmailAndScreenNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CallOutH323Params* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CallOutH323Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CallOutH323Params >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetUserInfoByUserIDParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetUserInfoByUserIDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetUserInfoByUserIDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CanStartRecordingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CanStartRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CanStartRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::IsSupportLocalRecordingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::IsSupportLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::IsSupportLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::AllowLocalRecordingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::AllowLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::AllowLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisAllowLocalRecordingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisAllowLocalRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisAllowLocalRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartAppShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartAppShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartAppShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::StartMonitorShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::StartMonitorShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::StartMonitorShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::MuteVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::MuteVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::MuteVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnMuteVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnMuteVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnMuteVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::PinVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::PinVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::PinVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SpotlightVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SpotlightVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SpotlightVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideOrShowNoVideoUserOnVideoWallParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::CreateRendererParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::CreateRendererParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::CreateRendererParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DestroyRendererParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DestroyRendererParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DestroyRendererParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SubscribeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::UnSubscribeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::UnSubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::UnSubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetRawDataResolutionParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetRawDataResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetRawDataResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetResolutionParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetRawDataTypeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetRawDataTypeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetRawDataTypeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GetUserIdParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GetUserIdParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GetUserIdParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableZoomAuthRealNameMeetingUIShownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::RetrieveParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::RetrieveParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::RetrieveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::VerifyParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::VerifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::VerifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetDefaultCellPhoneInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysShowMeetingControlsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectMicParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectMicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectMicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectSpeakerParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectSpeakerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectSpeakerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoJoinAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoJoinAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoJoinAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoAdjustMicParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoAdjustMicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoAdjustMicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableStereoAudioParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableStereoAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableStereoAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableMicOriginalInputParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableMicOriginalInputParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableMicOriginalInputParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHoldSpaceKeyToSpeakParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysMuteMicWhenJoinVoipParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSuppressAudioNotifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetEchoCancellationLevelParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetEchoCancellationLevelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetEchoCancellationLevelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetMicVolParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetMicVolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetMicVolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetSpeakerVolParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetSpeakerVolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetSpeakerVolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDualScreenModeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDualScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDualScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::TurnOffAeroModeInSharingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFitToWindowWhenViewSharingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSplitScreenModeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSplitScreenModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSplitScreenModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoFullScreenVideoWhenViewShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableDisplayReminderWindowWhenExitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowMyMeetingElapseTimeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAccelerateGPUWhenShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableRemoteControlAllApplicationsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SetRecordingPathParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SetRecordingPathParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SetRecordingPathParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSelectRecordFileLocationAfterMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableMultiAudioStreamRecordParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAddTimestampWatermarkParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableOptimizeFor3rdPartyVideoEditorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableShowVideoThumbnailWhenShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnablePlaceVideoNextToShareInRecordParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAdvancedFeatures4GeneralSettingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::DisableAccountSettingTabPageParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::DisableAccountSettingTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::DisableAccountSettingTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::HideAutoCopyInviteLinkCheckBoxParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfigToShowUrlLinksInSettingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ConfSettingDialogShownTabPageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SelectVideoCameraParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SelectVideoCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SelectVideoCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoMirrorEffectParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoMirrorEffectParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoMirrorEffectParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableFaceBeautyEffectParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableFaceBeautyEffectParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableFaceBeautyEffectParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHDVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHDVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHDVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysShowNameOnVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableVideoPreviewDialogParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableVideoPreviewDialogParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableVideoPreviewDialogParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAutoTurnOffVideoWhenJoinMeetingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableAlwaysUse16v9Params* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableAlwaysUse16v9Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableAlwaysUse16v9Params >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableSpotlightSelfParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableSpotlightSelfParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableSpotlightSelfParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHardwareEncodeParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHardwareEncodeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHardwareEncodeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::IsHardwareEncodeEnabledParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::Enable49VideoesInGallaryViewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableHideNoVideoUsersOnWallViewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::GenerateSSOLoginWebURLParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::SSOLoginWithWebUriProtocolParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::ShowAANPanelParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::ShowAANPanelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::ShowAANPanelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams* Arena::CreateMaybeMessage< ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::sdk::proto::EnableInviteLinkOnMeetingUIParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
